import [Glyph] from"../support/glyph/index.mjs"
import [GlyphStore] from"../support/glyph-store.mjs"
import [GlyphBlock GlyphBlockExecState] from"../support/glyph-block.mjs"
import as Gr from"../support/gr.mjs"
import as SpiroKit from"../kits/spiro-kit.mjs"
import as BooleKit from"../kits/boole-kit.mjs"
import [DesignParameters] from"../meta/aesthetics.mjs"

extern isFinite

import [mix linreg clamp fallback $NamedParameterPair$] from"../support/utils.mjs"
import [calculateMetrics setFontMetrics GenDivFrame] from"../meta/aesthetics.mjs"

$$include '../meta/macros.ptl'

export : define [buildGlyphs para recursive] : begin
	local glyphStore : new GlyphStore

	define Metrics : calculateMetrics para

	define fontMetrics { .head {.} .hhea {.} .os2 {.} .post {.} }
	setFontMetrics para Metrics fontMetrics

	# Anchor parameters
	define {AS_BASE ALSO_METRICS} {'AS-BASE' 'ALSO-METRICS'}

	define DivFrame : GenDivFrame Metrics
	define MarkSet    [DivFrame 1 2].markSet

	define [glyph-is-needed name] : [not recursive] || [recursive.glyphIsNeeded name]

	define [$createAndSaveGlyphImpl$ _1 _2 actions] : begin
		local saveGlyphName    null
		local unicode          null

		piecewise
			([typeof _1] === 'number' && _1) : begin
				set saveGlyphName : 'uni' + [_1.toString 16 :.padStart 4 '0' :.toUpperCase]
				set unicode          _1
			([typeof _1] === 'string' && _1) : begin
				set saveGlyphName    _1
				set unicode          _2
			true : begin
				set saveGlyphName    null
				set unicode          null

		if (saveGlyphName && [not : glyph-is-needed saveGlyphName]) : return nothing
		if para.verbose : console.log saveGlyphName

		local glyphObject [new Glyph saveGlyphName]
		glyphObject.setWidth Metrics.Width
		glyphObject.gizmo = Metrics.GlobalTransform
		glyphObject._m_dependencyManager = $execState$.dependencyManager

		glyphObject.include actions true true

		$execState$.setGlyphToBlockDependency glyphObject

		if saveGlyphName : begin
			if (saveGlyphName.0 != '.' && [glyphStore.queryByName saveGlyphName])
				throw : new Error "Glyph \(saveGlyphName) already exists"
			glyphStore.addGlyph saveGlyphName glyphObject
			if unicode : $assignUnicodeImpl$ glyphObject unicode

		return glyphObject

	define [$assignUnicodeImpl$ g unicode] : begin
		local u unicode
		if ([typeof unicode] === "string") : begin
			set u [unicode.codePointAt 0]
		glyphStore.encodeGlyph u g

	local $pendingGlyphBlocks$ {}
	local $execState$ : new GlyphBlockExecState
	define [$defineGlyphBlockImpl$ $Capture$ blockName body] : begin
		local glyphBlock : new GlyphBlock $Capture$ $execState$ blockName body
		if [not $Capture$.(blockName)] : set $Capture$.(blockName) glyphBlock
		$pendingGlyphBlocks$.push glyphBlock

	### Spiro constructions
	# Basic knots
	define SpiroFns : SpiroKit.SetupBuilders : object
		globalTransform Metrics.GlobalTransform
		Contrast        Metrics.Contrast
		Stroke          Metrics.Stroke
		CorrectionOMidX Metrics.CorrectionOMidX
		Superness       DesignParameters.superness
	define BooleFns : BooleKit.SetupBuilders : object
		globalTransform Metrics.GlobalTransform
		Glyph           Glyph

	# Meta
	define [tagged tag component] : function [ca cw] : begin
		define t this.ctxTag
		set this.ctxTag tag
		define ret : this.include component ca cw
		set this.ctxTag t
		return ret

	define $$Capture$$ : object
		$createAndSaveGlyphImpl$
		$NamedParameterPair$
		$assignUnicodeImpl$
		$defineGlyphBlockImpl$
		$execState$
		Metrics : Object.assign {.} Metrics
		para
		recursive
		glyphStore
		SpiroFns
		BooleFns
		DivFrame
		MarkSet
		AS_BASE
		ALSO_METRICS
		glyph-is-needed
		buildGlyphs
		tagged
		fontMetrics

	### HERE WE GO
	run-glyph-module "./common/shapes.mjs"
	run-glyph-module "./common/derivatives.mjs"
	run-glyph-module "./space/index.mjs"
	run-glyph-module "./marks/index.mjs"

	# Unified letters
	run-glyph-module "./letter/shared.mjs"
	run-glyph-module "./letter/latin.mjs"
	run-glyph-module "./letter/greek.mjs"
	run-glyph-module "./letter/cyrillic.mjs"

	# Numbers
	run-glyph-module "./number/index.mjs"

	# Symbols
	run-glyph-module "./symbol/shared.mjs"
	run-glyph-module "./symbol/punctuation.mjs"
	run-glyph-module "./symbol/arrow.mjs"
	run-glyph-module "./symbol/geometric.mjs"
	run-glyph-module "./symbol/enclosure.mjs"
	run-glyph-module "./symbol/math.mjs"
	run-glyph-module "./symbol/letter.mjs"
	run-glyph-module "./symbol/braille.mjs"
	run-glyph-module "./symbol/mosaic.mjs"
	run-glyph-module "./symbol/pictograph.mjs"
	run-glyph-module "./symbol/ligation.mjs"

	# Auto-builds
	if [not recursive] : begin
		run-glyph-module "./auto-build/special-accented-letters.mjs"
		run-glyph-module "./auto-build/mark-doppelganger.mjs"
		run-glyph-module "./auto-build/accents.mjs"
		run-glyph-module "./auto-build/transformed.mjs"
		run-glyph-module "./auto-build/composite.mjs"

	foreach [gb : items-of $pendingGlyphBlocks$] : gb.resolve

	Gr.linkSuffixPairGr glyphStore 'NWID' 'WWID' Gr.Nwid Gr.Wwid
	Gr.linkSuffixPairGr glyphStore 'lnum' 'onum' Gr.Lnum Gr.Onum
	Gr.linkSuffixGr     glyphStore 'aplForm'     Gr.AplForm

	return : object glyphStore fontMetrics
