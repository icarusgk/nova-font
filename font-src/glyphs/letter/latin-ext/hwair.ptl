$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Hwair : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : nShoulderKnots
	glyph-block-import Letter-Shared-Shapes : SerifFrame

	define Variants : object
		straightSerifless      { false false false }
		straightTopLeftSerifed { true  false false }
		straightSerifed        { true  true  true  }

	foreach { suffix { serifLT serifLB serifRT } } [pairs-of Variants] : do
		create-glyph "hwair.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.b
			include : VBar.l df.leftSB 0 Ascender df.mvs
			include : dispiro
				nShoulderKnots (df.leftSB + df.mvs * HVContrast) (df.middle + df.mvs * 0.5 * HVContrast) (df.mvs * 0.4) nothing (XH * 0.51) (SmallArchDepthA * 0.6 * df.div) (SmallArchDepthB * 0.6 * df.div) df.mvs
				flat (df.middle + df.mvs * 0.5 * HVContrast) (XH * 0.5) [heading Downward]
				curl (df.middle + df.mvs * 0.5 * HVContrast) (SmallArchDepthB * 0.6 * df.div)
				arcvh
				g4 [mix (df.middle - df.mvs * 0.5 * HVContrast) df.rightSB 0.5] O [widths.heading df.mvs 0 Rightward]
				archv
				flat df.rightSB (SmallArchDepthA * 0.6 * df.div)
				curl df.rightSB XH [heading Upward]

			do "slabs"
				local sf1 : SerifFrame.fromDf df Ascender 0
				local sf2 : [SerifFrame.fromDf df XH 0].slice 1 2
				local jut : Jut * 0.75
				if serifLT : include : tagged 'serifLT' sf1.lt.outer
				if serifLB : include : tagged 'serifLB' sf1.lb.full
				if serifRT : include : tagged 'serifRT' sf2.rt.full

	select-variant 'hwair' 0x195 (follow -- 'heng')
