$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Ezh : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : CurlyTail SerifedArcEnd RetroflexHook

	define [StdTerminalShape top bot yMidBar] : begin
		local hookDepth : Hook * (top - bot) / [fallback para.cap0 CAP]
		local pArc : SmallArchDepthB / (SmallArchDepthA + SmallArchDepthB)
		list
			g4   (RightSB - OX) [mix yMidBar bot pArc]
			hookend bot
			g4 SB (bot + hookDepth)

	define [HooklessTerminalShape p] : function [top bot yMidBar] : list
		g4.down.mid  (RightSB - OX) [mix yMidBar bot p] [heading Downward]

	glyph-block-export EzhShape
	define [EzhShape] : with-params [top bot pleft pright terminalShape] : glyph-proc
		local cor : 1.2 * HVContrast
		local yMidBar : mix bot top 0.6
		local ezhLeft : mix SB RightSB [fallback pleft 0.2]
		local ezhRight : mix SB RightSB [fallback pright 0.925]

		include : union
			HBar.t SB ezhRight top
			spiro-outline
				corner ezhLeft yMidBar
				corner (ezhLeft + Stroke * cor) (yMidBar - HalfStroke)
				corner (ezhLeft + Stroke * cor) yMidBar
				corner ezhRight (top - Stroke)
				corner (ezhRight - Stroke * cor) (top - Stroke)
			dispiro
				widths.rhs
				flat ezhLeft yMidBar [heading Rightward]
				curl (Middle - CorrectionOMidS) yMidBar
				archv
				[fallback terminalShape StdTerminalShape] top bot yMidBar

		if SLAB : begin
			include : VSerif.dl SB top VJut

	glyph-block-export RevEzhShape
	define [RevEzhShape] : with-params [top bot pleft pright hookless [ada SmallArchDepthA] [adb SmallArchDepthB] [diagCoeff 1.2] [pyBar 0.6]] : glyph-proc
		local cor : diagCoeff * HVContrast
		local yMidBar : RevEzhShape.yMidBar top bot pyBar
		local ezhRight : mix SB RightSB [fallback pright 0.8]
		local ezhLeft : mix SB RightSB [fallback pleft 0.075]
		include : HBar.t ezhLeft RightSB top

		include : spiro-outline
			corner ezhRight yMidBar
			corner (ezhRight - Stroke * cor) (yMidBar - HalfStroke)
			corner (ezhRight - Stroke * cor) yMidBar
			corner ezhLeft (top - Stroke)
			corner (ezhLeft + Stroke * cor) (top - Stroke)

		include : dispiro
			widths.lhs
			flat ezhRight yMidBar [heading Leftward]
			curl (Middle + CorrectionOMidS) yMidBar
			archv
			if hookless
			: then : list
				g4.down.mid (SB + OX) [RevEzhShape.yLoopLeft top bot pyBar ada adb]
			: else : list
				g4   (SB + OX) [RevEzhShape.yLoopLeft top bot pyBar ada adb]
				hookend bot
				g4 RightSB (bot + Hook * ((top - bot) / CAP))
		if SLAB : begin
			include : VSerif.dr RightSB top VJut
	set RevEzhShape.yMidBar : lambda [top bot pyBar] : mix bot top pyBar
	set RevEzhShape.yLoopLeft : lambda [top bot pyBar ada adb]
		mix [RevEzhShape.yMidBar top bot pyBar] bot (ada / (ada + adb))

	create-glyph 'Ezh' 0x1B7 : glyph-proc
		include : MarkSet.capital
		include : EzhShape CAP 0

	create-glyph 'smcpEzh' 0x1D23 : glyph-proc
		include : MarkSet.e
		include : EzhShape XH 0

	create-glyph 'ezh' 0x292 : glyph-proc
		include : MarkSet.p
		include : EzhShape XH Descender

	alias 'cyrl/Ezh' 0x4E0 'Ezh'
	alias 'cyrl/ezh' 0x4E1 'ezh'

	create-glyph 'revEzh' 0x1B8 : glyph-proc
		include : MarkSet.capital
		include : RevEzhShape CAP 0

	create-glyph 'revezh' 0x1B9 : glyph-proc
		include : MarkSet.p
		include : RevEzhShape XH Descender

	create-glyph 'lyogh.serifless' : glyph-proc
		include : MarkSet.if
		include : EzhShape XH Descender 0.4
		include : VBar.l SB (XH * 0.1) Ascender

	create-glyph 'lyogh.hooky' : glyph-proc
		include [refer-glyph 'lyogh.serifless'] AS_BASE ALSO_METRICS
		include : HSerif.lt SB Ascender SideJut

	select-variant 'lyogh' 0x26E

	create-glyph 'lyoghRTail.serifless' : glyph-proc
		include : MarkSet.b
		include : EzhShape XH 0 0.4
		include : VBar.l SB 0 Ascender
		include : RetroflexHook.lExt SB 0

	create-glyph 'lyoghRTail.hooky' : glyph-proc
		include [refer-glyph 'lyoghRTail.serifless'] AS_BASE ALSO_METRICS
		include : HSerif.lt SB Ascender SideJut

	select-variant 'lyoghRTail' 0x1DF05 (follow -- 'lyogh')

	create-glyph 'ezhTail' 0x1BA : glyph-proc
		include : MarkSet.p
		local b : mix Descender XH 0.25
		include : EzhShape XH b (terminalShape -- [HooklessTerminalShape 0.5])
		local y : mix [mix b XH 0.6] b 0.5
		include : dispiro
			widths.rhs
			g4.down.mid (RightSB - OX) y [heading Downward]
			arcvh
			flat [mix SB RightSB 0.45] b
			curl [mix SB RightSB 0.4] b
			archv
			g4 (SB + Stroke * HVContrast) [mix (Descender + Stroke) b 0.5]
			arcvh
			flat [mix SB RightSB 0.4] (Descender + Stroke)
			curl RightSB (Descender + Stroke)

	create-glyph 'ezhCurlyTail' 0x293 : glyph-proc
		include : MarkSet.p
		local p : SmallArchDepthB / (SmallArchDepthA + SmallArchDepthB)
		include : EzhShape XH Descender (terminalShape -- [HooklessTerminalShape p])
		local fine : AdviceStroke2 3 5 (XH - Descender)
		local rinner : (XH * 0.4 - fine * 1.5) / 2
		local m1 : RightSB - Stroke * HVContrast - OX
		local x2 : RightSB - HalfStroke
		local y2 Descender
		include : dispiro
			widths.lhs
			g4.down.mid m1 [mix [mix Descender XH 0.6] Descender p] [heading Downward]
			CurlyTail fine rinner m1 Descender SB x2 y2

	define [RetroflexConnectionTerminal top bot yMidBar] : begin
		local hookDepth : Hook * (top - bot) / [fallback para.cap0 CAP]
		local pArc : SmallArchDepthB / (SmallArchDepthA + SmallArchDepthB)
		list
			g4   (RightSB - OX) [mix yMidBar bot pArc]
			SerifedArcEnd.RtlRhs SB Middle bot Stroke hookDepth
	create-glyph 'ezhRetroflexHook' 0x1D9A : glyph-proc
		include : MarkSet.p
		include : EzhShape XH 0 (terminalShape -- RetroflexConnectionTerminal)
		include : RetroflexHook.l SB 0 (yAttach -- Hook)
