$$include '../../../meta/macros.ptl'

extern isFinite

import [mix linreg clamp fallback] from"../../../support/utils.mjs"

glyph-module

glyph-block Letter-Greek-Lower-Epsilon : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : ExtendBelowBaseAnchors
	glyph-block-import Letter-Shared : CreateAccentedComposition
	glyph-block-import Letter-Shared-Shapes : SerifedArcStart SerifedArcEnd SerifFrame
	glyph-block-import Letter-Shared-Shapes : InwardSlabArcStart InwardSlabArcEnd
	glyph-block-import Letter-Shared-Shapes : ArcStartSerif ArcEndSerif
	glyph-block-import Letter-Shared-Shapes : DToothlessRise RetroflexHook CyrDescender UpwardHookShape

	define SLAB-NONE       0
	define SLAB-CLASSICAL  1
	define SLAB-INWARD     2

	define StdBlend 0.65

	define [SmallEpsilon slabTop slabBot top bot blend hook] : namespace
		export : define [Dim] : begin
			local stroke : AdviceStroke2 2 3 (top - bot)
			local midx : mix SB RightSB blend
			local midy : mix bot top OverlayPos
			local topHeight : top - bot
			local midyHeight : midy - bot
			local ada : topHeight - [mix (midyHeight + stroke / 2) (topHeight - O - stroke) (ArchDepthB / (ArchDepthA + ArchDepthB))] - TanSlope * HVContrast * stroke
			local adb : [mix (stroke + O) (midyHeight - stroke / 2) (ArchDepthB / (ArchDepthA + ArchDepthB))] + TanSlope * HVContrast * stroke
			local fine : stroke * CThin
			return : object stroke midx midy ada adb fine

		export : define [UpperShape] : begin
			define [object stroke midx midy ada adb fine] : Dim
			return : dispiro
				match slabTop
					[Just SLAB-CLASSICAL] : SerifedArcStart.RtlLhs RightSB Middle top stroke hook
					[Just SLAB-INWARD] : InwardSlabArcStart.RtlLhs RightSB Middle top stroke hook
					__ : list [g4 (RightSB + O) (top - hook) [widths.lhs]] [hookstart (top - O)]
				g4 SB [YSmoothMidL top (midy - stroke / 2)]
				arcvh
				flat Middle (midy - (fine - stroke / 2)) [widths.heading fine 0 Rightward]
				curl midx (midy - (fine - stroke / 2)) [heading Rightward]

		export : define [LowerShape] : begin
			define [object stroke midx midy ada adb fine] : Dim
			return : dispiro
				flat midx (midy + (fine - stroke / 2)) [widths.heading fine 0 Leftward]
				curl Middle (midy + (fine - stroke / 2)) [heading Leftward]
				archv
				g4 (SB + OX * 2) [YSmoothMidL (midy + stroke / 2) bot] [widths.lhs]
				match slabBot
					[Just SLAB-CLASSICAL] : SerifedArcEnd.LtrLhs RightSB Middle bot stroke hook
					[Just SLAB-INWARD] : InwardSlabArcEnd.LtrLhs RightSB Middle bot stroke hook
					__ : list [hookend (bot + O)] [g4 (RightSB - O) (bot + hook)]

		export : define [Shape] : union [UpperShape] [LowerShape]

		export : define [AutoStartSerifR] : begin
			define [object stroke] : Dim
			return : match slabTop
				[Just SLAB-CLASSICAL] : ArcStartSerif.R       RightSB top stroke Hook
				[Just SLAB-INWARD]    : ArcStartSerif.InwardR RightSB top stroke Hook
				__ : glyph-proc

		export : define [AutoEndSerifR] : begin
			define [object stroke] : Dim
			return : match slabBot
				[Just SLAB-CLASSICAL] : ArcEndSerif.R         RightSB bot stroke Hook
				[Just SLAB-INWARD]    : ArcEndSerif.InwardR   RightSB bot stroke Hook
				__ : glyph-proc

	glyph-block-export CyrZe
	define [CyrZe slabTop slabBot top bot left right blend hook _stroke] : namespace
		export : define [Dim] : begin
			local stroke : fallback _stroke : AdviceStroke2 2 3 (top - bot)
			local midx : mix right left blend
			local midy : mix bot top OverlayPos
			local topHeight : top - bot
			local midyHeight : midy - bot
			local adb : topHeight - [mix (midyHeight + stroke / 2) (topHeight - O - stroke) (ArchDepthA / (ArchDepthA + ArchDepthB))] + TanSlope * HVContrast * stroke
			local ada : [mix (stroke + O) (midyHeight - stroke / 2) (ArchDepthA / (ArchDepthA + ArchDepthB))] - TanSlope * HVContrast * stroke
			local fine : stroke * CThin
			return : object stroke midx midy ada adb fine

		define [CyrZeUpperShapeT sink] : begin
			define [object stroke midx midy ada adb fine] : Dim
			local middle : (left + right) / 2
			return : sink
				match slabTop
					[Just SLAB-CLASSICAL] : SerifedArcStart.LtrRhs left middle top stroke hook
					[Just SLAB-INWARD] : InwardSlabArcStart.LtrRhs left middle top stroke hook
					__ : list [g4 (left - O) (top - hook) : widths.rhs stroke] [hookstart (top - O)]
				g4 right [YSmoothMidR top (midy - stroke / 2)]
				arcvh
				flat middle (midy - (fine - stroke / 2)) [widths.heading 0 fine Leftward]
				curl midx (midy - (fine - stroke / 2)) [heading Leftward]

		define [CyrZeLowerShapeT sink] : begin
			define [object stroke midx midy ada adb fine] : Dim
			local middle : (left + right) / 2
			return : sink
				flat midx (midy + (fine - stroke / 2)) [widths.rhs.heading fine Rightward]
				curl middle (midy + (fine - stroke / 2)) [heading Rightward]
				archv
				g4 (right - OX * 2) [YSmoothMidR (midy + stroke / 2) bot] [widths.rhs stroke]
				match slabBot
					[Just SLAB-CLASSICAL] : SerifedArcEnd.RtlRhs left middle bot stroke hook
					[Just SLAB-INWARD] : InwardSlabArcEnd.RtlRhs left middle bot stroke hook
					__ : list [hookend (bot + O) (sw -- stroke)] [g4 (left + O) (bot + hook)]

		export : define [UpperShape] : CyrZeUpperShapeT dispiro

		export : define [LowerShape] : CyrZeLowerShapeT dispiro

		define [CyrZeLowerShapeHalf] : begin
			define [object stroke midx midy ada adb fine] : Dim
			local middle : (left + right) / 2
			return : dispiro
				flat midx (midy + (fine - stroke / 2)) [widths.rhs.heading fine Rightward]
				curl middle (midy + (fine - stroke / 2)) [heading Rightward]
				archv
				g4.down.end (right - OX * 2) [YSmoothMidR (midy + stroke / 2) bot] [widths.rhs.heading stroke Downward]

		define [CyrZeLowerShapeTailed] : begin
			define [object stroke midx midy ada adb fine] : Dim
			local middle : (left + right) / 2
			return : dispiro
				flat (TanSlope * Stroke + [Math.max (left + (Stroke - [mix Descender Stroke 0.5]) * 1.1 + 1) middle]) Descender [widths.rhs]
				curl (TanSlope * Stroke + left + (Stroke - [mix Descender Stroke 0.5]) * 1.1) Descender
				archv
				g4.up.mid (left + HalfStroke * HVContrast) [mix Descender Stroke 0.5] [widths.center.heading Stroke Upward]
				arcvh
				g4 (middle + CorrectionOMidS) 0 [widths.lhs]
				archv
				g4 (right - OX * 2) (bot + ada)
				arcvh
				flat middle (midy + (fine - stroke / 2)) [widths.heading fine 0 Leftward]
				curl midx (midy + (fine - stroke / 2)) [heading Leftward]

		export : define [Shape] : union
			CyrZeUpperShapeT dispiro
			CyrZeLowerShapeT dispiro

		export : define [ShapeMask] : union
			CyrZeUpperShapeT spiro-outline
			CyrZeLowerShapeT spiro-outline

		export : define [ShapeHalf] : union
			CyrZeUpperShapeT dispiro
			CyrZeLowerShapeHalf

		export : define [KsiBaseShape] : union
			CyrZeUpperShapeT dispiro
			CyrZeLowerShapeTailed

		export : define [AutoStartSerifL] : begin
			define [object stroke] : Dim
			return : match slabTop
				[Just SLAB-CLASSICAL] : ArcStartSerif.L       left top stroke Hook
				[Just SLAB-INWARD]    : ArcStartSerif.InwardL left top stroke Hook
				__ : glyph-proc

		export : define [AutoEndSerifL] : begin
			define [object stroke] : Dim
			return : match slabBot
				[Just SLAB-CLASSICAL] : ArcEndSerif.L         left bot stroke Hook
				[Just SLAB-INWARD]    : ArcEndSerif.InwardL   left bot stroke Hook
				__ : glyph-proc

	define EpsilonConfig : object
		serifless               { SLAB-NONE      SLAB-NONE      }
		unilateralSerifed       { SLAB-CLASSICAL SLAB-NONE      }
		bilateralSerifed        { SLAB-CLASSICAL SLAB-CLASSICAL }
		unilateralInwardSerifed { SLAB-INWARD    SLAB-NONE      }
		bilateralInwardSerifed  { SLAB-INWARD    SLAB-INWARD    }

		seriflessDesc               { SLAB-NONE      SLAB-CLASSICAL }
		unilateralInwardSerifedDesc { SLAB-INWARD    SLAB-CLASSICAL }

	foreach { suffix { slabTop slabBot } } [Object.entries EpsilonConfig] : do
		create-glyph "latn/Epsilon.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : let [eps : SmallEpsilon slabTop slabBot CAP 0 StdBlend Hook]
				union [eps.Shape] [eps.AutoStartSerifR] [eps.AutoEndSerifR]

		create-glyph "latn/epsilon.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : let [eps : SmallEpsilon slabTop slabBot XH 0 StdBlend SHook]
				union [eps.Shape] [eps.AutoStartSerifR] [eps.AutoEndSerifR]

		create-glyph "cyrl/Ze.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : let [ze : CyrZe slabTop slabBot CAP 0 SB RightSB StdBlend Hook]
				union [ze.Shape] [ze.AutoStartSerifL] [ze.AutoEndSerifL]

		create-glyph "cyrl/ze.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : let [ze : CyrZe slabTop slabBot XH 0 SB RightSB StdBlend SHook]
				union [ze.Shape] [ze.AutoStartSerifL] [ze.AutoEndSerifL]

		create-glyph "cyrl/ze.BGR.\(suffix)" : glyph-proc
			include : MarkSet.p
			include : let [ze : CyrZe slabTop slabBot XH Descender SB RightSB StdBlend SHook]
				union [ze.Shape] [ze.AutoStartSerifL] [ze.AutoEndSerifL]

		create-glyph "cyrl/DzjeKomi.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local ze : CyrZe slabTop slabBot CAP 0 SB RightSB StdBlend Hook
			define [object stroke midy] : ze.Dim
			include : ze.ShapeHalf
			include : ze.AutoStartSerifL slabTop CAP 0 SB RightSB StdBlend
			include : VBar.r (RightSB - OX * 2) 0 [YSmoothMidR (midy + stroke / 2) 0] stroke
			include : CyrDescender.rSideJut (RightSB - OX * 2) 0

		create-glyph "cyrl/dzjeKomi.\(suffix)" : glyph-proc
			include : MarkSet.e
			local ze : CyrZe slabTop slabBot XH 0 SB RightSB StdBlend SHook
			define [object stroke midy] : ze.Dim
			include : ze.ShapeHalf
			include : ze.AutoStartSerifL slabTop XH 0 SB RightSB StdBlend
			include : VBar.r (RightSB - OX * 2) 0 [YSmoothMidR (midy + stroke / 2) 0] stroke
			include : CyrDescender.rSideJut (RightSB - OX * 2) 0

		create-glyph "cyrl/ZjeKomi.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital

			local xm : df.middle + 0.5 * df.mvs * HVContrast
			local ze : CyrZe slabTop slabBot CAP 0 df.leftSB xm StdBlend Hook df.mvs
			define [object stroke midy] : ze.Dim
			include : ze.ShapeHalf
			include : UpwardHookShape
				left -- xm - OX * 2 - stroke * HVContrast
				right -- df.rightSB
				ybegin -- [YSmoothMidR (midy + stroke / 2) 0]
				yend -- (CAP / 2)
				ada -- (ArchDepthA * 0.6 * df.div)
				adb -- (ArchDepthB * 0.6 * df.div)
				sw -- stroke
			include : ze.AutoStartSerifL
			local sf2 : [SerifFrame.fromDf df (CAP / 2) 0].slice 1 2
			if SLAB : include sf2.rt.full

		create-glyph "cyrl/zjeKomi.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e

			local xm : df.middle + 0.5 * df.mvs * HVContrast
			local ze : CyrZe slabTop slabBot XH 0 df.leftSB xm StdBlend Hook df.mvs
			define [object stroke midy] : ze.Dim
			include : ze.ShapeHalf
			include : UpwardHookShape
				left -- xm - OX * 2 - stroke * HVContrast
				right -- df.rightSB
				ybegin -- [YSmoothMidR (midy + stroke / 2) 0]
				yend -- (XH / 2)
				ada -- (SmallArchDepthA * 0.6 * df.div)
				adb -- (SmallArchDepthB * 0.6 * df.div)
				sw -- stroke
			include : ze.AutoStartSerifL
			local sf2 : [SerifFrame.fromDf df (XH / 2) 0].slice 1 2
			if SLAB : include sf2.rt.full

		create-glyph "cyrl/KsiBase.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			include : let [ze : CyrZe slabTop SLAB-NONE CAP 0 SB RightSB StdBlend Hook]
				union [ze.KsiBaseShape] [ze.AutoStartSerifL]

		create-glyph "cyrl/ksiBase.\(suffix)" : glyph-proc
			include : MarkSet.p
			include : let [ze : CyrZe slabTop SLAB-NONE XH 0 SB RightSB StdBlend SHook]
				union [ze.KsiBaseShape] [ze.AutoStartSerifL]

	alias 'grek/epsilon' 0x3B5 'latn/epsilon.serifless'
	select-variant 'latn/Epsilon' 0x190
	select-variant 'latn/epsilon' 0x25B
	turned 'turnepsilon' 0x1D08 'latn/epsilon' Middle (XH / 2)
	alias 'cyrl/ZeRev' 0x510 'latn/Epsilon'
	alias 'cyrl/zeRev' 0x511 'latn/epsilon'

	select-variant 'cyrl/Ze' 0x417
	select-variant 'cyrl/ze' 0x437
	select-variant 'cyrl/KsiBase' (follow -- 'cyrl/Ksi')
	select-variant 'cyrl/ksiBase' (follow -- 'cyrl/ksi')
	select-variant 'cyrl/ze.BGR' (follow -- 'cyrl/ze')
	alias 'latn/EpsilonRev' 0xA7AB 'cyrl/Ze'
	alias 'latn/epsilonRev' 0x25C  'cyrl/ze'

	select-variant 'cyrl/ZjeKomi' 0x504 (follow -- 'cyrl/Ksi')
	select-variant 'cyrl/zjeKomi' 0x505 (follow -- 'cyrl/ksi')
	select-variant 'cyrl/DzjeKomi' 0x506 (follow -- 'cyrl/Ksi')
	select-variant 'cyrl/dzjeKomi' 0x507 (follow -- 'cyrl/ksi')

	derive-composites 'cyrl/ZeCedilla' 0x498 'cyrl/Ze' 'cedillaExtShapeBelowOArc'
	derive-composites 'cyrl/zeCedilla' 0x499 'cyrl/ze' 'cedillaExtShapeBelowSOArc'

	select-variant 'latn/epsilon/descBase' (shapeFrom -- 'latn/epsilon')
	select-variant 'latn/epsilonRev/descBase' (shapeFrom -- 'cyrl/ze') (follow -- 'latn/epsilon/descBase')

	derive-composites 'latn/epsilonRetroflexHook' 0x1D93 'latn/epsilon/descBase'
		RetroflexHook.r RightSB 0 (refSw -- [AdviceStroke2 2 3 XH])
	derive-composites 'latn/epsilonRevRetroflexHook' 0x1D94 'latn/epsilonRev/descBase'
		RetroflexHook.l SB      0 (refSw -- [AdviceStroke2 2 3 XH])
		ExtendBelowBaseAnchors Descender

	CreateAccentedComposition 'cyrl/Ksi' 0x46E 'cyrl/KsiBase' 'caronAbove'
	CreateAccentedComposition 'cyrl/ksi' 0x46F 'cyrl/ksiBase' 'caronAbove'

	create-glyph 'voicedLaryngealSpirant' 0x1D24 : glyph-proc
		include : MarkSet.b
		local blend 0.505
		local midGap : Math.max [AdviceStroke2 3 12 CAP] (CAP / 8 - [AdviceStroke2 3 6 XH])
		local strokeV : AdviceStroke 4
		local ze : CyrZe SLAB-NONE SLAB-NONE CAP midGap SB RightSB blend Hook
		local dimUpper : ze.Dim

		local epsilon : SmallEpsilon SLAB-NONE SLAB-NONE (CAP - midGap) 0 blend Hook
		local dimLower : epsilon.Dim
		include : union [epsilon.LowerShape] [ze.UpperShape]
			Rect (dimUpper.midy + dimUpper.stroke / 2) (dimLower.midy - dimLower.stroke / 2) (Middle - strokeV / 2 * HVContrast) (Middle + strokeV / 2 * HVContrast)
