$$include '../../../meta/macros.ptl'

import [mix clamp fallback SuffixCfg] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Lower-D : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared : CreateAccentedComposition
	glyph-block-import Letter-Shared-Shapes : OBarRight RightwardTailedBar DToothlessRise DMBlend
	glyph-block-import Letter-Shared-Shapes : CurlyTail LetterBarOverlay SerifFrame
	glyph-block-import Letter-Shared-Shapes : UpwardHookShape PalatalHook RetroflexHook TopHook

	define [ToothedBody df yTop] : union
		OBarRight.shape
			left -- df.leftSB
			right -- df.rightSB
			sw -- df.mvs
			ada -- [df.archDepthA SmallArchDepth df.mvs]
			adb -- [df.archDepthB SmallArchDepth df.mvs]
		tagged 'rightBar' : VBar.r df.rightSB 0 yTop

	define [ToothlessCornerBody df yTop] : union
		OBarRight.toothless
			left -- df.leftSB
			right -- df.rightSB
			sw -- df.mvs
			rise -- DToothlessRise
			mBlend -- DMBlend
			ada -- [df.archDepthA SmallArchDepth df.mvs]
			adb -- [df.archDepthB SmallArchDepth df.mvs]
		tagged 'rightBar' : VBar.r df.rightSB DToothlessRise yTop

	define [ToothlessCornerHBBBody df yTop] : union
		OBarRight.toothless
			left -- df.leftSB
			right -- df.rightSB
			sw -- df.mvs
			rise -- DToothlessRise
			mBlend -- DMBlend
			ada -- [df.archDepthA SmallArchDepth df.mvs]
			adb -- [df.archDepthB SmallArchDepth df.mvs]
		tagged 'rightBar' : VBar.r df.rightSB 0 yTop

	define [ToothlessRoundedBody df yTop] : OBarRight.rounded
		left -- df.leftSB
		right -- df.rightSB
		sw -- df.mvs
		yTerminal -- yTop
		ada -- [df.archDepthA SmallArchDepth df.mvs]
		adb -- [df.archDepthB SmallArchDepth df.mvs]

	define [ToothlessRoundedHBBBody df yTop] : union
		ToothlessRoundedBody df yTop
		tagged 'rightBar' : VBar.r df.rightSB 0 yTop

	define [TailedBody df yTop] : union
		OBarRight.shape
			left -- df.leftSB
			right -- df.rightSB
			sw -- df.mvs
			ada -- [df.archDepthA SmallArchDepth df.mvs]
			adb -- [df.archDepthB SmallArchDepth df.mvs]
		RightwardTailedBar df.rightSB 0 yTop

	define [TopSerif df yTop] : tagged 'serifRT'
		HSerif.lt (df.rightSB - Stroke * HVContrast) yTop SideJut

	define [BaseSerif df yTop] : tagged 'serifRB'
		HSerif.rb df.rightSB 0 SideJut

	define DConfig : SuffixCfg.weave
		object # body
			toothed                   ToothedBody
			toothlessCorner           ToothlessCornerBody
			toothlessCornerHBB        ToothlessCornerHBBBody
			toothlessRounded          ToothlessRoundedBody
			toothlessRoundedHBB       ToothlessRoundedHBBBody
			tailed                    TailedBody

		function [body] : object # serifs
			serifless                { null     null      }
			topSerifed               { TopSerif null      }
			bottomSerifed            { null     BaseSerif }
			serifed                  { TopSerif BaseSerif }

	foreach { suffix { Body {topSerif bottomSerif} } } [Object.entries DConfig] : do
		local yOverlay : mix XH (Ascender - [if topSerif Stroke 0]) 0.5

		create-glyph "d.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include : df.markSet.b
			include : Body df Ascender
			if topSerif    : include : topSerif df Ascender
			if bottomSerif : include : bottomSerif df Ascender
			set-base-anchor 'overlayOnExtension' (df.rightSB - 0.5 * Stroke * HVContrast) yOverlay

		create-glyph "dcroat.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include [refer-glyph "d.\(suffix)"] AS_BASE ALSO_METRICS
			include : LetterBarOverlay.r.in df.rightSB XH (Ascender - [if topSerif Stroke 0])

		create-glyph "latn/de.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include [refer-glyph "d.\(suffix)"] AS_BASE ALSO_METRICS
			local xLeft : mix df.rightSB df.leftSB 0.9
			include : HBar.t xLeft (df.rightSB + O) CAP
			if topSerif : include : VSerif.dl xLeft CAP : Math.min VJut (0.8 * (Ascender - XH))

		create-glyph "dHookTop.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include : df.markSet.b
			include : Body df (Ascender - Hook - HalfStroke)
			include : TopHook.rBarInner df.rightSB 0 Ascender

		create-glyph "cyrl/djeKomi.\(suffix)" : glyph-proc
			local df : DivFrame 1 3
			include : df.markSet.b

			local dfHalf : df.slice 3 2
			include : Body dfHalf Ascender
			eject-contour 'rightBar'

			include : WithTransform [ApparentTranslate (df.width - dfHalf.width) 0] : UpwardHookShape
				left -- dfHalf.leftSB
				right -- dfHalf.rightSB
				ybegin -- Ascender
				yend -- (XH / 2)
				ada -- [dfHalf.archDepthA SmallArchDepth df.mvs]
				adb -- [dfHalf.archDepthB SmallArchDepth df.mvs]
				sw -- df.mvs

			if topSerif    : include : topSerif dfHalf Ascender
			if bottomSerif : begin
				local sf2 : [SerifFrame.fromDf df (XH / 2) 0].slice 1 2
				include sf2.rt.full

	select-variant 'd' 'd'
	select-variant 'dcroat' 0x111 (follow -- 'd')
	select-variant 'latn/de' 0x18C (follow -- 'd')
	alias 'cyrl/deKomi' 0x501 'd'
	link-reduced-variant 'd/sansSerif' 'd' MathSansSerif
	link-reduced-variant 'd/phoneticLeft' 'd'
	link-reduced-variant 'd/hookBottomBase' 'd'
	CreateAccentedComposition 'dTildeOver' 0x1D6D 'd' 'tildeOverOnExension'

	select-variant 'dHookTop' 0x257
	link-reduced-variant 'dHookTop/hookBottomBase' 'dHookTop'

	select-variant 'cyrl/djeKomi' 0x503

	derive-composites 'dPalatalHook' 0x1D81 'd/hookBottomBase' : PalatalHook.r
		xLink -- RightSB
		x -- (RightSB + SideJut)
		y -- 0

	derive-composites 'dHookBottom' 0x256 'd/hookBottomBase'
		RetroflexHook.rExt RightSB 0
	derive-composites 'dHookTopBottom' 0x1D91 'dHookTop/hookBottomBase'
		RetroflexHook.rExt RightSB 0

	derive-multi-part-glyphs 'dDot' 0x1E0B {'d' 'dotAbove'} : lambda [srcs gr] : glyph-proc
		local { base mark } srcs
		include : refer-glyph mark
		include : Translate (Width - HalfStroke) 0
		include [refer-glyph base] AS_BASE

	derive-composites 'dBar' 0xA7C8 'd'
		HBar.m (SB - OX) (RightSB + OX) (XH * 0.5) OverlayStroke

	derive-composites 'currency/dongSign' 0x20AB 'dcroat' 'sbRsbUnderlineBelow'


	define DCurlyTailConfig : object
		toothedSerifless  { false }
		toothedTopSerifed { true  }

	foreach { suffix { fSerif } } [Object.entries DCurlyTailConfig] : do
		create-glyph "dCurlyTail.\(suffix)" : glyph-proc
			local fine : AdviceStroke 4
			local rinner : clamp (Width * 0.065) (XH * 0.05) (fine * 0.35)
			local wide Stroke
			local m1 : Math.min RightSB (Width - rinner * 2 - fine - OX)
			local x2 : mix SB m1 0.5
			local y2 : 0 - fine - rinner *  1.25
			include : MarkSet.b
			include : OBarRight.shape (left -- SB) (right -- m1)
			include : dispiro
				widths.rhs
				flat m1 Ascender [heading Downward]
				curl m1 (rinner * 2 + fine)
				CurlyTail fine rinner m1 0 (m1 + rinner * 2 + fine) x2 y2
			if fSerif : include : HSerif.lt (m1 - Stroke * HVContrast) Ascender SideJut

	select-variant 'dCurlyTail' 0x221


	glyph-block-import Letter-Blackboard : BBS BBD BBBarRight
	create-glyph 'mathbb/d' 0x1D555 : glyph-proc
		include : MarkSet.b
		include : BBBarRight RightSB 0 Ascender
		include : intersection
			OShapeOutline.NoOvershoot XH 0 SB (RightSB - BBD - BBS * HVContrast)
			VBar.l (SB + BBD + OX) 0 XH BBS
		include : OBarRight.shape
			right -- RightSB - BBD
			sw -- BBS
