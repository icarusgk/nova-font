$$include '../../../meta/macros.ptl'

import [mix fallback SuffixCfg] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Upper-R : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Latin-Upper-P : PShape RevPShape PBarPosY PRotundaShape BBPShape PShapeOutline
	glyph-block-import Letter-Blackboard : BBS BBD
	glyph-block-import Letter-Shared-Shapes : RightwardTailedBar RetroflexHook

	define LEG-SHAPE-CURLY    0
	define LEG-SHAPE-STRAIGHT 1
	define LEG-SHAPE-STANDING 2

	define [RLegTerminalX legShape right sw] : right - [if legShape (OX * 2) 0]
	define [RSlabExtraShift slab sw] : if slab (-Jut / 2 + 0.5 * sw * HVContrast) 0
	define [RLegDiagCor top bottom left right extraShift sw] : DiagCor (top - bottom) (right - left - extraShift) 0 sw

	define [RStandingLegFine sw] : sw * CThinB
	define [RStandingLegBend left right top bottom sw] : Math.min ((right - left) * 0.99) : Math.max (sw * 1.5) ((right - left) * 0.875)
	define [RStandingBottomOverflow slab] : if slab 0 (2 * OX)

	define [RLegShape-Straight] : with-params [top bottom left right charTop slab sw extraShift] : glyph-proc
		local shift : RSlabExtraShift slab sw
		local xLeftTop : Math.max (PShape.BarPos + sw * HVContrast) (left - 0.5 * sw * HVContrast + shift)
		local xRightBottom : [RLegTerminalX LEG-SHAPE-STRAIGHT right sw] + shift
		local xRightBottomSerifStart : xRightBottom - 0.25 * sw * HVContrast
		include : intersection
			Rect top bottom (-Width) [if slab xRightBottomSerifStart (2 * Width)]
			dispiro
				corner xLeftTop     top    [widths.lhs sw]
				corner xRightBottom bottom [widths.rhs sw]

		if slab : begin
			include : HSerif.rb xRightBottomSerifStart bottom (SideJut + Jut / 8)

	define [RLegShape-Curly] : with-params [top bottom left right charTop slab sw extraShift] : glyph-proc
		local xRightBottom : RLegTerminalX LEG-SHAPE-CURLY right sw
		include : intersection
			Rect top bottom (-Width) (2 * Width)
			dispiro
				widths.center sw
				g4.up.start (xRightBottom - 0.5 * sw * HVContrast) bottom [heading Upward]
				quadControls 0 0.4 8
				g4 left top
		if slab : begin
			include : HSerif.rb right bottom (SideJut + Jut / 8)

	define [RLegShape-Standing] : with-params [top bottom left right charTop slab sw extraShift] : glyph-proc
		local fine : RStandingLegFine sw
		local bend : RStandingLegBend left right top bottom sw
		local ytopRef : begin top
		local yTopStroke : top - sw / 2 + fine
		local yOffset : mix bottom top 0.2
		local xOverflow : RStandingBottomOverflow slab
		include : dispiro
			widths.rhs fine
			flat left yTopStroke [heading Rightward]
			curl (right - bend) yTopStroke [heading Rightward]
			archv
			flat (right + O) [Math.max (yOffset + 1) (ytopRef - bend * charTop / CAP)] [widths.rhs.heading sw Downward]
			curl (right + O) yOffset [heading Downward]
			curl (right + O - xOverflow) bottom  [heading Downward]
		if slab : include : HSerif.rb right bottom SideJut

	define RLegShapes { RLegShape-Curly RLegShape-Straight RLegShape-Standing }

	define [RevRLegTerminalX legShape left sw] : left + [if legShape (OX * 2) 0]

	define [RevRLegShape-Straight] : with-params [top bottom left right charTop slab sw extraShift] : glyph-proc
		local shift : RSlabExtraShift slab sw
		local xLeftBottom : [RevRLegTerminalX LEG-SHAPE-STRAIGHT left sw] - shift
		local xLeftBottomSerifStart : xLeftBottom + 0.25 * sw * HVContrast
		local xRightTop : Math.min (RightSB - PShape.BarPos - sw * HVContrast) (right + 0.5 * sw * HVContrast - shift)

		include : intersection
			Rect top bottom [if slab xLeftBottomSerifStart (-Width)] (2 * Width)
			dispiro
				corner xRightTop   top    [widths.rhs sw]
				corner xLeftBottom bottom [widths.lhs sw]
		if slab : begin
			include : HSerif.lb xLeftBottomSerifStart bottom (SideJut + Jut / 8)

	define [RevRLegShape-Curly] : with-params [top bottom left right charTop slab sw extraShift] : glyph-proc
		local xLeftBottom : RevRLegTerminalX LEG-SHAPE-CURLY left sw
		include : intersection
			Rect top 0 (-Width) (2 * Width)
			dispiro
				widths.center sw
				g4.up.start (xLeftBottom + 0.5 * sw * HVContrast) bottom [heading Upward]
				quadControls 0 0.4 8
				g4 right top
		if slab : begin
			include : HSerif.lb left bottom (SideJut + Jut / 8)

	define [RevRLegShape-Standing] : with-params [top bottom left right charTop slab sw extraShift] : glyph-proc
		local fine : RStandingLegFine sw
		local bend : RStandingLegBend left right top bottom sw
		local ytopRef : begin top
		local yTopStroke : top - sw / 2 + fine
		local yOffset : mix bottom top 0.2
		local xOverflow : RStandingBottomOverflow slab
		include : dispiro
			widths.lhs fine
			flat right yTopStroke [heading Leftward]
			curl (left + bend) yTopStroke [heading Leftward]
			archv
			flat (left - O) [Math.max (yOffset + 1) (ytopRef - bend * charTop / CAP)] [widths.lhs.heading sw Downward]
			curl (left - O) yOffset [heading Downward]
			curl (left - O + xOverflow) bottom  [heading Downward]
		if slab : include : HSerif.lb left bottom SideJut

	define RevRLegShapes { RevRLegShape-Curly RevRLegShape-Straight RevRLegShape-Standing }


	define [RBarPos charTop slab] : begin PShape.BarPos
	define [RLegTop charTop sw bp] : (sw / 2) + [PBarPosY charTop sw bp]

	define [RShape] : with-params [legShape top bp [mul 1] [slab null] [open false]] : glyph-proc
		local right : RightSB - O - [if slab (Jut / 8) 0]
		include : difference
			PShape top (mul -- mul) (overshoot -- O) (slab -- slab) (bp -- bp)
			if open [PShape.OpenGap (mul -- mul) (bp -- bp) (top -- top) (bot -- [if fSlabBot Stroke 0])] [glyph-proc]
		include : difference
			RLegShapes.(legShape) [RLegTop top Stroke bp] 0 Middle right top (slab === PShape.SlabSymmetric) Stroke 0
			if open [PShape.OpenGap (mul -- mul) (bp -- bp) (top -- top) (bot -- 0) ] [glyph-proc]

	define [RRotundaShape] : with-params [legShape top [mul 1] [pmRotunda 0] [endX Middle] [hook Hook] [pBar 1] [slab null]] : glyph-proc
		local bp : pBar * [RBarPos top false]
		local legTop : RLegTop top Stroke bp
		local right (RightSB - O - [if slab (Jut / 8) 0])
		local cor : RLegDiagCor legTop 0 endX right 0 Stroke
		local endX1 : endX - [if legShape (HalfStroke * cor * HVContrast) HalfStroke] + [if legShape [RSlabExtraShift SLAB Stroke] 0]
		include : PRotundaShape top (mul -- mul) (bp -- bp) (overshoot -- O) (slab -- false) (endX -- endX1) (hook -- hook)
		include : difference
			RLegShapes.(legShape) legTop 0 endX right top (slab === PShape.SlabSymmetric) Stroke 0
			MaskLeft endX1

	define [RevRShape] : with-params [legShape top bp [slab null] [mul 1] [tailedShape false] [open false]] : glyph-proc
		local left : SB + O + [if slab (Jut / 8) 0]
		include : difference
			RevPShape top (mul -- mul) (overshoot -- O) (slab -- slab) (bp -- bp)
			if open [RevPShape.OpenGap (mul -- mul) (bp -- bp) (top -- top) (bot -- [if fSlabBot Stroke 0]) ] [glyph-proc]
		include : difference
			RevRLegShapes.(legShape) [RLegTop top Stroke bp] 0 left Middle top (!(!slab)) Stroke 0
			if open [RevPShape.OpenGap (mul -- mul) (bp -- bp) (top -- top) (bot -- 0) ] [glyph-proc]
		if tailedShape : begin
			eject-contour 'strokeR'
			eject-contour 'serifRB'
			include : tagged 'strokeR' : RightwardTailedBar (Width - SB * mul) 0 top

	define [ROverlayAnchor] : glyph-proc
		set-base-anchor 'overlay'
			SB + Stroke * HVContrast
			PBarPosY CAP Stroke : RBarPos CAP SLAB

	define RConfig : SuffixCfg.weave
		object # Leg shape
			straight                 LEG-SHAPE-STRAIGHT
			curly                    LEG-SHAPE-CURLY
			standing                 LEG-SHAPE-STANDING
		object # openness
			""                       false
			open                     true
		object # tail
			""                       false
			tailed                   true
		object # serifs
			serifless                { null                           null                                                                }
			motionSerifed            { PShape.SlabMotion              RevPShape.SlabMotion                                                }
			serifed                  { PShape.SlabSymmetric           RevPShape.SlabSymmetric                                             }
			smallCyrl                { PShape.SlabMotion              [if para.isItalic RevPShape.SlabCyrlItalic RevPShape.SlabSymmetric] }

	foreach { suffix { legShape fOpen fTailed {slabs revSlabs} } } [Object.entries RConfig] : begin
		local fMotion : slabs === PShape.SlabMotion
		local fSlabBot : slabs && slabs !== PShape.SlabMotion
		local bpCap : RBarPos CAP fSlabBot
		local bpXH  : RBarPos XH  fSlabBot

		create-glyph "R.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : ROverlayAnchor
			include : RShape legShape CAP (slab -- slabs) (bp -- bpCap) (open -- fOpen)

		create-glyph "smcpR.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : ROverlayAnchor
			include : RShape legShape XH (slab -- slabs) (bp -- bpXH) (open -- fOpen)

		if (!fMotion && !fOpen) : create-glyph "RRotunda.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : RRotundaShape legShape CAP (hook -- Hook) (pBar -- 0.9) (slab -- slabs)

		if (!fMotion && !fOpen) : create-glyph "rRotunda.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : RRotundaShape legShape XH (hook -- AHook) (pBar -- 0.9) (slab -- slabs)

		create-glyph "cyrl/Ya.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : ROverlayAnchor
			include : RevRShape legShape CAP (slab -- revSlabs) (bp -- bpCap) (open -- fOpen)

		create-glyph "cyrl/ya.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : ROverlayAnchor
			include : RevRShape legShape XH (slab -- revSlabs) (bp -- bpXH) (tailedShape -- fTailed) (open -- fOpen)

		create-glyph "Yr.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			local top : CAP * 0.85
			local bp 0.45
			local legTop : RLegTop top Stroke bp
			local right (RightSB - O - [if SLAB (Jut / 8) 0])

			include : VBar.l SB (top - 1) CAP
			include : difference
				PShape top (mul -- 1) (bp -- bp) (slab -- slabs)
				if fOpen [PShape.OpenGap (mul -- 1) (bp -- bp) (top -- top) (bot -- [if fSlabBot Stroke 0])] [glyph-proc]
			include : difference
				RLegShapes.(legShape) legTop Descender Middle right (top - Descender) (slabs === PShape.SlabSymmetric) Stroke 0
				if fOpen [PShape.OpenGap (mul -- 1) (bp -- bp) (top -- top) (bot -- 0)] [glyph-proc]

		create-glyph "currency/indianRupeeSign.\(suffix)" : glyph-proc
			define bp : RBarPos CAP 0
			include : intersection
				Rect CAP 0 SB Width
				WithTransform [Translate (-Width / 8) 0]
					PShape CAP (bp -- bp) (withBar -- false)
			local right : RightSB - O - [if legShape 0 (Width / 16)]
			include : RLegShapes.(legShape) [RLegTop CAP Stroke bp] 0 (Width * 0.375) right CAP (slabs === PShape.SlabSymmetric) Stroke 0

			define sw : AdviceStroke2 2 4 CAP
			include : HBar.t SB RightSB CAP sw
			include : HBar.m SB RightSB [mix CAP [PBarPosY CAP Stroke bp] 0.5] sw

	select-variant 'R' 'R'
	link-reduced-variant 'R/sansSerif' 'R' MathSansSerif
	select-variant 'smcpR' 0x280 (follow -- 'R')
	turned 'turnSmapR' 0x1D1A 'smcpR' Middle (XH / 2)

	select-variant 'RRotunda' 0xA75A
	select-variant 'rRotunda' 0xA75B (follow -- 'RRotunda')

	select-variant 'cyrl/Ya' 0x42F
	select-variant 'cyrl/ya' 0x44F
	select-variant 'revSmcpR' 0x1D19 (shapeFrom -- 'cyrl/ya') (follow -- 'R')
	turned 'invSmcpR' 0x281 'revSmcpR' Middle (XH / 2)

	select-variant 'Yr' 0x1A6 (follow -- 'R')

	select-variant 'currency/indianRupeeSign' 0x20B9 (follow -- 'RRotunda')

	derive-glyphs 'RBar' 0x24C 'R' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HBar.m [mix 0 SB 0.3] (SB - O) ((CAP - Stroke) * [RBarPos CAP SLAB] + Stroke * 0.25)

	derive-glyphs 'RRTail' 0x2C64 'R' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		eject-contour 'serifLB'
		include : RetroflexHook.lExt SB 0

	create-glyph 'mathbb/R' 0x211D : glyph-proc
		define [SingleLeg] : RLegShape-Straight ((CAP - BBS) * HBarPos) 0 Middle (RightSB - O) CAP false BBS (BBD / 2)
		define terminalX : RLegTerminalX LEG-SHAPE-STRAIGHT (RightSB - O) BBS
		include : MarkSet.capital
		include : BBPShape (mul -- 1) (overshoot -- O)
		include : difference
			union
				SingleLeg
				WithTransform [ApparentTranslate (-BBD) 0] [SingleLeg]
				HBar.b (terminalX - BBD - BBS * HVContrast) (terminalX - BBS * HVContrast) 0 BBS
			PShapeOutline CAP (sw -- BBS) (mul -- 1) (overshoot -- O) (offset -- 1)
			MaskLeft (SB + BBD)
