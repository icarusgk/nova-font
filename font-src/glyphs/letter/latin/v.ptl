$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-V : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-export VShape VShapeOutline
	glyph-block-import Letter-Shared-Shapes : DiagonalTailInnerRadius SerifFrame PalatalHook
	glyph-block-import Letter-Blackboard : BBS BBD

	define VCornerHalfWidth : HalfStroke * HVContrast * 1.15
	define VCurviness   0.3
	define VShapeFine : Math.max
		Stroke * [if SLAB para.vtipfineSlab para.vtipfine]
		VCornerHalfWidth * 1.2
	define VShapeFineStraight : Stroke * CThin * 1.15
	define pInktrap : 2 / 3
	define VShapeMiddleWidth : Math.min [mix Stroke VShapeFineStraight pInktrap] [AdviceStroke 3]

	define StraightSbShrink : mix 1 (DesignParameters.straightVShapeSbShrink * [StrokeWidthBlend 1 0.75]) : if SLAB 0.75 1
	define [VShapeTopFlat top] : if SLAB [Math.min (top - Stroke) (top * 0.9)] (top * 0.9)

	define [VShapeOutline] : with-params [df fBarStraight top [sw Stroke]] : glyph-proc
		define cornerHW : VCornerHalfWidth * sw / Stroke
		define dgCor : DiagCor top (Width / 2) 0 (sw * 2)
		define clearance : 0 - OX

		local sbScale : if fBarStraight StraightSbShrink 1
		define vxStartL : df.leftSB * sbScale + clearance
		define vxEndL : df.middle - cornerHW + clearance
		define vxStartR : df.width - df.leftSB * sbScale - clearance
		define vxEndR : df.middle + cornerHW - clearance

		if fBarStraight : do
			include : spiro-outline
				flat [mix vxStartL vxEndL 0] [mix top 0 0]
				curl [mix vxStartL vxEndL pInktrap] [mix top 0 pInktrap]
				corner [mix vxStartL vxEndL 1] [mix top 0 1]
				corner [mix vxStartR vxEndR 1] [mix top 0 1]
				flat [mix vxStartR vxEndR pInktrap] [mix top 0 pInktrap]
				curl [mix vxStartR vxEndR 0] [mix top 0 0]
		: else : do
			include : spiro-outline
				flat vxStartL top
				curl vxStartL [VShapeTopFlat top]
				quadControls 0 VCurviness 9 unimportant
				corner vxEndL 0
				corner vxEndR 0
				quadControls 1 (1 - VCurviness) 9 unimportant
				flat vxStartR [VShapeTopFlat top]
				curl vxStartR top

	define [VBottomCapShape df fBarStraight sw] : begin
		define cornerHW : VCornerHalfWidth * sw / Stroke
		return : spiro-outline
			corner (df.middle + cornerHW) 0
			corner (df.middle - cornerHW) 0
			corner df.middle [Math.min sw : if fBarStraight VShapeFineStraight VShapeFine]

	define [VShape] : with-params [df fBarStraight top [sw Stroke]] : glyph-proc
		define cornerHW : VCornerHalfWidth * (sw / Stroke)
		define fine : Math.min sw : [if fBarStraight VShapeFineStraight VShapeFine] * (sw / Stroke)
		define dgCor : DiagCor (2 * top) Width 0 (2 * sw)

		local sbScale : if fBarStraight StraightSbShrink 1
		define vxStartL : df.leftSB * sbScale
		define vxEndL : df.middle - cornerHW
		define vxStartR : df.width - df.leftSB * sbScale
		define vxEndR : df.middle + cornerHW

		if fBarStraight : do
			define midSW : dgCor * VShapeMiddleWidth / Stroke * sw
			include : tagged 'strokeDown' : dispiro
				widths.lhs (sw * dgCor)
				flat [mix vxStartL vxEndL 0] [mix top 0 0] [heading Downward]
				curl [mix vxStartL vxEndL pInktrap] [mix top 0 pInktrap] [widths.lhs.heading midSW Downward]
				g4   [mix vxStartL vxEndL 1] [mix top 0 1] [widths.lhs.heading fine Downward]
			include : tagged 'strokeUp' : dispiro
				widths.rhs (sw * dgCor)
				flat [mix vxStartR vxEndR 0] [mix top 0 0] [heading Downward]
				curl [mix vxStartR vxEndR pInktrap] [mix top 0 pInktrap] [widths.rhs.heading midSW Downward]
				g4   [mix vxStartR vxEndR 1] [mix top 0 1] [widths.rhs.heading fine Downward]
		: else : do
			include : tagged 'strokeDown' : dispiro
				widths.lhs sw
				flat vxStartL top [heading Downward]
				curl vxStartL [VShapeTopFlat top] [heading Downward]
				quadControls 0 VCurviness 9 unimportant
				g4 vxEndL 0 [widths.lhs fine]
			include : tagged 'strokeUp' : dispiro
				widths.rhs sw
				flat vxStartR top [heading Downward]
				curl vxStartR [VShapeTopFlat top] [heading Downward]
				quadControls 0 VCurviness 9 unimportant
				g4 vxEndR 0 [widths.rhs fine]

			#bottom cap
			include : VBottomCapShape df fBarStraight sw

	define [VCursiveShapeBarPos k] : mix SB RightSB k
	define [VCursiveShape] : with-params [k top [sw Stroke]] : glyph-proc
		define xBar : VCursiveShapeBarPos k
		define xArcRight : RightSB - OX
		define yArcRight : [mix 0 top 0.6] - sw * 0.2
		define xArcEnd : [mix SB RightSB 0.8] + sw * 0.375
		define yArcEnd : top - O
		define rInY : DiagonalTailInnerRadius
		define xArcMidBottom : xBar + sw * HVContrast + rInY * HVContrast + CorrectionOMidX * sw

		include : dispiro
			widths.lhs sw
			flat xBar top [heading Downward]
			curl xBar ((sw + rInY) * (1 + TanSlope))
			arcvh
			g2.right.mid xArcMidBottom O
			archv.superness 2
			g4 xArcRight yArcRight
			g4 xArcEnd yArcEnd

		set-base-anchor 'palatalHookAttach'
			mix xArcMidBottom xArcRight 0.5
			mix O yArcRight : archv.yFromX 0.5 2

	define [VHookRightShape] : with-params [df fBarStraight top [sw Stroke] [hookWidthOuter (TailX / 3)] [hookWidthInner (TailX / 3)]] : glyph-proc
		include : VShape df fBarStraight top (sw -- sw)
		eject-contour 'strokeUp'
		include : VBottomCapShape df fBarStraight sw
		include : dispiro
			widths.rhs sw
			straight.left.start (RightSB + hookWidthOuter) (top - sw - O)
			g4 (RightSB - hookWidthInner) (top - 0.5 * sw - TailY)
			quadControls 0.4 0.75 64 unimportant
			g4 (Middle + VCornerHalfWidth * sw / Stroke) 0 [widths.rhs (VShapeFine * sw / Stroke)]

	define [VSerifs df fBarStraight top] : begin
		local sbScale  : if fBarStraight StraightSbShrink 1
		local sbOffset : if fBarStraight (OX * [StrokeWidthBlend 1 2]) 0
		local sf : SerifFrame top 0 (df.leftSB * sbScale - sbOffset) (df.width - df.leftSB * sbScale + sbOffset)
		return : composite-proc sf.lt.full sf.rt.full

	define [VAutoSerifs df fBarStraight top] : if SLAB [VSerifs df fBarStraight top] [no-shape]

	define [VMotionSerifs df fBarStraight top] : begin
		local sbScale  : if fBarStraight StraightSbShrink 1
		local sbOffset : if fBarStraight (OX * [StrokeWidthBlend 1 2]) 0
		local sf : SerifFrame top 0 (df.leftSB * sbScale - sbOffset) (df.width - df.leftSB * sbScale + sbOffset)
		return : composite-proc sf.lt.outer

	define VStandardConfig : object
		straight              { VAutoSerifs   true  }
		curly                 { VAutoSerifs   false }
		straightSerifless     { no-shape      true  }
		curlySerifless        { no-shape      false }
		straightMotionSerifed { VMotionSerifs true  }
		curlyMotionSerifed    { VMotionSerifs false }
		straightSerifed       { VSerifs       true  }
		curlySerifed          { VSerifs       false }

	foreach { suffix { Serifs fStraightBar }} [Object.entries VStandardConfig] : do
		create-glyph "V.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : VShape [DivFrame 1] fStraightBar CAP Stroke
			include : Serifs [DivFrame 1] fStraightBar CAP

		create-glyph "v.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : VShape [DivFrame 1] fStraightBar XH Stroke
			include : Serifs [DivFrame 1] fStraightBar XH

		create-glyph "VHookRight.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : VHookRightShape [DivFrame 1] fStraightBar CAP
			include : Serifs [DivFrame 1] fStraightBar CAP
			eject-contour 'serifRT'

		create-glyph "vHookRight.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : VHookRightShape [DivFrame 1] fStraightBar XH
			include : Serifs [DivFrame 1] fStraightBar XH
			eject-contour 'serifRT'

		create-glyph "cyrl/Uk.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local vPartHeight : CAP * 0.45 + HalfStroke
			include : WithTransform [ApparentTranslate 0 (CAP - vPartHeight)] : glyph-proc
				include : VHookRightShape [DivFrame 1] fStraightBar vPartHeight
				include : Serifs [DivFrame 1] fStraightBar vPartHeight
				eject-contour 'serifRT'

			local oHeight : CAP - vPartHeight + Stroke + O
			include : OShape oHeight 0 SB RightSB [AdviceStroke 2.75]
			include : VBar.m Middle (0.5 * oHeight) oHeight [AdviceStroke 4]

		create-glyph "cyrl/ukUnblended.\(suffix)" : glyph-proc
			include : MarkSet.b
			local vPartHeight : Ascender * 0.45 + HalfStroke
			include : WithTransform [ApparentTranslate 0 (Ascender - vPartHeight)] : glyph-proc
				include : VHookRightShape [DivFrame 1] fStraightBar vPartHeight
				include : Serifs [DivFrame 1] fStraightBar vPartHeight
				eject-contour 'serifRT'
			include : OShape (Ascender - vPartHeight + Stroke + O) 0 SB RightSB

		create-glyph "cyrl/Yn.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			local vPartHeight : CAP * 0.875
			local sw : AdviceStroke 3

			include : WithTransform [FlipAround Middle (CAP / 2)] : glyph-proc
				include : VHookRightShape [DivFrame 1] fStraightBar vPartHeight (sw -- sw) (hookWidthInner -- (TailX / 3 - 0.25 * HVContrast * sw))
				include : Serifs [DivFrame 1] fStraightBar vPartHeight
				eject-contour 'serifRT'

			include : dispiro
				g4.down.start Middle CAP [widths.center.heading [AdviceStroke 6] Downward]
				flat Middle 0 [widths.center.heading sw Downward]
				curl Middle Descender [widths.center.heading sw Downward]
			if SLAB : include : HSerif.mb Middle Descender MidJutCenter

		create-glyph "cyrl/yn.\(suffix)" : glyph-proc
			include : MarkSet.p
			local vPartHeight : XH * 1
			local sw : AdviceStroke 3

			include : WithTransform [FlipAround Middle (XH / 2)] : glyph-proc
				include : VHookRightShape [DivFrame 1] fStraightBar vPartHeight (sw -- sw) (hookWidthInner -- (TailX / 3 - 0.25 * HVContrast * sw))
				include : Serifs [DivFrame 1] fStraightBar vPartHeight
				eject-contour 'serifRT'

			include : dispiro
				g4.down.start Middle XH [widths.center.heading [AdviceStroke 6] Downward]
				flat Middle 0 [widths.center.heading sw Downward]
				curl Middle Descender [widths.center.heading sw Downward]
			if SLAB : include : HSerif.mb Middle Descender MidJutCenter

		create-glyph "vPalatalHook.\(suffix)" : glyph-proc
			include [refer-glyph "v.\(suffix)"] AS_BASE ALSO_METRICS
			include : PalatalHook.r
				xLink -- Middle
				x -- (Middle + HVContrast * HalfStroke + [PalatalHook.adviceGap Stroke])
				y -- 0

	define CursiveConfig : object
		cursiveSerifless     { 0      false }
		cursiveSerifed       { (1/16) true  }

	foreach { suffix { pxBar fDoSerif } } [Object.entries CursiveConfig] : do
		create-glyph "v.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : VCursiveShape pxBar XH Stroke
			if fDoSerif : begin
				local xBar : VCursiveShapeBarPos pxBar
				include : tagged 'serifLT' : HSerif.lt xBar XH (SideJut + xBar - SB)

		create-glyph "vPalatalHook.\(suffix)" : glyph-proc
			include [refer-glyph "v.\(suffix)"] AS_BASE ALSO_METRICS
			local attach : currentGlyph.gizmo.unapply currentGlyph.baseAnchors.palatalHookAttach
			include : PalatalHook.r
				x -- attach.x
				y -- 0
				yAttach -- attach.y

	select-variant 'V' 'V'
	link-reduced-variant 'V/sansSerif' 'V' MathSansSerif
	select-variant 'smcpV' 0x1D20 (shapeFrom -- 'v') (follow -- 'V')

	select-variant 'v' 'v'
	select-variant 'v/nonCursive' (shapeFrom -- 'v')
	link-reduced-variant 'v/sansSerif' 'v' MathSansSerif

	select-variant "vPalatalHook" 0x1D8C (follow -- 'v')

	select-variant 'vHookRight' 0x2C71 (follow -- 'v/nonCursive')
	select-variant 'cyrl/ukUnblended' 0x1C88 (follow -- 'v/nonCursive')
	select-variant 'cyrl/yn' 0xA65F (follow -- 'v/nonCursive')

	select-variant 'cyrl/Izhitsa' 0x474 (follow -- 'VHookRight') (shapeFrom -- 'VHookRight')
	select-variant 'cyrl/Uk' 0xA64A (follow -- 'VHookRight')
	select-variant 'cyrl/Yn' 0xA65E (follow -- 'VHookRight')
	alias 'cyrl/izhitsa' 0x475 'vHookRight'


	turned 'turnv.straight' nothing 'v.straight' Middle (XH / 2)
	turned 'turnv.curly' nothing 'v.curly' Middle (XH / 2)
	select-variant 'turnv' 0x28C (follow -- 'grek/Lambda')

	glyph-block-export BBVShape BBVInnerMaskShape BBVOuterMaskShape
	define [BBVShape l r kd ks top] : glyph-proc
		local m : mix l r 0.5
		local bbd : BBD * kd
		local bbs : BBS * ks
		local kDiag : DiagCorDs top ((r - l) / 2) (bbd / 2)
		include : intersection
			Rect top 0 (-Width) (2 * Width)
			union
				ExtLineCenter 1 bbs  l                 top (m - kDiag * bbd / 2) 0
				ExtLineCenter 1 bbs  (l + kDiag * bbd) top (m + kDiag * bbd / 2) 0
				ExtLineCenter 1 bbs  r                 top (m + kDiag * bbd / 2) 0
		include : HBar.t    l                     (l + kDiag * bbd)     top bbs
		include : HBar.b (m - kDiag * bbd / 2) (m + kDiag * bbd / 2) 0   bbs

	define [BBVInnerMaskShape l r kd ks top] : glyph-proc
		local m : mix l r 0.5
		local bbd : BBD * kd
		local kDiag : DiagCorDs top ((r - l) / 2) (bbd / 2)
		include : spiro-outline
			corner (l + kDiag * bbd) top
			corner r                 top
			corner (m + kDiag * bbd / 2) 0

	define [BBVOuterMaskShape l r kd ks top] : glyph-proc
		local m : mix l r 0.5
		local bbd : BBD * kd
		local kDiag : DiagCorDs top ((r - l) / 2) (bbd / 2)
		include : spiro-outline
			corner l top
			corner r top
			corner (m + kDiag * bbd / 2) 0
			corner (m - kDiag * bbd / 2) 0

	create-glyph 'mathbb/V' 0x1D54D : composite-proc [MarkSet.capital] [BBVShape SB RightSB 1 1 CAP]
	create-glyph 'mathbb/v' 0x1D567 : composite-proc [MarkSet.e]       [BBVShape SB RightSB 1 1 XH]
