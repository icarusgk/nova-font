$$include '../../../meta/macros.ptl'

import [mix clamp fallback SuffixCfg] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"
import [maskBit] from"../../../support/util/mask-bit.mjs"

glyph-module

glyph-block Letter-Latin-K : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Shared-Metrics : markExtend
	glyph-block-import Mark-Above : aboveMarkMid
	glyph-block-import Mark-Adjustment : ExtendBelowBaseAnchors

	glyph-block-import Letter-Shared-Shapes : DiagonalTailInnerRadius DiagonalTailF CyrDescender
	glyph-block-import Letter-Shared-Shapes : LetterBarOverlay PalatalHook TopHook

	local [KBalance slabLT straightBar]        : if straightBar (Width / 32) 0
	local [KBalanceRight slabLegs straightBar] : if slabLegs 0 : if straightBar (Width / 32) 0
	local [KO slabLegs straightBar top stroke] : if straightBar (([if slabLegs (0) (-4)] * OX - stroke / 3) * (XH / top)) 0

	define [KAttachment shape mode top left right stroke straightBar] : begin
		if [not shape] : return [no-shape]
		local Ok             : KO mode true top stroke
		local kshRight       : right + [KBalanceRight true straightBar]
		local serifLengthAdj : Ok + stroke * HVContrast
		return : shape.rSideJut
			x -- kshRight - serifLengthAdj
			y -- 0
			jut -- Jut + serifLengthAdj

	define [KSlabs mode top left right stroke straightBar] : glyph-proc
		local Ok             : KO mode true top stroke
		local kshRight       : right + [KBalanceRight true straightBar]
		local serifLengthAdj : Ok + stroke * HVContrast

		include : tagged 'serifRT' : if [maskBit mode 1] [HSerif.rt (kshRight - serifLengthAdj) top (SideJut + serifLengthAdj)] [no-shape]
		include : tagged 'serifRB' : if [maskBit mode 0] [HSerif.rb (kshRight - serifLengthAdj) 0   (SideJut + serifLengthAdj)] [no-shape]

	define KLegs : namespace
		export : define [Straight fHookTop left right stroke top slabLT slabLegs attachment] : glyph-proc
			local fine : AdviceStroke 3.5
			local Ok : KO slabLegs true top stroke
			local kshLeft : left + [KBalance slabLT true]
			local kshRightBot : right + [KBalanceRight slabLegs true]
			local kshRightTop : if fHookTop (kshRightBot - HookX * 0.5 + 0.5 * stroke * HVContrast) kshRightBot

			local attach (top * 0.42 - stroke)
			local attach2 (top * 0.72 + stroke)

			set-base-anchor 'trailing' (kshRightBot - Ok) 0

			local kshRightSerifs : right + [KBalanceRight true true]
			local serifLengthAdj : Ok + stroke * HVContrast
			define [TopStrokeMask offset]    : Rect top 0 kshLeft [if [maskBit slabLegs 1] (kshRightSerifs + offset + SideJut - TanSlope * Stroke) (2 * Width)]
			define [BottomStrokeMask offset] : Rect top 0 kshLeft [if [maskBit slabLegs 0] (kshRightSerifs + offset + SideJut + TanSlope * Stroke) (2 * Width)]

			if fHookTop
			: then : begin
				define kHookTopMix 0.5
				if fHookTop : include : dispiro
					widths.rhs stroke
					straight.left.start (kshRightBot + [if [maskBit slabLegs 1] SideJut 0] - TanSlope * stroke) (top - stroke)
					flat [mix (kshRightTop - Ok) (kshLeft + stroke) kHookTopMix] [mix top attach kHookTopMix] [widths.rhs : mix stroke fine kHookTopMix]
					curl (kshLeft + stroke) attach [widths.rhs fine]
			: else : begin
				include : intersection
					TopStrokeMask 0
					dispiro
						widths.rhs stroke
						flat (kshRightTop - Ok) top
						curl (kshLeft + stroke) attach [widths 0 fine]


			include : intersection
				BottomStrokeMask (-0.1)
				spiro-outline
					corner (kshLeft + stroke) 0
					corner (kshLeft + stroke) (attach + 1)
					corner (kshRightTop - Ok - 0.1) top
					corner (kshRightBot - Ok) top
					corner (kshRightBot - Ok) 0
				dispiro
					flat (kshRightBot - Ok) 0 [widths.lhs stroke]
					curl (kshLeft + stroke) attach2 [widths.lhs fine]

			include : difference
				union
					KSlabs                 slabLegs top left right stroke true
					KAttachment attachment slabLegs top left right stroke true
				union
					HalfRectTriangle (kshRightBot - Ok - 0.1) 0 (kshLeft + stroke - 0.1) attach2
					intersection
						TopStrokeMask (-0.1)
						HalfRectTriangle (kshRightTop - Ok - 0.1) top (kshLeft + stroke - 0.1) attach

		export : define [Symmetric leadGap hookDepth] : function [fHookTop left right stroke top slabLT slabLegs attachment] : glyph-proc
			local fine : AdviceStroke [if leadGap 3.5 3]
			local Ok : KO slabLegs true top stroke

			local kshLeft : left + [KBalance slabLT true]
			local kshRight : right + [KBalanceRight slabLegs true]

			local xAttach : kshLeft + stroke * HVContrast + (leadGap || fine)
			local yAttach : top * [if leadGap 0.42 0.49] - stroke * [if leadGap 1 (-0.1)]
			local coYAttach : top - yAttach

			if [not hookDepth] : set-base-anchor 'trailing' (kshRight - Ok) 0

			define [StrokeMask bit t b offset] : Rect t b kshLeft [if [maskBit slabLegs bit] (kshRight + offset) (2 * Width)]

			if fHookTop
			: then : begin
				define kHookTopMix 0.5
				define kshRightHookTop : kshRight - HookX * 0.5 + 0.5 * stroke * HVContrast
				include : tagged 'strokeRT' : intersection
					Rect top (0.5 * top) kshLeft (2 * Width)
					dispiro
						widths.rhs stroke
						straight.left.start (kshRight + [if [maskBit slabLegs 1] SideJut 0] - TanSlope * stroke) (top - stroke)
						flat [mix (kshRightHookTop - Ok) xAttach kHookTopMix] [mix top yAttach kHookTopMix] [widths.rhs : mix stroke fine kHookTopMix]
						curl [mix (kshRightHookTop - Ok) xAttach 2] [mix top yAttach 2] [widths.rhs fine]
			: else : begin
				include : tagged 'strokeRT' : intersection
					StrokeMask 1 top (0.5 * top) 0
					dispiro
						widths.rhs stroke
						flat (kshRight - Ok) top
						curl [mix (kshRight - Ok) xAttach 2] [mix top yAttach 2] [widths.rhs fine]

			if hookDepth
			: then : begin
				include : ExtendBelowBaseAnchors hookDepth
				include : tagged 'strokeRB' : dispiro
					flat kshLeft (0.5 * top + stroke / 2) [widths.rhs.heading stroke Rightward]
					curl [mix kshLeft right 0.5] (0.5 * top + stroke / 2)
					archv
					flat right (0.5 * top + stroke / 2 - ArchDepthB)
					curl right (hookDepth + Hook + stroke / 2)
					arcvh
					straight.left.end (right - HookX - 0.5 * stroke * HVContrast) hookDepth
			: else : begin
				include : tagged 'strokeRB' : intersection
					StrokeMask 0 (0.5 * top) 0 0
					dispiro
						flat (kshRight - Ok) 0 [widths.lhs stroke]
						curl [mix (kshRight - Ok) xAttach 2] [mix 0 coYAttach 2] [widths.lhs fine]

				if leadGap : include : intersection
					HBar.m kshLeft (2 * Width) (0.5 * top) stroke
					union
						Rect top 0 kshLeft xAttach
						spiro-outline
							corner ([if fHookTop kshRightHookTop kshRight] - Ok - 1) top
							corner (xAttach - 1) yAttach
							corner (xAttach - 1) top
						spiro-outline
							corner (kshRight - Ok - 1) 0
							corner (xAttach - 1) coYAttach
							corner (xAttach - 1) 0

			include : difference
				union
					KSlabs                 slabLegs top left right stroke true
					KAttachment attachment slabLegs top left right stroke true
				union
					intersection
						StrokeMask 1 top (0.5 * top) (-0.1)
						HalfRectTriangle (kshRight - Ok - 0.1) top ([mix (kshRight - Ok) xAttach 2] - 0.1) [mix top yAttach 2]
					intersection
						StrokeMask 0 (0.5 * top) 0 (-0.1)
						HalfRectTriangle (kshRight - Ok - 0.1) 0   ([mix (kshRight - Ok) xAttach 2] - 0.1) [mix 0 coYAttach 2]

		export : define [Curly fHookTop left right stroke top slabLT slabLegs attachment] : glyph-proc
			local turn : top * 0.99
			local fine : AdviceStroke 3.5
			local kshLeft : left + [KBalance slabLT false]
			local kshRight : right + [KBalanceRight slabLegs false]

			set-base-anchor 'trailing' (kshRight - O) 0

			define [upperCurvature] : bezControls 0 0.3 0.5 0.65 8
			define [upperCurvatureHT] : bezControls 0.5 0 0.5 0.65 8 : object
				blend : function [t] : widths.rhs : mix stroke fine t
			define [lowerCurvature] : quadControls 0 0.3 8

			local xAttach1 : kshLeft + stroke * HVContrast
			local yAttach1 : top * [if slabLegs 0.325 0.375]
			local xAttach2 : kshLeft + stroke * HVContrast
			local yAttach2 : top * 0.75
			local kDiag : mix 1 [DiagCorDs (top - yAttach1) (kshRight - kshLeft) stroke] 0.5
			include : intersection
				Rect top 0 kshLeft (2 * Width)
				if fHookTop
					dispiro
						straight.left.start (kshRight + [if [maskBit slabLegs 1] SideJut 0] - TanSlope * stroke) (top - stroke) [widths.rhs stroke]
						upperCurvatureHT
						g4 xAttach1 yAttach1 [widths.rhs fine]
					dispiro
						g4.down.start (kshRight) top [widths.rhs.heading stroke Downward]
						upperCurvature
						g4 xAttach1 yAttach1 [widths.rhs fine]
			include : difference
				dispiro
					g4.up.start (kshRight - O) 0 [widths.lhs.heading stroke Upward]
					lowerCurvature
					g4 xAttach2 yAttach2 [widths.center fine]
				if fHookTop
					spiro-outline
						straight.left.start (kshRight + [if [maskBit slabLegs 1] SideJut 0] - TanSlope * stroke) (top - stroke + 0.1)
						upperCurvatureHT
						corner (xAttach1 - 0.1) yAttach1
						corner (-Width) yAttach1
						corner (-Width) (top * 2)
						corner (2 * Width) (top * 2)
						corner (2 * Width) (top - stroke + 0.1)
					spiro-outline
						corner.down.start (kshRight - 0.1) top
						upperCurvature
						corner (kshLeft + stroke) (yAttach1 + 0.1)
						corner kshLeft 0
						corner kshLeft top
			include : difference
				union
					KSlabs                 slabLegs top left right stroke false
					KAttachment attachment slabLegs top left right stroke false
				union
					HalfRectTriangle kshRight top xAttach1 yAttach1
					HalfRectTriangle (kshRight - O - stroke / 2 * HVContrast) 0 xAttach2 yAttach2

		define [CursiveDimen left right top stroke slabLT slabLegs] : begin
			define kshLeft  : left + [KBalance slabLegs true]
			define kshRight : right + [KBalanceRight slabLegs true]
			define Ok       : KO slabLegs true top stroke

			define arcFine : stroke * CThin
			define arcStroke : AdviceStroke2 2 3 top
			define arcTerminalFine : AdviceStroke2 3 4 top
			define expansion : Width / (UPM / 2) - 1

			define pArcStartY    : 0.46 + 0.1 * (arcStroke / Width)
			define pArcTopX      : 0.625 - 0.05 * (arcStroke / Width) - 0 * expansion * (arcStroke / UPM)
			define pArcRightX    : 0.925 - TanSlope * 0.25 + ([if SLAB 0 0.05] + 0.75 * TanSlope) * (arcStroke / Width)
			define pArcRightY    : 0.575 - 0.625 * (arcStroke / Width) - 0.5 * expansion * (arcStroke / UPM)
			define pArcTerminalX : 0.15 - 0.5 * (arcStroke / Width)
			define pArcBottomX   : 0.15 + 0.5 * (arcStroke / Width)
			define pArcBottomY   : 0.45 + 0.5 * (arcStroke / Width)

			define arcRightSlope : 0.05 + 0.2 * (arcStroke / Width) + 1 * expansion * (arcStroke / UPM)
			define arcTopSkew   : shoulderMidSkew arcFine arcStroke

			define arcStartX    : kshLeft + HVContrast * (stroke - arcFine)
			define arcStartY    : top * pArcStartY
			define arcTerminalX : mix arcStartX kshRight pArcTerminalX
			define arcBottomX   : mix arcStartX kshRight pArcBottomX
			define arcBottomY   : mix 0 top pArcBottomY
			define arcTerminalY : arcBottomY + arcStroke * 0.125 - O
			define arcRightX    : kshRight * pArcRightX + 0.2 * stroke * HVContrast
			define arcRightY    : mix arcBottomY top pArcRightY
			define arcTopX      : mix arcStartX arcRightX pArcTopX
			define arcTopY      : top - O

			return : object Ok arcStartX arcStartY arcFine arcRightX arcRightY arcRightSlope arcTopX arcTopY arcStroke arcTopSkew arcBottomX arcBottomY arcTerminalX arcTerminalY arcTerminalFine kshLeft kshRight

		define [CursiveLoopT sink offset left right stroke top slabLT slabLegs] : begin
			define dim : CursiveDimen left right top stroke slabLT slabLegs
			return : sink
				g4.up.start (dim.arcStartX + offset) dim.arcStartY [widths.rhs.heading dim.arcFine Upward]
				arcvh 8
				g4 dim.arcTopX (dim.arcTopY - offset)
					widths.rhs.heading dim.arcStroke {.y (+1) .x dim.arcTopSkew}
				archv 8 2.0
				g4.down.mid (dim.arcRightX - offset) (dim.arcRightY - 0.5 * dim.arcRightSlope * dim.arcStroke * HVContrast)
					heading {.y dim.arcRightSlope .x HVContrast}
				arcvh
				g4 dim.arcBottomX (dim.arcBottomY - dim.arcStroke + offset) [widths.rhs.heading dim.arcTerminalFine Leftward]
				g4 dim.arcStartX (dim.arcTerminalY - dim.arcStroke + offset) [widths.rhs.heading dim.arcStroke Leftward]

		export : define [Cursive fHookTop left right stroke top slabLT slabLegs attachment] : glyph-proc
			define dim : CursiveDimen left right top stroke slabLT slabLegs

			define [BottomStrokeMask] : Rect XH 0 0 [if slabLegs (dim.kshRight + SideJut + TanSlope * Stroke) (Width * 2)]

			include : CursiveLoopT dispiro 0 left right stroke top slabLT slabLegs
			include : difference
				intersection [BottomStrokeMask] : dispiro
					flat dim.arcTerminalX dim.arcTerminalY [widths.lhs]
					curl (dim.kshRight - dim.Ok) 0 [widths.rhs]
				CursiveLoopT spiro-outline (-O) left right stroke top slabLT slabLegs

			include : difference
				union
					KSlabs        [if slabLegs 1 0] top left right stroke true
					KAttachment attachment slabLegs top left right stroke true
				HalfRectTriangle (dim.kshRight - dim.Ok - 0.1) 0 (dim.arcTerminalX - 0.1) dim.arcTerminalY

		export : define [CursiveTailed fHookTop left right stroke top slabLT slabLegs attachment] : glyph-proc
			define dim : CursiveDimen left right top stroke slabLT slabLegs

			include : CursiveLoopT dispiro 0 left right stroke top slabLT slabLegs

			define swDiagTail : AdviceStroke 2 (1 - (dim.kshLeft - SB) / Width)
			define swDiagTailAdj : swDiagTail / [mix 1 HVContrast 0.375]
			define xDTGap : 0.10 * (RightSB - SB) - (0.125 + [clamp 0 0.375 (0.5 * (Width / UPM * 2 - 1))]) * swDiagTail
			define xDTStart : dim.arcTerminalX + swDiagTail * HVContrast + xDTGap
			define xDTEnd : dim.kshRight - 0.8 * Hook - 0.25 * swDiagTail * HVContrast + xDTGap * 0.625
			define tailAngle : Math.min 85 (50 + [Math.atan2 (0.75 * swDiagTail) Hook] / Math.PI * 180)
			define dtInnerRadius : [clamp 0.125 1 : mix 1 (Width / UPM * 2) 3] * [DiagonalTailInnerRadius]

			include : difference
				dispiro
					flat xDTStart dim.arcTerminalY [widths.center swDiagTailAdj]
					curl (xDTEnd + 0.125 * dtInnerRadius) (0.9 * swDiagTail + 0.5 * dtInnerRadius)
					DiagonalTailF 1 [DivFrame 1] xDTEnd 0 dtInnerRadius tailAngle (Hook + swDiagTail / 4) swDiagTail
				CursiveLoopT spiro-outline (-O) left right stroke top slabLT slabLegs

	define [KHookTopBar slabLegs straightBar] : TopHook.lBarInner
		x -- SB + [KBalance slabLegs straightBar]
		yBot -- 0
		yTop -- Ascender

	define CyrlVbGap : (RightSB - SB) * 0.375
	define [CyrlVbLength top] : top * 0.375 + Stroke
	define CyrlVbSw : AdviceStroke 3

	define UpperKConfig : SuffixCfg.weave
		object # body
			straight              KLegs.Straight
			curly                 KLegs.Curly
			symmetricTouching    [KLegs.Symmetric 0]
			symmetricConnected   [KLegs.Symmetric : AdviceStroke 6]
			symmetricConnectedKH [KLegs.Symmetric [AdviceStroke 6] Descender]
			symmetricConnectedVB [KLegs.Symmetric CyrlVbGap]
		object # serifs
			serifless                     { 0 0 0 0 }
			topLeftSerifed                { 2 0 0 0 }
			bottomRightSerifed            { 0 0 1 0 }
			bottomRightSerifed2           { 0 0 0 1 }
			topLeftAndBottomRightSerifed  { 2 0 1 0 }
			topLeftAndBottomRightSerifed2 { 2 0 0 1 }
			serifed                       { 1 1 3 0 }
			serifedKH                     { 1 1 2 0 }
			serifed2                      { 1 1 2 1 }

	define [UpperKLTSerif top sw slabLT straightBar] : match slabLT
		2 : HSerif.lt (SB + [KBalance slabLT straightBar]) top SideJut
		1 : HSerif.mt (SB + [KBalance slabLT straightBar] + 0.5 * sw * HVContrast) top Jut
		_ : glyph-proc

	define [UpperKLBSerif top sw slabLT straightBar] : match slabLT
		2 : HSerif.lb (SB + [KBalance slabLT straightBar]) 0 SideJut
		1 : HSerif.mb (SB + [KBalance slabLT straightBar] + 0.5 * sw * HVContrast) 0 Jut
		_ : glyph-proc

	define [CyrlKaVBar top slabLT straightBar] : VBar.m
		SB + [KBalance slabLT straightBar] + 0.5 * HVContrast * CyrlVbSw + 0.7 * CyrlVbGap
		top / 2 - [CyrlVbLength top] / 2
		top / 2 + [CyrlVbLength top] / 2
		Math.min [AdviceStroke 5] (CyrlVbGap * 0.5)

	# Attachment glyphs used for Greek Kai Symbol
	define [GrekKaiAttachmentshape fSerif] : begin
		define shapeDepth : 0.8 * Descender - 0.25 * Stroke
		return : PointingTo 0 0 shapeDepth shapeDepth : function [mag] : glyph-proc
			define kSw : mix 1 HVContrast ([Math.sqrt 2] / 2)
			include : dispiro
				widths.lhs (Stroke * kSw)
				flat 0   0
				curl mag 0
			if fSerif : include : dispiro
				widths.center (Stroke / kSw)
				flat 0 (Stroke * kSw + SideJut)
				curl 0 (0 - SideJut)

	create-glyph 'UpperKaiSymbolAttachment/sans' : glyph-proc
		set-width 0
		set-mark-anchor 'trailing' 0 0
		include : GrekKaiAttachmentshape false
	create-glyph 'UpperKaiSymbolAttachment/serifed' : glyph-proc
		set-width 0
		set-mark-anchor 'trailing' 0 0
		include : GrekKaiAttachmentshape true

	# Main building
	foreach { suffix { LegsImpl {slabLT slabLB slabLegs slabKS} } } [pairs-of UpperKConfig] : do
		local straightBar : LegsImpl !== KLegs.Curly

		define [KBaseShape sw top attachment] : glyph-proc
			include : VBar.l (SB + [KBalance slabLT straightBar]) 0 top sw
			include : LegsImpl false SB RightSB sw top slabLT slabLegs attachment
			if slabLT : include : UpperKLTSerif top sw slabLT straightBar
			if slabLB : include : UpperKLBSerif top sw slabLT straightBar

		create-glyph "K.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : KBaseShape Stroke CAP

		create-glyph "KDescender.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : KBaseShape Stroke CAP CyrDescender
			include : ExtendBelowBaseAnchors (-LongJut + 0.5 * Stroke)

		create-glyph "KBar.\(suffix)" : glyph-proc
			include [refer-glyph "K.\(suffix)"] AS_BASE ALSO_METRICS
			include : LetterBarOverlay.l.in
				x     -- (SB + [KBalance slabLT straightBar])
				bot   -- XH
				top   -- (CAP - [if slabLT Stroke 0])
				space -- { 0 [mix SB RightSB 0.75] }

		create-glyph "KVBar.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : KBaseShape CyrlVbSw CAP
			include : CyrlKaVBar CAP slabLT straightBar

		create-glyph "grek/kappa.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : VBar.l (SB + [KBalance slabLT straightBar]) 0 XH
			include : LegsImpl false SB RightSB Stroke XH slabLT false
			if slabLT : include : HSerif.lt (SB + [KBalance slabLT straightBar]) XH SideJut

		create-glyph "grek/KaiSymbol.\(suffix)" : glyph-proc
			include [refer-glyph "K.\(suffix)"] AS_BASE ALSO_METRICS
			include : MarkSet.capDesc
			include : refer-glyph : match slabKS
				0 'UpperKaiSymbolAttachment/sans'
				1 'UpperKaiSymbolAttachment/serifed'

		create-glyph "smcpK.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : KBaseShape Stroke XH

		create-glyph "smcpKDescender.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : KBaseShape Stroke XH CyrDescender
			include : ExtendBelowBaseAnchors (-LongJut + 0.5 * Stroke)

		create-glyph "smcpKVBar.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : KBaseShape CyrlVbSw XH
			include : CyrlKaVBar XH slabLT straightBar

		create-glyph "KHookTop.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : VBar.l (SB + [KBalance slabLT straightBar]) 0 CAP Stroke
			include : LegsImpl true SB RightSB Stroke CAP slabLT slabLegs
			eject-contour 'serifRT'
			if slabLT : include : UpperKLTSerif CAP Stroke slabLT straightBar
			if slabLB : include : UpperKLBSerif CAP Stroke slabLT straightBar

		define [BashkirKaShape df top] : glyph-proc
			local left : if slabLT ([mix SB RightSB 0.35] - df.mvs / 2 * HVContrast) [mix SB RightSB 0.2]
			local leftNB : left - [KBalance slabLT straightBar]
			local xTopBarLeftEnd : mix 0 SB [if slabLT 0.25 0.375]
			local sw : AdviceStroke 3

			include : HBar.t xTopBarLeftEnd (Stroke * 0.1 + left) top
			include : VBar.l left 0 top sw
			include : LegsImpl false leftNB RightSB sw top slabLT slabLegs
			if slabLT : include : VSerif.dl xTopBarLeftEnd top VJut
				Math.min (VJutStroke * df.mvs / Stroke) (0.625 * (left - xTopBarLeftEnd))
			if slabLB : begin
				include : HSerif.mb (left + 0.5 * sw * HVContrast) 0 Jut

		create-glyph "cyrl/BashkirUpperKa.\(suffix)" : glyph-proc
			define df : DivFrame 1
			set-width df.width
			include : df.markSet.capital
			include : BashkirKaShape df CAP

		create-glyph "cyrl/BashkirKa.\(suffix)" : glyph-proc
			define df : DivFrame 1
			set-width df.width
			include : df.markSet.e
			include : BashkirKaShape df XH

	define LowerKConfig : SuffixCfg.weave
		object # body
			straight 			 KLegs.Straight
			curly 				 KLegs.Curly
			cursive 			 KLegs.Cursive
			cursiveTailed 		 KLegs.CursiveTailed
			symmetricTouching 	[KLegs.Symmetric 0]
			symmetricConnected  [KLegs.Symmetric : AdviceStroke 6]
		object # serifs
			serifless                    { 0 0 0 }
			topLeftSerifed               { 1 0 0 }
			bottomRightSerifed           { 0 0 1 }
			topLeftAndBottomRightSerifed { 1 0 1 }
			serifed                      { 1 1 3 }

	foreach { suffix { LegsImpl {slabLT slabLB slabLegs} } } [pairs-of LowerKConfig] : do
		local straightBar : LegsImpl !== KLegs.Curly

		define [kBaseShape attachment] : glyph-proc
			include : VBar.l (SB + [KBalance slabLT straightBar]) 0 Ascender
			include : LegsImpl false SB RightSB Stroke XH slabLT slabLegs attachment
			if slabLT : include : HSerif.lt (SB + [KBalance slabLT straightBar]) Ascender SideJut
			if slabLB : include : tagged 'serifLB'
				HSerif.mb (SB + [KBalance slabLT straightBar] + HalfStroke * HVContrast) 0 Jut

		create-glyph "k.\(suffix)" : glyph-proc
			include : MarkSet.b
			include : kBaseShape

		create-glyph "k/circumflexBase.\(suffix)" : glyph-proc
			include [refer-glyph "k.\(suffix)"] AS_BASE ALSO_METRICS
			set-base-anchor 'above' (SB + [KBalance slabLT straightBar] + HVContrast * HalfStroke) Ascender

		create-glyph "kDescender.\(suffix)" : glyph-proc
			include : MarkSet.b
			include : kBaseShape CyrDescender
			include : ExtendBelowBaseAnchors (-LongJut + 0.5 * Stroke)

		create-glyph "kPalatalHook.\(suffix)" : glyph-proc
			include : MarkSet.b
			include : kBaseShape PalatalHook
			include : ExtendBelowBaseAnchors Descender

		create-glyph "kBar.\(suffix)" : glyph-proc
			include [refer-glyph "k.\(suffix)"] AS_BASE ALSO_METRICS
			include : LetterBarOverlay.l.in
				x     -- (SB + [KBalance slabLT straightBar])
				bot   -- XH
				top   -- (Ascender - [if slabLT Stroke 0])

		create-glyph "kHookTop.\(suffix)" : glyph-proc
			include : MarkSet.b
			include : LegsImpl false SB RightSB Stroke XH slabLT slabLegs
			include : KHookTopBar slabLT straightBar
			if slabLB : include : tagged 'serifLB'
				HSerif.mb (SB + [KBalance slabLT straightBar] + HalfStroke * HVContrast) 0 Jut

	select-variant 'K' 'K'
	link-reduced-variant 'K/sansSerif' 'K' MathSansSerif
	alias 'grek/Kappa' 0x39A 'K'
	alias-reduced-variant 'grek/Kappa/sansSerif' 'grek/Kappa' 'K/sansSerif' MathSansSerif
	select-variant 'KBar' 0xA740 (follow -- 'K')
	select-variant 'cyrl/KaStroke' 0x49E (shapeFrom -- 'KBar') (follow -- 'cyrl/Ka')
	alias 'letterLike/kelvinSign' 0x212A 'K'
	select-variant 'KDescender' 0x2C69
	select-variant 'cyrl/Ka' 0x41A 'K' (shapeFrom -- 'K') (follow -- 'cyrl/Ka')
	select-variant 'cyrl/KaDescender' 0x49A (shapeFrom -- 'KDescender')
	select-variant 'cyrl/KaVBar' 0x49C (shapeFrom -- 'KVBar') (follow -- 'cyrl/KaVBar')
	select-variant 'cyrl/KaHook' 0x4C3 (shapeFrom -- 'K') (follow -- 'cyrl/KaHook')

	select-variant 'k' 'k'
	select-variant 'k/circumflexBase' (follow -- 'k')
	link-reduced-variant 'k/sansSerif' 'k' MathSansSerif
	select-variant 'kDescender' 0x2C6A
	select-variant 'kPalatalHook' 0x1D84 (follow -- 'kDescender')
	select-variant 'kBar' 0xA741 (follow -- 'k')
	select-variant 'cyrl/kaStroke' 0x49F (shapeFrom -- 'kBar') (follow -- 'cyrl/ka')

	select-variant 'grek/kappa' 0x3BA

	select-variant 'smcpK' 0x1D0B (follow -- 'K')
	alias 'latinkappa' 0x138 'smcpK'
	select-variant 'cyrl/ka' 0x43A (shapeFrom -- 'smcpK')
	select-variant 'cyrl/kaDescender' 0x49B (shapeFrom -- 'smcpKDescender')
	select-variant 'cyrl/ka.BGR' (shapeFrom -- 'k') (follow -- 'cyrl/ka')
	select-variant 'cyrl/kaVBar' 0x49D (shapeFrom -- 'smcpKVBar') (follow -- 'cyrl/kaVBar')
	select-variant 'cyrl/kaHook' 0x4C4 (shapeFrom -- 'smcpK') (follow -- 'cyrl/kaHook')

	select-variant 'KHookTop' 0x198 (follow -- 'K')
	select-variant 'kHookTop' 0x199

	derive-glyphs 'kCaron' 0x1E9 'k/circumflexBase' : lambda [src gr] : glyph-proc
		local shift : Width + SB - Middle + HalfStroke * HVContrast
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include [refer-glyph "caronAbove"]

	turned 'turnK' 0xA7B0 'K' Middle (CAP / 2)
	turned 'turnk' 0x29E  'k' Middle (XH / 2) [MarkSet.p]
	turned 'turnSmcpK' 0x1DF10 'smcpK' Middle (XH / 2)

	select-variant 'cyrl/BashkirUpperKa' 0x4A0 (follow -- 'cyrl/Ka')
	select-variant 'cyrl/BashkirKa'      0x4A1 (follow -- 'cyrl/ka')

	select-variant 'grek/KaiSymbol' 0x3CF

	derive-composites 'currency/kipSign' 0x20AD 'K' 'longBarOver'

	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	define [BBKLegShape top left right] : begin
		local kDiag : DiagCorDs (top / 2) (right - left) BBD
		return : union
			HBar.b (right - kDiag * BBD) right 0 BBS
			intersection
				Rect top 0 left (2 * Width)
				ExtLineCenter 2 BBS right top left (top / 2)
			intersection
				spiro-outline
					corner right top
					corner left (top / 2)
					corner left 0
					corner (Width * 2) 0
					corner (Width * 2) top
				union
					ExtLineCenter 2 BBS right 0 (left + kDiag * BBD) (top / 2)
					ExtLineCenter 2 BBS (right - kDiag * BBD) 0 left (top / 2)

	create-glyph 'mathbb/K' 0x1D542 : glyph-proc
		include : MarkSet.capital
		include : BBBarLeft SB 0 CAP
		include : BBKLegShape CAP (SB + BBD + HVContrast * BBS) RightSB

	create-glyph 'mathbb/k' 0x1D55C : glyph-proc
		include : MarkSet.b
		include : BBBarLeft SB 0 Ascender
		include : BBKLegShape XH (SB + BBD + HVContrast * BBS) RightSB
