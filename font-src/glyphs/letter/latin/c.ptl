$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-C : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : ExtendAboveBaseAnchors ExtendBelowBaseAnchors
	glyph-block-import Mark-Shared-Metrics : markStroke
	glyph-block-import Letter-Shared : CreateAccentedComposition
	glyph-block-import Letter-Shared-Shapes : SerifFrame CurlyTail DToothlessRise
	glyph-block-import Letter-Shared-Shapes : SerifedArcStart SerifedArcEnd InwardSlabArcStart
	glyph-block-import Letter-Shared-Shapes : ArcStartSerif ArcEndSerif
	glyph-block-import Letter-Shared-Shapes : LetterBarOverlay PalatalHook RetroflexHook TopHook
	glyph-block-import Letter-Shared-Shapes : ArcStartSerifWidth ArcStartSerifDepth
	glyph-block-import Letter-Blackboard : BBS BBD

	define SLAB-NONE       0
	define SLAB-CLASSICAL  1
	define SLAB-INWARD     2
	define SLAB-FLAT       3

	glyph-block-export CShapeT
	define [CShapeT sink offset df st sb top bot ada adb hook sw origBar] : sink
		widths.lhs sw
		match st
			[Just SLAB-CLASSICAL] : SerifedArcStart.RtlLhs (df.rightSB - offset) df.middle top sw [fallback hook Hook] origBar
			[Just SLAB-INWARD] : list
				g4 (df.rightSB - offset) (top - DToothlessRise)
				g4 (df.middle - CorrectionOMidX * sw) (top - O - offset)
				archv
			[Just SLAB-FLAT] : list
				flat (df.rightSB - offset) (top - offset)
				curl (df.middle - CorrectionOMidX * sw) (top - offset)
				archv
			_ : list
				g4 (df.rightSB - offset) (top - [fallback hook Hook])
				hookstart (top - O - offset)

		flat (df.leftSB + OX + offset) (top - ada)
		curl (df.leftSB + OX + offset) (bot + adb)

		match sb
			[Just SLAB-CLASSICAL] : SerifedArcEnd.LtrLhs (df.rightSB - offset) df.middle bot sw [fallback hook Hook] origBar
			[Just SLAB-INWARD] : list
				arcvh
				g4 (df.middle + CorrectionOMidX * sw) (bot + O + offset)
				g4 (df.rightSB - offset) (bot + DToothlessRise)
			_ : list
				hookend (bot + O + offset)
				g4 (df.rightSB - offset) (bot + [fallback hook Hook])

	define [RevCShapeT sink offset df st sb top bot ada adb hook sw origBar] : sink
		widths.rhs sw
		match st
			[Just SLAB-CLASSICAL] : SerifedArcStart.LtrRhs (df.leftSB + offset) df.middle top sw [fallback hook Hook] origBar
			[Just SLAB-INWARD] : list
				g4 (df.leftSB + offset) (top - DToothlessRise)
				g4 (df.middle - CorrectionOMidX * sw) (top - O - offset)
				archv
			[Just SLAB-FLAT] : list
				flat (df.leftSB + offset) (top - offset)
				curl (df.middle - CorrectionOMidX * sw) (top - offset)
				archv
			_ : list
				g4 (df.leftSB + offset) (top - [fallback hook Hook])
				hookstart (top - O - offset)

		flat (df.rightSB - OX + offset) (top - ada)
		curl (df.rightSB - OX + offset) (bot + adb)

		match sb
			[Just SLAB-CLASSICAL] : SerifedArcEnd.RtlRhs (df.leftSB + offset) df.middle bot sw [fallback hook Hook]
			[Just SLAB-INWARD] : list
				arcvh
				g4 (df.middle + CorrectionOMidX * sw) (bot + O + offset)
				g4 (df.leftSB + offset) (bot + DToothlessRise)
			_ : list
				hookend (bot + O + offset)
				g4 (df.leftSB + offset) (bot + [fallback hook Hook])

	define [AutoStartSerifR df sty top hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcStartSerif.R df.rightSB top [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcStartSerif.InwardR df.rightSB top [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [AutoStartSerifL df sty top hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcStartSerif.L df.leftSB top [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcStartSerif.InwardL df.leftSB top [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [AutoStartSerifRB df sty bot hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcEndSerif.R df.rightSB bot [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcEndSerif.InwardR df.rightSB bot [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [AutoStartSerifLB df sty bot hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcEndSerif.L df.leftSB bot [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcEndSerif.InwardL df.leftSB bot [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [CCurlyTailShape slabType] : glyph-proc
		local sw : AdviceStroke2 2 3 XH
		local fine : AdviceStroke2 3 3 XH
		local rinner : ((XH * 0.45) - fine * 1.5) / 2
		local m1 : SB + O + sw * HVContrast
		local x2 : SB + sw * 0.3
		local y2 : -XH * 0.05

		include : dispiro
			match slabType
				[Just SLAB-CLASSICAL] : SerifedArcStart.RtlLhs RightSB Middle XH sw Hook
				[Just SLAB-INWARD] : InwardSlabArcStart.RtlLhs RightSB Middle XH sw Hook
				__ : list [g4 RightSB (XH - Hook) [widths.lhs sw]] [hookstart XH]
			flat (SB + OX) (XH - SmallArchDepthA)
			curl (SB + OX) SmallArchDepthB
			arcvh
			CurlyTail fine rinner m1 0 RightSB x2 y2

	glyph-block-export CLetterForm
	define [CLetterForm] : with-params [df sty styBot top bot [ada ArchDepthA] [adb ArchDepthB] [hook Hook] [sw Stroke] [ob nothing]] : namespace
		export : define [base] : CShapeT dispiro 0 df sty styBot top bot ada adb hook sw ob
		export : define [topSerif] : AutoStartSerifR df sty top hook sw
		export : define [botSerif] : AutoStartSerifRB df styBot bot hook sw

		export : define [revBase] : RevCShapeT dispiro 0 df sty styBot top bot ada adb hook sw ob
		export : define [revTopSerif] : AutoStartSerifL df sty top hook sw
		export : define [revBotSerif] : AutoStartSerifLB df styBot bot hook sw

		export : define [hookTop] : TopHook.arcStart df.rightSB top hook (refSw -- sw)

		# Used by Cyrillic Koppa
		export : define [baseTopOnly] : CShapeT dispiro 0 df sty SLAB-NONE top bot ada adb hook sw ob
		export : define [descBase] : CShapeT dispiro 0 df sty (styBot || SLAB-CLASSICAL) top bot ada adb hook sw ob

		export : define [full] : composite-proc [base] [topSerif] [botSerif]
		export : define [revFull] : composite-proc [revBase] [revTopSerif] [revBotSerif]

	glyph-block-export CConfig
	define CConfig : object
		serifless               { SLAB-NONE      SLAB-NONE      }
		bottomSerifed           { SLAB-NONE      SLAB-CLASSICAL }
		unilateralSerifed       { SLAB-CLASSICAL SLAB-NONE      }
		bilateralSerifed        { SLAB-CLASSICAL SLAB-CLASSICAL }
		unilateralInwardSerifed { SLAB-INWARD    SLAB-NONE      }
		bilateralInwardSerifed  { SLAB-INWARD    SLAB-INWARD    }
		hybridSerifed1          { SLAB-INWARD    SLAB-CLASSICAL }

	foreach { suffix { sty styBot } } [Object.entries CConfig] : do
		create-glyph "C.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local lf : CLetterForm [DivFrame 1] sty styBot CAP 0
			include : lf.full

		create-glyph "smcpC.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lf : CLetterForm [DivFrame 1] sty styBot XH 0
			include : lf.full

		create-glyph "revC.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local lf : CLetterForm [DivFrame 1] sty styBot CAP 0
			include : lf.revFull

		create-glyph "CHookTop.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local lf : CLetterForm [DivFrame 1] sty styBot CAP 0
			include : union [lf.base] [lf.hookTop] [lf.botSerif]
			include : ExtendAboveBaseAnchors (CAP + Ascender - XH)

		create-glyph "c.\(suffix)" : glyph-proc
			include : MarkSet.e
			set-base-anchor 'cvDecompose' 0 0
			local lf : CLetterForm [DivFrame 1] sty styBot XH 0
				ada -- SmallArchDepthA
				adb -- SmallArchDepthB
			include : lf.full

		create-glyph "revSmallC.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lf : CLetterForm [DivFrame 1] sty styBot XH 0
				ada -- SmallArchDepthA
				adb -- SmallArchDepthB
			include : lf.revFull

		create-glyph "revSmallCSideways.\(suffix)" : glyph-proc
			local df : DivFrame (XH / Width) 2 (XH * 0.1 / SB)
			include : df.markSet.e
			local top : Width - SB
			local p : mix 1 (Width / UPM) 0.5
			include : PointingTo Width XH Width 0 : function [] : glyph-proc
				local lf : CLetterForm df sty styBot top 0 (hook -- Hook * p)
				include : lf.revFull
				include : Translate 0 (SB / 2)

		create-glyph "cyrl/esWide.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e
			local desc : -LongJut + 0.5 * Stroke
			include : ExtendBelowBaseAnchors desc
			local lf : CLetterForm df sty styBot XH desc
				ada -- [df.archDepthA SmallArchDepth df.mvs]
				adb -- [df.archDepthB SmallArchDepth df.mvs]
			include : lf.full

		create-glyph "cHookTop.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lf : CLetterForm [DivFrame 1] sty styBot XH 0
				ada -- SmallArchDepthA
				adb -- SmallArchDepthB
			include : union [lf.base] [lf.hookTop] [lf.botSerif]
			include : ExtendAboveBaseAnchors Ascender

		create-glyph "cCurlyTail.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : CCurlyTailShape sty
			include : AutoStartSerifR [DivFrame 1] sty XH

		create-glyph "stretchedC.\(suffix)" : glyph-proc
			include : MarkSet.p
			local lf : CLetterForm [DivFrame 1] sty styBot XH Descender
			include : lf.full

		define [KoppaShapeT styTop styBot top base] : union
			VBar.r (Middle + Stroke * HVContrast) Descender (Stroke / 2)
			difference base
				Rect (top / 2) Descender (Middle + Stroke * HVContrast) (Width * 4)
				Rect (XH / 2) [mix Stroke Hook 0.5] Middle (Width * 4)
			if styBot [HSerif.mb (Middle + HalfStroke * HVContrast) Descender MidJutSide] [no-shape]

		create-glyph "cyrl/Koppa.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			local lf : CLetterForm [DivFrame 1] sty styBot CAP 0
			include : KoppaShapeT sty styBot CAP : union [lf.baseTopOnly] [lf.topSerif]

		create-glyph "cyrl/koppa.\(suffix)" : glyph-proc
			include : MarkSet.p
			local lf : CLetterForm [DivFrame 1] sty styBot XH 0
				ada -- SmallArchDepthA
				adb -- SmallArchDepthB
			include : KoppaShapeT sty styBot XH : union [lf.baseTopOnly] [lf.topSerif]

		create-glyph "C/descBase.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local lf : CLetterForm [DivFrame 1] sty styBot CAP 0
			include : union [lf.descBase] [lf.topSerif]
			include : VBar.r RightSB 0 [ArcStartSerifDepth Hook] [ArcStartSerifWidth Stroke]

		create-glyph "c/descBase.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lf : CLetterForm [DivFrame 1] sty styBot XH 0
				ada -- SmallArchDepthA
				adb -- SmallArchDepthB
			include : union [lf.descBase] [lf.topSerif]
			include : VBar.r RightSB 0 [ArcStartSerifDepth Hook] [ArcStartSerifWidth Stroke]

		create-glyph "romanSixLateForm.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			local lf : CLetterForm [DivFrame 1] sty styBot CAP 0
			include : union [lf.descBase] [lf.topSerif]
			include : VBar.r RightSB Descender [ArcStartSerifDepth Hook] [ArcStartSerifWidth Stroke]
			if styBot : let [sf : SerifFrame.fromDf [DivFrame 1] CAP Descender] : include sf.rb.full

		create-glyph "currency/somSign.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local height : mix XH CAP (2 / 3)
			local lf : CLetterForm [DivFrame 1] sty styBot height (height - XH)
			include : lf.full
			include : HBar.b SB RightSB 0 markStroke

	select-variant 'C' 'C'
	link-reduced-variant 'C/sansSerif' 'C' MathSansSerif
	select-variant 'revC' 0x2183 (follow -- 'C')
	alias 'cyrl/Es' 0x421 'C'
	alias 'grek/lunateSigma' 0x3F9 'C'

	select-variant 'CTopSerifOnly' (shapeFrom -- 'C')

	select-variant 'CHookTop' 0x187
	select-variant 'smcpC' 0x1D04 (follow -- 'C')

	select-variant 'c' 'c'
	link-reduced-variant 'c/sansSerif' 'c' MathSansSerif
	link-reduced-variant 'c/turnDescBase' 'c'
	select-variant 'revSmallC' 0x2184 (follow -- 'c')
	alias 'cyrl/es' 0x441 'c'
	alias 'grek/lunateSmallSigma' 0x3F2 'c.serifless'
	select-variant 'revSmallCSideways' 0x1D12 (follow -- 'c')
	select-variant 'cyrl/esWide' 0x1C83 (follow -- 'c')

	select-variant 'cTopSerifOnly' (shapeFrom -- 'c')

	select-variant 'cCurlyTail' 0x255
	select-variant 'cHookTop' 0x188
	select-variant 'stretchedC' 0x297 (follow -- 'C')

	select-variant 'cyrl/Koppa' 0x480 (follow -- 'C')
	select-variant 'cyrl/koppa' 0x481 (follow -- 'c')

	select-variant 'C/descBase'
	select-variant 'c/descBase'
	select-variant 'romanSixLateForm' 0x2185 (follow -- 'C/descBase')

	create-glyph 'mathbb/C' 0x2102 : glyph-proc
		include : MarkSet.capital
		include : CShapeT dispiro 0 [DivFrame 1] SLAB-NONE SLAB-NONE CAP 0 ArchDepthA ArchDepthB Hook BBS
		include : intersection
			CShapeT spiro-outline 0.1 [DivFrame 1] SLAB-NONE SLAB-NONE CAP 0 ArchDepthA ArchDepthB Hook BBS
			VBar.l (SB + BBD) 0 CAP BBS

	create-glyph 'mathbb/c' 0x1D554 : glyph-proc
		include : MarkSet.capital
		include : CShapeT dispiro 0 [DivFrame 1] SLAB-NONE SLAB-NONE XH 0 SmallArchDepthA SmallArchDepthB Hook BBS
		include : intersection
			CShapeT spiro-outline 0.1 [DivFrame 1] SLAB-NONE SLAB-NONE XH 0 SmallArchDepthA SmallArchDepthB Hook BBS
			VBar.l (SB + BBD + OX) 0 CAP BBS

	select-variant 'currency/somSign' 0x20C0 (follow -- 'c')

	create-glyph 'currency/euroSign/overlay' : union
		LetterBarOverlay.l SB (CAP * 0.4)
		LetterBarOverlay.l SB (CAP * 0.6)
	derive-composites 'currency/euroSign' 0x20AC 'C' 'currency/euroSign/overlay'

	create-glyph 'currency/centSignBar.open' : glyph-proc
		set-width 0
		set-mark-anchor 'cvDecompose' 0 0
		include : dispiro
			widths.center [AdviceStroke 3]
			flat Middle (XH - HalfStroke)
			curl Middle (XH - Descender / 2) [heading Upward]
		include : dispiro
			widths.center [AdviceStroke 3]
			flat Middle (Descender / 2) [heading Upward]
			curl Middle HalfStroke

	create-glyph 'currency/centSignBar.through' : glyph-proc
		include [refer-glyph 'currency/centSignBar.open'] AS_BASE ALSO_METRICS

		define fine : AdviceStroke [StrokeWidthBlend 3 5]
		include : VBar.m Middle (XH - HalfStroke) (0 + HalfStroke) fine

	create-glyph 'currency/centSignBar.barInterrupted' : glyph-proc
		include [refer-glyph 'currency/centSignBar.open'] AS_BASE ALSO_METRICS

		define cofine : AdviceStroke 4
		define fine : AdviceStroke [StrokeWidthBlend 3 5]
		define gap : Math.max (XH / 8) [AdviceStroke2 6 6 XH]
		include : dispiro
			flat Middle (XH - HalfStroke)  [widths.center.heading cofine Downward]
			curl Middle (XH / 2 + gap / 2) [widths.center.heading fine Downward]
		include : dispiro
			flat Middle (HalfStroke)       [widths.center.heading cofine Upward]
			curl Middle (XH / 2 - gap / 2) [widths.center.heading fine Upward]

	select-variant 'currency/centSignBar' (follow -- 'cent')

	create-glyph 'currency/centSign' 0xA2 : glyph-proc
		include [refer-glyph 'c'] AS_BASE ALSO_METRICS
		include [refer-glyph 'currency/centSignBar']
		CvDecompose.set currentGlyph { 'c' 'currency/centSignBar' }

	turned 'turnC' 0x186 'C' Middle (CAP / 2)
	turned 'turnc' 0x254 'c' Middle (XH / 2)
	turned 'turnSmcpC' 0x1D10 'smcpC' Middle (XH / 2)
	alias 'grek/revLunateSigma' 0x3FD 'revC'
	alias 'grek/revLunateSmallSigma' 0x37B 'revSmallC.serifless'

	turned 'turnc/turnDescBase' null 'c/turnDescBase' Middle (XH / 2)
	derive-composites 'turncRetroflexHook' 0x1D97 'turnc/turnDescBase'
		RetroflexHook.l SB 0 (yAttach -- DToothlessRise)

	derive-composites 'CPalatalHook' 0xA7C4 'C/descBase'
		PalatalHook.r RightSB 0 (yAttach -- DToothlessRise)

	derive-composites 'cPalatalHook' 0xA794 'c/descBase'
		PalatalHook.r RightSB 0 (yAttach -- DToothlessRise)

	derive-composites 'grek/dotLunateSigma' 0x3FE 'grek/lunateSigma' 'innerDot'
	derive-composites 'grek/dotRevLunateSigma' 0x3FF 'grek/revLunateSigma' 'innerDot'
	derive-composites 'grek/dotLunateSmallSigma' 0x37C 'grek/lunateSmallSigma' 'innerDotSmall'
	derive-composites 'grek/dotRevLunateSmallSigma' 0x37D 'grek/revLunateSmallSigma' 'innerDotSmall'
	derive-composites 'CRevDot' 0xA73E 'revC'      'innerDotSmall'
	derive-composites 'cRevDot' 0xA73F 'revSmallC' 'innerDotSmall'

	create-glyph 'CBarOverlay' : LetterBarOverlay.l.in SB 0 CAP
	create-glyph 'cBarOverlay' : LetterBarOverlay.l.in SB 0 XH
	derive-composites 'CBar' 0xA792 'C' 'CBarOverlay'
	derive-composites 'cBar' 0xA793 'c' 'cBarOverlay'

	derive-composites 'CCedilla' 0xC7 'C' 'cedillaExtShapeBelowOArc'
	derive-composites 'cCedilla' 0xE7 'c' 'cedillaExtShapeBelowOArc'
	derive-composites 'CCedillaAcute' 0x1E08 'C' 'cedillaExtShapeBelowOArc' 'acuteAbove'
	derive-composites 'cCedillaAcute' 0x1E09 'c' 'cedillaExtShapeBelowOArc' 'acuteAbove'
	derive-composites 'cyrl/The' 0x4AA 'cyrl/Es' 'cedillaExtShapeBelowOArc'
	derive-composites 'cyrl/the' 0x4AB 'cyrl/es' 'cedillaExtShapeBelowOArc'
