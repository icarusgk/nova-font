$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Lower-E : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : FlatHookDepth RetroflexHook
	glyph-block-import Mark-Shared-Metrics : markExtend markStroke markStress markFine
	glyph-block-import Mark-Above : aboveMarkTop aboveMarkBot aboveMarkMid aboveMarkStack
	glyph-block-import Mark-Adjustment : ExtendBelowBaseAnchors

	define [xTerminalR df] : df.rightSB - OX * [if para.isItalic 0 0.5]

	define [HookHeight top stroke] : Math.min AHook
		if para.isItalic top (stroke / 2 + (top - stroke * 3) / 4)

	glyph-block-export SmallEShape
	define [SmallEShape] : with-params [df top stroke barpos [bbd 0]] : glyph-proc
		local barbottom : top * [fallback barpos DesignParameters.eBarPos] - (stroke / 2)

		include : HBar.b (df.leftSB + (stroke / 2) + OX + bbd) (df.rightSB - (stroke / 2) - OX) barbottom stroke
		local path : include : dispiro
			widths.lhs stroke
			flat (df.rightSB - OX) barbottom [heading Upward]
			curl (df.rightSB - OX) (top - [df.archDepthB SmallArchDepth])
			arcvh
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat (df.leftSB + OX) (top - [df.archDepthA SmallArchDepth])
			curl (df.leftSB + OX) (0 + [df.archDepthB SmallArchDepth])
			hookend O (sw -- stroke)
			g4 [xTerminalR df] [HookHeight top stroke]

		return path.rhsKnots.[path.rhsKnots.length - 1]

	glyph-block-export RevSmallEShape
	define [RevSmallEShape] : with-params [df top stroke barpos] : glyph-proc
		local barbottom (top * [fallback barpos DesignParameters.eBarPos] - HalfStroke)
		local hookx df.leftSB
		local hookmiddle : [mix (df.rightSB - O) hookx 0.55] + CorrectionOMidS

		include : HBar.b (df.leftSB + (stroke / 2)) (df.rightSB - (stroke / 2)) barbottom stroke
		include : dispiro
			widths.rhs stroke
			flat (df.leftSB + OX) barbottom [heading Upward]
			curl (df.leftSB + OX) (top - [df.archDepthA SmallArchDepth])
			arcvh
			g4   df.middle (top - O)
			archv
			flat (df.rightSB - OX) (top - [df.archDepthB SmallArchDepth])
			curl (df.rightSB - OX) [df.archDepthA SmallArchDepth]
			hookend O (sw -- stroke)
			g4 (df.width - [xTerminalR df]) [HookHeight top stroke]

	glyph-block-export SmallERoundedShape
	define [SmallERoundedShape] : with-params [df top stroke barpos] : glyph-proc
		local barbottom : top * [fallback barpos : if para.isItalic 0.500 0.475] - (stroke / 2)

		local pBarRight : 0.475 - TanSlope * 0.5
		local pArcRight : if para.isItalic (0.425 - TanSlope * 0.25) (ArchDepthA / (ArchDepthA + ArchDepthB))

		local xStart : df.leftSB + (0.125 * stroke * HVContrast)
		local pfIt : if para.isItalic 1 0
		local path : include : dispiro
			widths.lhs stroke
			[if para.isItalic g2 flat] xStart (barbottom - pfIt * [StrokeWidthBlend 2 3] * O)
			if para.isItalic [alsoThru.g2 0.5 0.8] [list]
			[if para.isItalic g2 curl] [mix (xStart + [if para.isItalic 0.25 0.0] * stroke * HVContrast) df.rightSB pBarRight] (barbottom + pfIt * [StrokeWidthBlend 0.25 1] * O)
			if para.isItalic {} [archv]
			g4 (df.rightSB - OX) [mix barbottom top pArcRight]
			arcvh
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat (df.leftSB + OX) (top - [df.archDepthA SmallArchDepth])
			curl (df.leftSB + OX) (0 + [df.archDepthB SmallArchDepth])
			hookend O (sw -- stroke)
			g4 [xTerminalR df] [HookHeight top stroke]

		return path.rhsKnots.[path.rhsKnots.length - 1]

	glyph-block-export RevSmallERoundedShape
	define [RevSmallERoundedShape] : with-params [df top stroke barpos] : glyph-proc
		local barbottom : top * [fallback barpos : if para.isItalic 0.500 0.475] - (stroke / 2)

		local pBarRight : 0.475 - TanSlope * 0.5
		local pArcRight : if para.isItalic (0.425 + TanSlope * 0.25) (ArchDepthB / (ArchDepthA + ArchDepthB))

		local xStart : df.rightSB - (0.125 * stroke * HVContrast)
		local pfIt : if para.isItalic 1 0
		include : dispiro
			widths.rhs stroke
			[if para.isItalic g2 flat] xStart (barbottom - pfIt * [StrokeWidthBlend 2 3] * O)
			if para.isItalic [alsoThru.g2 0.5 0.8] [list]
			[if para.isItalic g2 curl] [mix (xStart - [if para.isItalic 0.25 0.0] * stroke * HVContrast) df.leftSB pBarRight] (barbottom + pfIt * [StrokeWidthBlend 0.25 1] * O)
			if para.isItalic {} [archv]
			g4 (df.leftSB + OX) [mix barbottom top pArcRight]
			arcvh
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat (df.rightSB - OX) (top - [df.archDepthB SmallArchDepth])
			curl (df.rightSB - OX) (0 + [df.archDepthA SmallArchDepth])
			hookend O (sw -- stroke)
			g4 (df.width - [xTerminalR df]) [HookHeight top stroke]

	define SmallEConfig : object
		flatCrossbar { SmallEShape        RevSmallEShape        }
		rounded      { SmallERoundedShape RevSmallERoundedShape }

	define [AbkCheShape Body df top fDesc] : glyph-proc
		local gap : (df.width - 2 * df.leftSB - 2.5 * df.mvs) * 0.375 - 0.25 * df.mvs * HVContrast
		define divSub : (df.width - gap - df.mvs) / Width
		define dfSub : DivFrame divSub 2
		include : Body dfSub top df.mvs
		if fDesc : begin
			include : ExtendBelowBaseAnchors (-LongJut + 0.5 * Stroke)
			include : difference
				VBar.m dfSub.middle (-LongJut + 0.5 * Stroke) (df.mvs + O) [AdviceStroke 3.5 df.div]
				OShapeOutline.NoOvershoot top 0 dfSub.leftSB dfSub.rightSB df.mvs
		include : Translate (Width * (df.div - divSub)) 0

		local hd : FlatHookDepth df
		local yBar : top * DesignParameters.eBarPos - 0.5 * df.mvs
		include : intersection [MaskLeft (dfSub.leftSB + Width * (df.div - divSub))] : dispiro
			flat (df.leftSB - 0.25 * df.mvs * HVContrast) (yBar + Hook) [widths.lhs.heading df.mvs Downward]
			curl (df.leftSB - 0.25 * df.mvs * HVContrast) (yBar + [Math.min Hook hd.y] - df.mvs * 0.25) [heading Downward]
			arcvh
			flat [Math.min (df.leftSB + hd.x - 0.5 * df.mvs * HVContrast) (dfSub.leftSB + Width * (df.div - divSub))] yBar
			curl (dfSub.middle + Width * (df.div - divSub)) yBar

	foreach { suffix { Body RevBody } } [Object.entries SmallEConfig] : do
		create-glyph "e.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Body [DivFrame 1] XH [AdviceStroke2 2 3 XH]

		create-glyph "eOgonek.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lastKnot : include : Body [DivFrame 1] XH [AdviceStroke2 2 3 XH]

			# Connected Ogonek shape
			local fine : AdviceStroke 8
			local depth : 0 - Descender - markStroke
			local extL : (7 / 16) * depth + 0.25 * markStress
			local extR : Math.max (0.0625 * markExtend) (1.5 * TanSlope * markStroke)
			local beginCoSlope : if para.isItalic 0.2 0

			set-base-anchor 'trailing' (RightSB + extR) (-depth + 0.5 * O - markStroke)
			set-base-anchor 'belowBraceL' (RightSB - extL - 0.25 * HVContrast * markStroke) (-0.75 * depth)
			set-base-anchor 'belowBraceR' (RightSB - 0.75 * extL) (-0.75 * depth)

			local turnSlope : 0.5 * ((markStroke - fine) / markStroke - (ArchDepthB - ArchDepth) / ArchDepth)

			include : intersection
				MaskBelow lastKnot.y
				dispiro
					g4 lastKnot.x lastKnot.y [widths.rhs fine]
					g4 (lastKnot.x - beginCoSlope * 0.01) (lastKnot.y - 0.01)
					alsoThruThem.fromTWithOffset {(1/3) (2/3)} : object
						rx       : function [rt] rt
						deltaX   : function [rt] 0
						ry       : function [rt] : 1/24 + rt + (1/2 - rt) * (3/8)
						deltaY   : function [rt] (-0.25 * [mix fine markStroke rt])
						modifier : function [rt] : widths.rhs [mix fine markStroke : Math.pow rt 2]
					g4.down.mid (RightSB - extL) (-0.75 * depth) [widths.rhs.heading markStroke {.x HVContrast .y turnSlope}]
					arcvh [widths.rhs markStroke]
					g4 (RightSB + [mix (-extL) extR (11/16)]) (-depth + O) [heading Rightward]
					g4 (RightSB + extR) (-depth + 0.5 * O) [heading Rightward]

		create-glyph "eRetroflexHook.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lastKnot : include : Body [DivFrame 1] XH [AdviceStroke2 2 3 XH]
			include : RetroflexHook.r
				x -- lastKnot.x
				y -- 0
				yAttach -- lastKnot.y

		create-glyph "Schwa.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : Body [DivFrame 1] CAP [AdviceStroke2 2 3 CAP]
			include : FlipAround Middle (CAP / 2)

		create-glyph "schwa.\(suffix)" : glyph-proc
			include [refer-glyph "e.\(suffix)"] AS_BASE ALSO_METRICS
			include : FlipAround Middle (XH / 2)

		create-glyph "eRev.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : RevBody [DivFrame 1] XH [AdviceStroke2 2 3 XH]

		create-glyph "eBar.\(suffix)" : glyph-proc
			include [refer-glyph "e.\(suffix)"] AS_BASE ALSO_METRICS
			include : HBar.m [mix SB 0 0.7] [mix RightSB Width 0.7] (XH * 0.25 + Stroke * 0.25)
				Math.min [AdviceStroke 5] (0.25 * (XH - 3 * Stroke))

		create-glyph "cyrl/abk/Che.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 2.5
			set-width df.width
			include : df.markSet.capital
			include : AbkCheShape Body df CAP 0

		create-glyph "cyrl/abk/che.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 2.5
			set-width df.width
			include : df.markSet.e
			include : AbkCheShape Body df XH 0

		create-glyph "cyrl/abk/CheDescender.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 2.5
			set-width df.width
			include : df.markSet.capital
			include : AbkCheShape Body df CAP 1

		create-glyph "cyrl/abk/cheDescender.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 2.5
			set-width df.width
			include : df.markSet.e
			include : AbkCheShape Body df XH 1

	select-variant 'e' 'e'
	alias 'cyrl/ie' 0x435 'e'
	turned 'turne' 0x1DD 'e' Middle (XH / 2)

	select-variant 'eOgonek' 0x119 (follow -- 'e')
	select-variant 'eRetroflexHook' 0x1D92 (follow -- 'e')

	select-variant 'Schwa' 0x18F
	alias 'cyrl/Schwa' 0x4D8 'Schwa'

	select-variant 'schwa' 0x259
	alias 'cyrl/schwa' 0x4D9 'turne'

	select-variant 'eRev' 0x258 (follow -- 'e')

	select-variant 'eBar' 0xAB33 (follow -- 'e')

	select-variant 'cyrl/abk/Che' 0x4BC (follow -- 'e')
	select-variant 'cyrl/abk/che' 0x4BD (follow -- 'e')
	select-variant 'cyrl/abk/CheDescender' 0x4BE (follow -- 'e')
	select-variant 'cyrl/abk/cheDescender' 0x4BF (follow -- 'e')

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/e' 0x1D556 : glyph-proc
		include : MarkSet.e
		include : SmallEShape [DivFrame 1] XH BBS (bbd -- BBD)
		include : intersection
			OShapeOutline.NoOvershoot XH 0 SB RightSB BBS
			union
				VBar.l (SB + BBD + OX) 0 XH BBS
				VBar.r (RightSB - BBD - OX) (XH * DesignParameters.eBarPos) XH BBS

