$$include '../../../meta/macros.ptl'

import [mix fallback SuffixCfg] from"../../../support/utils.mjs"
import [Dotless CvDecompose] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Lower-T : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared : CreateAccentedComposition CreateCommaCaronComposition
	glyph-block-import Letter-Shared-Shapes : CurlyTail FlatHookDepth ConnectedCedilla SerifedArcEnd
	glyph-block-import Letter-Shared-Shapes : DiagonalTailR DiagonalTailStdDepth DToothlessRise
	glyph-block-import Letter-Shared-Shapes : TopHook PalatalHook
	glyph-block-import Letter-Latin-S : SAutoSlabEnd AdviceSArchDepth
	glyph-block-import Letter-Blackboard : BBS BBD

	define dfNarrowT : DivFrame para.diversityF
	define [xSmallTBarLeftT df] : df.middle - TBalance * df.div * df.div - HalfStroke * HVContrast
	define [xSmallTCrossRefT df] : [xSmallTBarLeftT df] + df.div * TBalance2 + HalfStroke * HVContrast

	define yCrossBar     XH
	define yShortNeck1 : Math.max [mix XH Ascender 0.5] ([mix XH Ascender 0.875] - Stroke * 0.125)
	define yShortNeck2 : Math.max [mix XH Ascender 0.5] ([mix XH Ascender 0.75]  - Stroke * 0.125)

	define Standard : namespace
		export : define [BarLeftPos df] : xSmallTBarLeftT df

		export : define [HookShapeT sink df fCross offset top bot sw] : begin
			local xLeft : if fCross (df.middle - HalfStroke * HVContrast) [xSmallTBarLeftT df]
			local hookx : xLeft + [Math.max ((df.width - df.leftSB * 2) * 0.75 + Stroke * 0.25 * HVContrast) (Stroke * HVContrast * 2.25)]
			local turn : [mix xLeft hookx 0.5] + CorrectionOMidS
			local adb  : Math.max Hook ((turn - xLeft) * 1.2)

			return : sink
				widths.lhs sw
				[if (sink == spiro-outline) corner flat] (offset + xLeft) top [heading Downward]
				curl (offset + xLeft) (bot + adb)
				hookend (bot + O + offset) (tight -- !para.isItalic)
				g4 (hookx - offset) (bot + Hook)
				if (sink == spiro-outline) {[corner (hookx - offset) top]} {}

		export : define [CrossBar df] : HCrossBar.top
			[xSmallTCrossRefT df] - LongJut * [Math.sqrt df.div]
			[xSmallTCrossRefT df] + LongJut * [Math.sqrt df.div]
			begin yCrossBar

		###########################################################################################

		export : define [Body df top bot] : glyph-proc
			include : CrossBar df

			local g : include : HookShapeT dispiro df false 0 top bot Stroke
			local gEnd g.knots.(g.knots.length - 1)
			set-base-anchor 'bottomRight' gEnd.x gEnd.y

			local xLeft : xSmallTBarLeftT df
			set-base-anchor 'above' (xLeft + 0.5 * Stroke * HVContrast) top
			set-base-anchor 'hooktopAttach' (xLeft + 0.5 * Stroke * HVContrast) top
			set-base-anchor 'below' [mix xLeft gEnd.x : StrokeWidthBlend 0.375 0.5] bot
			set-base-anchor 'overlay' (g.knots.0.x + 0.625 * Stroke * HVContrast) (XH * 0.58)

		export : define [Retroflex df top bot] : Flat.Retroflex df top bot

		export : define [PRBody df top bot] : glyph-proc
			include : CrossBar df
			include : HookShapeT dispiro df true 0 top bot Stroke

	define DiagTail : namespace
		define [HookShape df fCross top bot sw] : begin
			local xMid : if fCross df.middle ([xSmallTBarLeftT df] + HalfStroke * HVContrast)
			return : dispiro
				flat xMid top [widths.center.heading sw Downward]
				DiagonalTailR df xMid bot [DiagonalTailStdDepth [DivFrame : Math.sqrt df.div] sw] sw

		###########################################################################################

		export : define [BarLeftPos df] : xSmallTBarLeftT df

		export : define [Body df top] : glyph-proc
			include : Standard.CrossBar df

			local g : include : HookShape df false top 0 Stroke

			local gEnd g.rhsKnots.(g.rhsKnots.length - 1)
			set-base-anchor 'bottomRight' gEnd.x gEnd.y

			set-base-anchor 'above' ([xSmallTBarLeftT df] + 0.5 * Stroke * HVContrast) top
			set-base-anchor 'hooktopAttach' ([xSmallTBarLeftT df] + 0.5 * Stroke * HVContrast) top
			set-base-anchor 'overlay' (g.knots.0.x + 0.125 * Stroke * HVContrast) (XH * 0.58)

		export : define [Retroflex df top bot] : Flat.Retroflex df top bot

		export : define [PRBody df top] : glyph-proc
			include : Standard.CrossBar df
			include : HookShape df true top 0 Stroke

	define Flat : namespace
		define [CrossLeft df]  : mix 0        df.leftSB  [mix 1 df.div 2]
		define [CrossRight df] : mix df.width df.rightSB [mix 1 df.div 2]

		define NORMAL    0
		define CROSS     1
		define RETROFLEX 2
		define PR        3

		export : define [BarLeftPos df] : [mix [CrossLeft df] [CrossRight df] 0.42] - 0.375 * HVContrast * Stroke

		export : define [Body        df top bot] : Impl NORMAL    df top bot 0
		export : define [Retroflex   df top bot] : Impl CROSS     df top bot 0
		export : define [CrossRTBody df top bot] : Impl RETROFLEX df top bot 0
		export : define [PRBody      df top bot] : Impl PR        df top bot 0


		define [Impl shape df top bot ext] : glyph-proc
			local xCrossLeft : CrossLeft df
			local xCrossRight : CrossRight df

			local xBarLeft : match shape
				([Just CROSS] || [Just PR]) : df.middle - 0.5 * HVContrast * Stroke
				__                          : BarLeftPos df

			local hd : FlatHookDepth df
			define xTailEnd : match shape
				[Just RETROFLEX] : xBarLeft + HookX + HalfStroke * HVContrast
				__                 xCrossRight

			include : union
				HCrossBar.top xCrossLeft (xCrossRight + ext) yCrossBar
				dispiro
					widths.rhs
					if (shape === RETROFLEX || shape === CROSS)
						then : straight.left.start xTailEnd bot
						else : list
							flat xCrossRight bot
							curl [Math.min (xBarLeft + hd.x) (xCrossRight - 1)] bot
					archv.superness DesignParameters.tightHookSuperness
					flat xBarLeft [if (shape === RETROFLEX) (bot + Hook + HalfStroke) hd.y]
					curl xBarLeft top [heading Upward]

			set-base-anchor 'above' (xBarLeft + 0.5 * Stroke * HVContrast) top
			set-base-anchor 'hooktopAttach' (xBarLeft + 0.5 * Stroke * HVContrast) top
			set-base-anchor 'topRight' xCrossRight  Ascender
			set-base-anchor 'overlay' (xBarLeft + 0.625 * Stroke * HVContrast) (XH * 0.58)
			set-base-anchor 'below' (HalfStroke * HVContrast + [Math.min (xBarLeft + (1 / 3) * hd.x) (xCrossRight - 1)]) bot
			set-base-anchor 'bottomRight' xTailEnd bot
			set-base-anchor 'lTailHookAttach' xTailEnd (bot + Stroke)

	define Cross : namespace
		export : define [BarLeftPos df] : df.middle - 0.5 * HVContrast * Stroke

		export : define [Body df top bot] : glyph-proc
			include : VBar.m df.middle 0 top
			include : HCrossBar.top (df.middle - LongJut * [Math.sqrt df.div]) (df.middle + LongJut * [Math.sqrt df.div]) yCrossBar
			set-base-anchor 'overlay' df.middle (XH * 0.58)
			set-base-anchor 'hooktopAttach' df.middle top

		export : define [Retroflex df top bot] : Flat.CrossRTBody df top bot

		export : define [LTBody df top bot] : glyph-proc
			include : Body df top bot

			define xEnd : df.middle + 1.25 * HVContrast * Stroke
			include : HBar.b df.middle xEnd 0
			set-base-anchor 'bottomRight' xEnd bot
			set-base-anchor 'lTailHookAttach' xEnd (bot + Stroke)

		export : define [PLBody df top bot] : glyph-proc
			include : Body df top bot
			include : HBar.b df.middle RightSB 0

	define HooklessAsymmetric : namespace
		export : define [BarLeftPos df] : xSmallTBarLeftT df

		export : define [Body df top bot] : glyph-proc
			define xBarLeft : xSmallTBarLeftT df
			include : VBar.l xBarLeft 0 top
			include : difference
				HCrossBar.top xBarLeft (df.middle + df.div * LongJut) yCrossBar
				MaskLeft (xBarLeft - O)
			set-base-anchor 'above' (xBarLeft + 0.5 * HVContrast * Stroke) top
			set-base-anchor 'hooktopAttach' (xBarLeft + 0.5 * HVContrast * Stroke) top
			set-base-anchor 'overlay' (xBarLeft + 0.625 * HVContrast * Stroke) (XH * 0.58)
			set-base-anchor 'below' (xBarLeft + HVContrast * HalfStroke) bot

		export : define [LTBody df top bot] : glyph-proc
			include : Body df top bot
			define xBarLeft : xSmallTBarLeftT df

			define xEnd : xBarLeft + 1.75 * HVContrast * Stroke
			include : HBar.b xBarLeft xEnd 0
			set-base-anchor 'bottomRight' xEnd bot
			set-base-anchor 'lTailHookAttach' xEnd (bot + Stroke)

		export : define [Retroflex df top bot] : glyph-proc
			define xBarLeft : xSmallTBarLeftT df
			set-base-anchor 'hooktopAttach' (xBarLeft + 0.5 * HVContrast * Stroke) top
			include : dispiro
				widths.rhs
				straight.left.start (xBarLeft + HookX + HalfStroke * HVContrast) bot
				flat xBarLeft (bot + Hook + HalfStroke)
				curl xBarLeft top [heading Upward]
			include : difference
				HCrossBar.top xBarLeft (df.middle + df.div * LongJut) yCrossBar
				MaskLeft (xBarLeft - O)

		export : define [PLBody df top bot] : glyph-proc
			include : Body df top bot
			define xBarLeft : xSmallTBarLeftT df
			include : HBar.b xBarLeft RightSB 0

		export : define [PRBody df top bot] : glyph-proc
			include : VBar.m df.middle 0 top
			include : HCrossBar.top df.middle (df.middle + df.div * LongJut) yCrossBar

	define SmallTConfig :SuffixCfg.weave
		object # body
			standard                       { [DivFrame  1] Standard           }
			diagonalTailed                 {  dfNarrowT    DiagTail           }
			flatHook                       {  dfNarrowT    Flat               }
			cross                          {  dfNarrowT    Cross              }
			hooklessAsymmetric             {  dfNarrowT    HooklessAsymmetric }
		object # height
			""							   Ascender
			shortNeck                      yShortNeck1
			shortNeck2                     yShortNeck2

	foreach { suffix { {df Style} top } } [pairs-of SmallTConfig] : do
		create-glyph "t.\(suffix)" : glyph-proc
			set-width df.width
			include : df.markSet.b
			include : Style.Body df top 0

		create-glyph "t/phoneticLeft2.\(suffix)" : glyph-proc
			set-width df.width
			include : df.markSet.b
			include : (Style.PLBody || Style.Body) df top 0

		create-glyph "t/phoneticLeft3.\(suffix)" : glyph-proc
			set-width df.width
			include : df.markSet.b
			include : difference
				(Style.PRBody || Style.Body) df top 0
				MaskLeft [mix df.leftSB (df.middle - HVContrast * HalfStroke) 0.5]

		create-glyph "t/teshLeft.\(suffix)" : glyph-proc
			define df1 : DivFrame 1
			set-width df1.width
			include : df1.markSet.b
			include : Style.Body df1 top 0
			include : HCrossBar.top df1.middle (df1.width + df1.middle) yCrossBar

		create-glyph "tHookTop.\(suffix)" : glyph-proc
			include [refer-glyph "t.\(suffix)"] AS_BASE ALSO_METRICS
			local attach : currentGlyph.gizmo.unapply currentGlyph.baseAnchors.hooktopAttach
			currentGlyph.clearGeometry

			include : union
				difference [Style.Body df top 0] [MaskAbove XH]
				TopHook.mBarInner attach.x XH Ascender

		create-glyph "tLTail.\(suffix)" : glyph-proc
			set-width df.width
			include : df.markSet.if
			include : (Style.LTBody || Style.Body) df top 0

			local attach : currentGlyph.gizmo.unapply (currentGlyph.baseAnchors.lTailHookAttach || currentGlyph.baseAnchors.bottomRight)
			include : PalatalHook.r
				x -- attach.x
				y -- 0
				yAttach -- attach.y

		create-glyph "tRTail.\(suffix)" : glyph-proc
			set-width df.width
			include : df.markSet.if
			include : Style.Retroflex df top Descender

		create-glyph "tHookTopRTail.\(suffix)" : glyph-proc
			set-width df.width
			include : df.markSet.if
			include : Style.Retroflex df XH Descender
			local attach : currentGlyph.gizmo.unapply currentGlyph.baseAnchors.hooktopAttach
			include : TopHook.mBarInner attach.x XH Ascender

		turned "turnt.\(suffix)" nothing "t.\(suffix)" df.middle (XH / 2) [df.markSet.p]

		create-glyph "tCurlyTail.\(suffix)" : glyph-proc
			include : MarkSet.b

			local df : DivFrame 1
			local fine : AdviceStroke 3.5
			local rinner : LongJut / 2 - fine / 2

			local xLeft : Style.BarLeftPos df

			local x2 : mix SB xLeft 0.4
			local y2 : -fine

			include : difference
				Style.Body df top 0
				MaskBelow (yCrossBar - Stroke - 0.1)

			include : dispiro
				widths.lhs
				flat xLeft (yCrossBar - Stroke) [heading Downward]
				curl xLeft (fine + rinner * 2)
				CurlyTail fine rinner (xLeft + Stroke * HVContrast) 0 (xLeft + Stroke * HVContrast + LongJut) x2 y2

	select-variant 't' 't'
	select-variant 't/teshLeft' (follow -- 't')
	select-variant 't/phoneticLeft1' (shapeFrom -- 't')
	select-variant 't/phoneticLeft2'
	select-variant 't/phoneticLeft3'
	select-variant 'turnt' 0x287 (follow -- 't')
	CreateCommaCaronComposition 'tcaron' 0x165 't'
	derive-glyphs 'tCedilla' 0x163 't' ConnectedCedilla

	select-variant "tHookTop" 0x1AD
	select-variant 'tLTail' 0x1AB
	select-variant 'tRTail' 0x288
	select-variant 'tCurlyTail' 0x236

	select-variant "tHookTopRTail" 0x1DF09

	CreateAccentedComposition 'tTildeOver' 0x1D75 't' 'tildeOver'

	# U+01BE is catually "t" and "s" combined together
	define SLAB-NONE        0
	define SLAB-CLASSICAL   1
	define SLAB-INWARD      2
	define [TsLigStrokeShape df stroke top sb] : begin
		define archDepth : AdviceSArchDepth (XH + 0.5 * ArchDepth) (-1) stroke
		return : dispiro
			widths.lhs stroke
			flat [xSmallTBarLeftT df] top [heading Downward]
			curl [xSmallTBarLeftT df] XH [heading Downward]
			alsoThru.g2 0.5 0.5 [widths.center stroke]
			g4   df.rightSB (archDepth) [widths.rhs stroke]
			match sb
				[Just SLAB-CLASSICAL] : SerifedArcEnd.RtlRhs df.leftSB Middle 0 stroke SHook
				[Just SLAB-INWARD] : list
					arcvh
					g4 (df.middle + CorrectionOMidX * stroke) O
					g4 df.leftSB DToothlessRise
				__ : list
					hookend O (sw -- stroke) (swItalicAdj -- Stroke)
					g4      df.leftSB SHook

	define TSUpperConfig : object
		standard            { Ascender    }
		standardShortNeck   { yShortNeck1 }
		standardShortNeck2  { yShortNeck2 }

	foreach { suffix { yTop } } [Object.entries TSUpperConfig] : do
		create-glyph "tsLig/upperHalf.\(suffix)" : glyph-proc
			define df : DivFrame 1
			set-base-anchor 'cvDecompose' 0 0
			include : difference
				TsLigStrokeShape df Stroke top false
				MaskBelow XH
			include : Standard.CrossBar df

	define TSLowerConfig : object
		serifless               { SLAB-NONE      }
		bilateralSerifed        { SLAB-CLASSICAL }
		bilateralInwardSerifed  { SLAB-INWARD    }

	foreach { suffix { doBS } } [Object.entries TSLowerConfig] : do
		create-glyph "tsLig/lowerHalf.\(suffix)" : glyph-proc
			define df : DivFrame 1
			include : df.markSet.b
			set-mark-anchor 'cvDecompose' 0 0
			include : intersection
				TsLigStrokeShape df Stroke Ascender doBS
				MaskBelow XH
			include : SAutoSlabEnd   doBS 0  Stroke Hook

	select-variant 'tsLig/upperHalf'
	select-variant 'tsLig/lowerHalf'

	create-glyph "tsLig" 0x1BE : glyph-proc
		include [refer-glyph 'tsLig/upperHalf'] AS_BASE ALSO_METRICS
		include [refer-glyph 'tsLig/lowerHalf']
		CvDecompose.set currentGlyph { 'tsLig/upperHalf' 'tsLig/lowerHalf' }

	create-glyph 'mathbb/t' 0x1D565 : glyph-proc
		define df : DivFrame 1
		include : df.markSet.b
		define xLeft : xSmallTBarLeftT df
		include : HBar.t xLeft (xLeft + BBD) Ascender BBS
		include : Standard.HookShapeT dispiro df false 0 Ascender 0 BBS
		include : intersection
			VBar.l (xLeft + BBD) 0 Ascender BBS
			Standard.HookShapeT spiro-outline df false 1 Ascender 0 BBS
		include : difference
			HCrossBar.top
				xLeft + (BBD / 2) - LongJut + TBalance2
				xLeft + (BBD / 2) + LongJut + TBalance2
				begin yCrossBar
				begin BBS
			Rect Ascender 0 xLeft (xLeft + BBD)
