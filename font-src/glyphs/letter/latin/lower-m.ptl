$$include '../../../meta/macros.ptl'

import [mix fallback SuffixCfg] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Lower-M : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared : CreateAccentedComposition
	glyph-block-import Letter-Shared-Shapes : SerifFrame RightwardTailedBar DToothlessRise DMBlend
	glyph-block-import Letter-Shared-Shapes : nShoulder nShoulderMask
	glyph-block-import Letter-Shared-Shapes : CyrDescender PalatalHook CurlyTail

	define [SmallMSmooth df] : df.div * (0.5 * SmallArchDepth + 0.375 * Stroke)
	define [SmallMShoulderSpiro] : with-params [left right top bottom width fine df coBottom] : glyph-proc
		local fix : TanSlope * Stroke * HVContrast * width / Stroke
		local sm : [SmallMSmooth df] + fix / 2
		include : spiro-outline
			corner (right - width * HVContrast) [Math.min (top - sm - 0.1) bottom]
			curl   (right - width * HVContrast) (top - sm + fix)
			arcvh 8
			g2     [mix left (right - width * HVContrast) 0.5] (top - O - width)
			archv 8
			flat   left (top - sm - fix)
			corner left (top - sm - fix - 1)
			if (coBottom != nothing)
				list [corner left coBottom] [corner (left - fine) coBottom]
				list
			corner (left - fine) (top - sm - 1)
			curl   (left - fine) (top - sm)
			arcvh 8
			g2     [mix (left - fine * HVContrast) right 0.5] (top - O)
			archv 8
			flat   right (top - sm)
			corner right [Math.min (top - sm - 0.1) bottom]
			close

	define [RevSmallMShoulderSpiro] : with-params [left right top bottom width fine df coBottom] : glyph-proc
		local fix : TanSlope * Stroke * HVContrast * width / Stroke
		local sm : [SmallMSmooth df] - fix / 2
		include : spiro-outline
			corner (left + width * HVContrast) [Math.min (top - sm - 0.1) bottom]
			curl   (left + width * HVContrast) (top - sm - fix)
			arcvh 8
			g2     [mix right (left + width * HVContrast) 0.5] (top - O - width)
			archv 8
			flat   right (top - sm - fix)
			corner right (top - sm - fix - 1)
			if (coBottom != nothing)
				list [corner right coBottom] [corner (right + fine) coBottom]
				list
			corner (right + fine) (top - sm - 1)
			curl   (right + fine) (top - sm)
			arcvh 8
			g2     [mix (right + fine * HVContrast) left 0.5] (top - O)
			archv 8
			flat   left (top - sm)
			corner left [Math.min (top - sm - 0.1) bottom]
			close

	define [SmallMTopLeftSerif df top lbot] : begin
		local sf : SerifFrame.fromDf df top 0
		return sf.lt.outer

	define [SmallMBottomLeftSerif df top lbot] : begin
		local sf : SerifFrame.fromDf df top lbot
		return : if sf.enoughSpaceForFullSerifs sf.lb.full sf.lb.outer

	define [SmallMBottomMiddleSerif df top mbot] : begin
		local sf : SerifFrame.fromDf df top mbot
		return : if sf.enoughSpaceForFullSerifs sf.mb.full [no-shape]

	define [SmallMBottomRightSerif df top rbot] : begin
		local sf : SerifFrame.fromDf df top rbot
		return : if sf.enoughSpaceForFullSerifs sf.rb.full sf.rb.outer

	define [SmallMBottomMotionRightSerif df top rbot] : begin
		local sf : SerifFrame.fromDf df top rbot
		return sf.rb.outer

	define [FullSerifs df top lbot mbot rbot tailed earless] : glyph-proc
		if [not earless] : include : SmallMTopLeftSerif df top lbot
		include : SmallMBottomLeftSerif df top lbot
		include : SmallMBottomMiddleSerif df top mbot
		if [not tailed] : include : SmallMBottomRightSerif df top rbot

	define [AutoSerifs df top lbot mbot rbot tailed earless] : begin
		if SLAB [FullSerifs df top lbot mbot rbot tailed earless] [no-shape]

	define [LtSerifs df top lbot mbot rbot tailed earless] : glyph-proc
		include : SmallMTopLeftSerif df top lbot

	define [LtRbSerifs df top lbot mbot rbot tailed earless] : glyph-proc
		include : SmallMTopLeftSerif df top lbot
		include : SmallMBottomMotionRightSerif df top rbot

	define [dfM] : DivFrame para.diversityM 3
	define [SmallMArches top lbot mbot rbot df] : glyph-proc
		include : SmallMShoulderSpiro
			df        -- df
			left      -- (df.leftSB + df.mvs * HVContrast)
			right     -- (df.middle + df.mvs / 2 * HVContrast)
			top       -- top
			bottom    -- mbot
			width     -- df.mvs
			fine      -- (df.mvs * ShoulderFine / Stroke)
		include : SmallMShoulderSpiro
			df        -- df
			left      -- (df.middle + df.mvs * 0.5 * HVContrast)
			right     -- df.rightSB
			top       -- top
			bottom    -- rbot
			width     -- df.mvs
			fine      -- (df.mvs * ShoulderFine / Stroke)
		include : tagged 'barL' : VBar.l df.leftSB lbot top df.mvs

	define [SmallMShortLegHeight top df] : (top - df.mvs) * 0.45
	define [SmallMSmoothHeight top df] : top - [SmallMSmooth df] - TanSlope * Stroke

	define [EarlessCornerDoubleArchSmallMShape top lbot mbot rbot df] : glyph-proc
		include : dispiro
			widths.rhs df.mvs
			g4 df.leftSB (top - DToothlessRise)
			g4.right.mid [mix df.leftSB (df.middle + df.mvs / 2 * HVContrast) 0.5] (top - O) [heading Rightward]
			g4 (df.middle + df.mvs / 2 * HVContrast) (top - DToothlessRise)
		include : dispiro
			widths.rhs df.mvs
			g4 (df.middle - df.mvs / 2 * HVContrast) (top - DToothlessRise)
			g4.right.mid [mix df.rightSB (df.middle - df.mvs / 2 * HVContrast) 0.5] (top - O) [heading Rightward]
			archv
			flat df.rightSB (top - [SmallMSmooth df]) [heading Downward]
			curl df.rightSB rbot [heading Downward]

		include : tagged 'barL' : VBar.l df.leftSB lbot (top - DToothlessRise) df.mvs
		include : tagged 'barM' : VBar.m df.middle mbot (top - DToothlessRise) df.mvs

	define [EarlessRoundedDoubleArchSmallMShape top lbot mbot rbot df] : glyph-proc
		include : union
			RevSmallMShoulderSpiro
				df        -- df
				left      -- df.leftSB
				right     -- (df.middle - df.mvs / 2 * HVContrast)
				top       -- top
				bottom    -- lbot
				coBottom  -- mbot
				width     -- df.mvs
				fine      -- (df.mvs * CThin)
			SmallMShoulderSpiro
				df        -- df
				left      -- (df.middle + df.mvs * 0.5 * HVContrast)
				right     -- df.rightSB
				top       -- top
				bottom    -- rbot
				coBottom  -- mbot
				width     -- df.mvs
				fine      -- (df.mvs * CThin)

	define [EarlessSingleArchSmallMShape top lbot mbot rbot df] : glyph-proc
		include : tagged 'barL' : VBar.l df.leftSB lbot (top - DToothlessRise) df.mvs
		include : tagged 'barM' : VBar.m df.middle mbot top df.mvs
		include : dispiro
			widths.rhs df.mvs
			g4 df.leftSB (top - DToothlessRise)
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat df.rightSB [Math.max (top - [SmallMSmooth df]) (rbot + 0.1)]
			curl df.rightSB rbot [heading Downward]

	define SmallMConfig : SuffixCfg.weave
		object
			""                             { SmallMArches                        0 }
			"earlessCornerDoubleArch"      { EarlessCornerDoubleArchSmallMShape  1 }
			"earlessRoundedDoubleArch"     { EarlessRoundedDoubleArchSmallMShape 1 }
			"earlessSingleArch"            { EarlessSingleArchSmallMShape        1 }
		object
			""                             { 0 }
			"shortLeg"                     { 1 }
		object
			""						       { 0 }
			"tailed"                       { 1 }
		object
			"serifless"                    { no-shape   }
			"serifed"                      { FullSerifs }
			"topLeftSerifed"               { LtSerifs   }
			"topLeftAndBottomRightSerifed" { LtRbSerifs }

	foreach { suffix { {Body earless} {shortLeg} {tailed} {Serifs} } } [pairs-of SmallMConfig] : do
		define [mShapeBody df height] : glyph-proc
			include : Body height 0 [if shortLeg [SmallMShortLegHeight height df] 0] [if tailed ([SmallMSmoothHeight height df] + O) 0] df
			if tailed : include : RightwardTailedBar df.rightSB 0 [SmallMSmoothHeight height df] (sw -- df.mvs)
			include : Serifs df height 0 [if shortLeg [SmallMShortLegHeight height df] 0] 0 tailed earless

		create-glyph "m.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.e
			include : mShapeBody df XH

		create-glyph "capitalSmallM.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.capital
			include : mShapeBody df CAP

		create-glyph "mLTail.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.e
			include [refer-glyph "m.\(suffix)"]
			eject-contour 'serifRB'
			include : PalatalHook.rExt df.rightSB 0 (sw -- df.mvs)

		create-glyph "turnmLeg.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.p
			include [refer-glyph "m.\(suffix)"]
			eject-contour 'serifLT'
			include : FlipAround df.middle (XH / 2)
			include : VBar.r df.rightSB Descender XH df.mvs

			local sf : SerifFrame.fromDf df XH Descender
			if (SLAB && Serifs === AutoSerifs) : include sf.rb.fullSide
			if (Serifs === LtRbSerifs || Serifs === LtSerifs) : include sf.rb.outer

		create-glyph "turnmSideways.\(suffix)" : glyph-proc
			local realHeight : XH * para.diversityM
			local realTop : XH / 2 + realHeight / 2
			local realBot : XH / 2 - realHeight / 2
			local df : DivFrame (realHeight / Width) 3 (XH * 0.1 / SB)
			include : df.markSet.e
			include : PointingTo Width realTop Width realBot : function [] : glyph-proc
				include : mShapeBody df (Width - SB)
				include : FlipAround df.middle ((Width - SB) / 2)
				include : Translate 0 (SB / 2)

		create-glyph "mCrossedTail.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 4
			set-width df.width
			include : df.markSet.e

			local fine : AdviceStroke 5.5 df.div
			local rinner : XH * 0.15 - fine * 0.75
			local m1 : df.rightSB - df.mvs * HVContrast
			local m2 : [mix (df.middle + 0.5 * df.mvs * HVContrast) m1 0.35] - 0.5 * fine * HVContrast
			local x2 : df.rightSB + SideJut
			local y2 : rinner * 2 + fine - O
			include : Body XH 0 [if shortLeg [SmallMShortLegHeight XH df] 0] (y2 + O) df
			include : dispiro
				straight.down.start df.rightSB (y2 + O) [widths.rhs.heading df.mvs Downward]
				CurlyTail fine rinner m1 0 m2 x2 y2 (adj -- 0)

			include : Serifs df XH 0 [if shortLeg [SmallMShortLegHeight XH df] 0] 0 true earless
			if (SLAB && [not shortLeg] && Serifs === FullSerifs) : begin
				local sf : SerifFrame.fromDf df XH 0
				if (sf.enoughSpaceForFullSerifs && m2 - (df.middle + sf.jutIn) < 0.01 * Width) : begin
					eject-contour 'serifMB'
					include sf.mb.left

	select-variant 'm' 'm'
	select-variant 'm/tailless' (shapeFrom -- 'm')
	select-variant 'capitalSmallM' (follow -- 'm')
	link-reduced-variant 'm/sansSerif' 'm' MathSansSerif

	select-variant 'cyrl/te.italic' (shapeFrom -- 'm')
	alias 'cyrl/te.BGR' null 'cyrl/te.italic'
	derive-composites 'cyrl/teDescender.italic' null 'cyrl/te.italic' : do
		local df : DivFrame para.diversityM 3
		CyrDescender.rSideJut df.rightSB 0 (refSw -- df.mvs)
	derive-composites 'mPalatalHook' 0x1D86 'm/tailless' : do
		local df : DivFrame para.diversityM 3
		PalatalHook.r
			xLink -- df.rightSB
			x -- df.rightSB + SideJut
			y -- 0
			refSw -- df.mvs

	select-variant 'mLTail' 0x271
	select-variant 'turnmLeg' 0x270 (follow -- 'm')
	select-variant 'turnmSideways' 0x1D1F (follow -- 'm')
	select-variant 'mCrossedTail' 0xAB3A (follow -- 'mLTail')

	turned 'turnm' 0x26F 'm' HalfAdvance (XH / 2)
	turned 'capitalTurnm' 0x19C 'capitalSmallM' HalfAdvance (CAP / 2)

	CreateAccentedComposition 'mTildeOver' 0x1D6F 'm' 'tildeOverWideDivM'

	derive-composites 'currency/millSign' 0x20A5 'm' 'slashOver'

	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	create-glyph 'mathbb/m' 0x1D55E : glyph-proc
		local df : DivFrame 1 3
		local bbs : AdviceStroke 8
		local bbd : BBD * [Math.min (3 / 4) (bbs / BBS)]
		define xMid : mix (df.leftSB + bbd + bbs * HVContrast) df.rightSB 0.5

		set-width df.width
		include : df.markSet.e

		include : BBBarLeft df.leftSB 0 XH (bbd -- bbd) (bbs -- bbs)
		include : union
			HBar.b (xMid - bbd) xMid 0 bbs
			nShoulder
				stroke -- bbs
				left -- (df.leftSB + bbd + bbs * HVContrast)
				right -- xMid
				fine -- ShoulderFine
			intersection
				VBar.r (xMid - bbd) 0 XH bbs
				nShoulderMask
					stroke -- bbs
					left -- (df.leftSB + bbd + bbs * HVContrast + 1)
					right -- (xMid - 1)
					top -- (XH - 1)
					fine -- ShoulderFine
		include : union
			HBar.b (df.rightSB - bbd) df.rightSB 0 bbs
			nShoulder
				leftY0 -- 0
				stroke -- bbs
				left -- xMid
				right -- df.rightSB
				fine -- ShoulderFine
			intersection
				VBar.r (df.rightSB - bbd) 0 XH bbs
				nShoulderMask
					stroke -- bbs
					left -- (xMid + 1)
					right -- (df.rightSB - 1)
					top -- (XH - 1)
					fine -- ShoulderFine
