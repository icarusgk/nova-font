$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"

glyph-module

glyph-block Letter-Cyrillic-Tse : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : SerifFrame CyrDescender

	define [CyrTseShape top fRev] : glyph-proc
		include : VBar.l SB 0 top
		include : HBar.b SB RightSB 0
		include : VBar.r RightSB 0 top
		include : if fRev
			CyrDescender.lSideJut SB 0
			CyrDescender.rSideJut RightSB 0
		if SLAB : let [sf : SerifFrame.fromDf [DivFrame 1] top 0] : begin
			include sf.lt.full
			include sf.rt.full
			include sf.lb.outer
			include sf.rb.outer

	create-glyph 'cyrl/Tse' 0x426 : glyph-proc
		include : MarkSet.capital
		include : CyrTseShape CAP false

	create-glyph 'cyrl/tse.upright' : glyph-proc
		include : MarkSet.e
		include : CyrTseShape XH false

	create-glyph 'cyrl/TseRev' 0xA660 : glyph-proc
		include : MarkSet.capital
		include : CyrTseShape CAP true

	create-glyph 'cyrl/tseRev' 0xA661 : glyph-proc
		include : MarkSet.e
		include : CyrTseShape XH true

	define TeTseConfig : object
		serifless     { false false }
		motionSerifed { true  false }
		serifed       { true  true  }

	define [CyrTeTseShape top slabTop slabBot] : glyph-proc
		local sw : AdviceStroke 2.75
		local left : [mix SB RightSB 0.2] - 0.25 * sw * HVContrast + OX
		local right : RightSB - OX

		local xTopBarLeft : SB - SideJut
		local xTopBarRight : mix xTopBarLeft (left + 0.5 * sw * HVContrast) 2

		include : VBar.l left 0 top sw
		include : HBar.b left right 0 sw
		include : VBar.r right 0 top sw
		include : dispiro
			widths.rhs sw
			flat xTopBarLeft  top [if SLAB [heading Rightward] null]
			curl xTopBarRight top [if SLAB [heading Rightward] null]

		local sf : SerifFrame top 0 left right (swRef -- sw)
		include : CyrDescender.rSideJut right 0 (sideJut -- sf.sideJut)

		if slabTop : begin
			include sf.rt.outer

			local swVJut : Math.min [AdviceStroke 4.5] (0.625 * (left - xTopBarLeft))
			include : VSerif.dl  xTopBarLeft  top VJut swVJut
			include : VSerif.dr  xTopBarRight top VJut swVJut

		if slabBot : begin
			include sf.lb.outer
			include sf.rb.outer

	foreach { suffix { doST doSB } } [Object.entries TeTseConfig] : do
		create-glyph "cyrl/TeTse.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : CyrTeTseShape CAP doST doSB

		create-glyph "cyrl/tetse.upright.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : CyrTeTseShape XH doST doSB

	select-variant 'cyrl/TeTse' 0x4B4 (follow -- 'T')
	select-variant 'cyrl/tetse.upright' (follow -- 'T')

	define ItalicVariants {
		'toothedSerifless'
		'toothedMotionSerifed'
		'toothedBottomRightSerifed'
		'toothedSerifed'
		'tailedSerifless'
		'tailedMotionSerifed'
		'tailedSerifed'
	}

	foreach suffix [items-of ItalicVariants] : do
		create-glyph "cyrl/tse.italic.\(suffix)" : glyph-proc
			include [refer-glyph "u.\(suffix)"] AS_BASE
			eject-contour 'serifRB'
			include : CyrDescender.rSideJut RightSB 0

		create-glyph "cyrl/tetse.italic.\(suffix)" : glyph-proc
			include [refer-glyph "u.\(suffix)"] AS_BASE ALSO_METRICS
			include [refer-glyph "tildeAbove"]
			eject-contour 'serifRB'
			include : CyrDescender.rSideJut RightSB 0

	select-variant 'cyrl/tse.italic'
	select-variant 'cyrl/tetse.italic' (follow -- 'cyrl/tse.italic')
	alias 'cyrl/tse.BGR' null 'cyrl/tse.italic'
