$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"

glyph-module

glyph-block Letter-Cyrillic-Che : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : SerifFrame RightwardTailedBar DToothlessRise
	glyph-block-import Letter-Shared-Shapes : CyrDescender

	define BODY-STRAIGHT 0
	define BODY-TAILED   1

	define SLAB-NONE        0
	define SLAB-ALL         1
	define SLAB-LOWER       2
	define SLAB-TAILED-U    3
	define SLAB-TAILED-I    4
	define SLAB-ALL-BGR     5
	define SLAB-TAILED-BGR  6

	define [CyrCheShape top pyBar bodyType slabType] : glyph-proc
		local bar : top * [fallback pyBar 0.5]
		include : match bodyType
			[Just BODY-TAILED] : RightwardTailedBar RightSB 0 top
			__                 : VBar.r RightSB 0 top
		include : dispiro
			widths.lhs
			flat SB top [heading Downward]
			curl SB (bar + ArchDepthB - HalfStroke)
			g4 (Middle + CorrectionOMidS) (bar - HalfStroke)
			g4 (RightSB - 1 / 16) (bar - HalfStroke + DToothlessRise) [heading Rightward]

		local sf : SerifFrame.fromDf [DivFrame 1] top 0
		include : tagged 'serifLT' : match slabType
			[Just SLAB-ALL]        sf.lt.full
			[Just SLAB-TAILED-U]   sf.lt.full
			[Just SLAB-ALL-BGR]    sf.lt.outer
			[Just SLAB-TAILED-BGR] sf.lt.outer
			[Just SLAB-LOWER]      sf.lt.outer
			[Just SLAB-TAILED-I]   sf.lt.outer
			__                   : glyph-proc
		include : tagged 'SerifRT' : match slabType
			[Just SLAB-ALL]        sf.rt.full
			[Just SLAB-TAILED-U]   sf.rt.full
			[Just SLAB-ALL-BGR]    sf.rt.inner
			[Just SLAB-TAILED-BGR] sf.rt.inner
			__                   : glyph-proc
		include : tagged 'SerifRB' : match slabType
			[Just SLAB-ALL]        sf.rb.fullSide
			[Just SLAB-ALL-BGR]    sf.rb.fullSide
			[Just SLAB-LOWER]      sf.rb.outer
			__                   : glyph-proc

	create-glyph 'cyrl/Che' 0x427 : glyph-proc
		include : MarkSet.capital
		include : CyrCheShape CAP [if SLAB 0.45 0.35] BODY-STRAIGHT : if SLAB SLAB-ALL SLAB-NONE

	create-glyph 0x4B6 : composite-proc
		refer-glyph 'cyrl/Che'
		CyrDescender.rSideJut RightSB 0
	create-glyph 0x4CB : composite-proc
		refer-glyph 'cyrl/Che'
		CyrDescender.lSideJut (RightSB - HVContrast * Stroke) 0 (jut -- MidJutSide)

	create-glyph 'cyrl/che.standard' : glyph-proc
		include : MarkSet.e
		include : CyrCheShape XH [if SLAB 0.45 0.4] BODY-STRAIGHT
			if SLAB [if para.isItalic SLAB-LOWER SLAB-ALL] SLAB-NONE

	create-glyph 'cyrl/che.tailed' : glyph-proc
		include : MarkSet.e
		include : CyrCheShape XH [if SLAB 0.45 0.4] BODY-TAILED
			if SLAB [if para.isItalic SLAB-TAILED-I SLAB-TAILED-U] SLAB-NONE

	create-glyph 'cyrl/che.BGR.standard' : glyph-proc
		include : MarkSet.e
		include : CyrCheShape XH [if SLAB 0.45 0.4] BODY-STRAIGHT
			if SLAB [if para.isItalic SLAB-LOWER SLAB-ALL-BGR] SLAB-NONE

	create-glyph 'cyrl/che.BGR.tailed' : glyph-proc
		include : MarkSet.e
		include : CyrCheShape XH [if SLAB 0.45 0.4] BODY-TAILED
			if SLAB [if para.isItalic SLAB-TAILED-I SLAB-TAILED-BGR] SLAB-NONE

	select-variant 'cyrl/che' 0x447
	select-variant 'cyrl/che.BGR' (follow -- 'cyrl/che')

	create-glyph 0x4B7 : composite-proc
		refer-glyph 'cyrl/che.standard'
		CyrDescender.rSideJut RightSB 0
	create-glyph 0x4CC : composite-proc
		refer-glyph 'cyrl/che.standard'
		CyrDescender.lSideJut (RightSB - HVContrast * Stroke) 0 (jut -- MidJutSide)

	turned 'cyrl/Shha' 0x4BA 'cyrl/Che' Middle (CAP / 2)
	derive-composites 'cyrl/ShhaDescender' 0x526 'cyrl/Shha' [CyrDescender.rSideJut RightSB 0]

	define SwCheVBar : Math.min OverlayStroke (0.625 * (RightSB - SB - Stroke * 2 * HVContrast) / HVContrast)
	create-glyph 'cyrl/CheVBar' 0x4B8 : glyph-proc
		include [refer-glyph 'cyrl/Che'] AS_BASE
		local yc (CAP * [if SLAB 0.45 0.35] + Stroke * 0.1)
		include : VBar.m Middle (yc + LongJut * 0.8) (yc - LongJut * 0.8) SwCheVBar

	create-glyph 'cyrl/cheVBar' 0x4B9 : glyph-proc
		include [refer-glyph 'cyrl/che'] AS_BASE
		local yc (XH * [if SLAB 0.45 0.35] + Stroke * 0.1)
		include : VBar.m Middle (yc + LongJut * 0.8) (yc - LongJut * 0.8) SwCheVBar
