$$include '../../meta/macros.ptl'

import [mix clamp fallback] from"../../support/utils.mjs"
import [Dotless CvDecompose RightDependentTrigger RightDependentLink DependentSelector] from"../../support/gr.mjs"
import [DesignParameters] from"../../meta/aesthetics.mjs"

glyph-module

glyph-block Letter-Shared : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	glyph-block-export CreateAccentedComposition
	define [CreateAccentedComposition dst u srcGid accentGid]
		derive-multi-part-glyphs dst u { srcGid accentGid } : function [gns gr] : glyph-proc
			local { base mark } gns
			include [refer-glyph base] AS_BASE ALSO_METRICS
			include [refer-glyph mark]
			if (!gr && accentGid === 'dotAbove') : Dotless.set currentGlyph base

	glyph-block-export CreateOgonekComposition
	define [CreateOgonekComposition dst u srcGid]
		derive-multi-part-glyphs dst u { srcGid 'ogonekBelow' 'ogonekTR' } : function [gns gr] : glyph-proc
			local { base markBelow markTR } gns
			include [refer-glyph base] AS_BASE ALSO_METRICS
			if currentGlyph.baseAnchors.trailing
				then : include [refer-glyph markTR]
				else : include [refer-glyph markBelow]

	glyph-block-export CreateCommaCaronComposition
	define [CreateCommaCaronComposition dst u sourceGid]
		derive-multi-part-glyphs dst u { sourceGid 'commaTR' } : function [gns gr] : glyph-proc
			local { base comma } gns
			define baseGlyph : query-glyph base
			define commaOffset : (Width / 2) * [Math.pow (baseGlyph.advanceWidth / Width * 2) (2/3)]
			include : refer-glyph comma
			include : ApparentTranslate commaOffset 0
			include [refer-glyph base] AS_BASE ALSO_METRICS

	glyph-block-export CreateMultiAccentedComposition
	define [CreateMultiAccentedComposition dstGid unicode srcGid accentGids fDontDecompose]
		derive-glyphs dstGid unicode srcGid : lambda [src gr] : glyph-proc
			include [refer-glyph src] AS_BASE ALSO_METRICS
			foreach accentGid [items-of accentGids] : include [refer-glyph accentGid]
			if (!fDontDecompose && !gr) : CvDecompose.set currentGlyph { src :: accentGids }

	glyph-block-export CreateDependentComposite
	define [CreateDependentComposite gidDst unicode gidPart1 gidPart2Map] : begin
		local sourceGidList { gidPart1 }
		local keyToIndexMap {.}
		foreach { key g } [pairs-of gidPart2Map] : begin
			set keyToIndexMap.(key) sourceGidList.length
			sourceGidList.push g

		derive-multi-part-glyphs gidDst unicode sourceGidList : function [src] : glyph-proc
			local a src.0
			local selector : DependentSelector.get : query-glyph a
			local b src.(keyToIndexMap.(selector))

			include [refer-glyph a] AS_BASE ALSO_METRICS
			include [refer-glyph b]

	glyph-block-export SetGrekUpperTonos
	define [SetGrekUpperTonos kern] : glyph-proc
		set-base-anchor 'grekUpperTonos' kern (CAP - 0.75 * AccentStackOffset)


glyph-block Letter-Blackboard : begin
	glyph-block-import CommonShapes

	glyph-block-export BBS BBD
	define BBS : AdviceStroke 6
	define BBD : clamp (Width / 5.5) (Width / 4) (BBS * 2)

	glyph-block-export BBBarLeft
	define [BBBarLeft] : with-params [x yBot yTop [bbs BBS] [bbd BBD]] : union
		VBar.l x         yBot yTop bbs
		VBar.l (x + bbd) yBot yTop bbs
		HBar.t    x (x + bbd) yTop bbs
		HBar.b x (x + bbd) yBot bbs

	glyph-block-export BBBarCenter
	define [BBBarCenter] : with-params [x yBot yTop [bbs BBS] [bbd BBD]] : union
		VBar.m (x - bbd / 2) yBot yTop bbs
		VBar.m (x + bbd / 2) yBot yTop bbs
		HBar.t    (x - bbd / 2) (x + bbd / 2) yTop bbs
		HBar.b (x - bbd / 2) (x + bbd / 2) yBot bbs

	glyph-block-export BBBarRight
	define [BBBarRight] : with-params [x yBot yTop [bbs BBS] [bbd BBD]] : union
		VBar.r x         yBot yTop bbs
		VBar.r (x - bbd) yBot yTop bbs
		HBar.t    x (x - bbd) yTop bbs
		HBar.b x (x - bbd) yBot bbs

	glyph-block-import Mark-Shared-Metrics : markMiddle
	glyph-block-import Mark-Above : aboveMarkStack
	create-glyph 'mathbb/dotAbove' : glyph-proc
		set-width 0
		set-mark-anchor 'above' markMiddle XH markMiddle aboveMarkStack
		set-base-anchor 'aboveBraceL' markMiddle (XH + AccentStackOffset)
		set-base-anchor 'aboveBraceR' markMiddle (XH + AccentStackOffset)
		include : DotStrokeAt markMiddle (XH + AccentStackOffset) (BBD / 2 + BBS) BBS

glyph-block Letter-Shared-Metrics : begin
	glyph-block-export BowlXDepth
	define [BowlXDepth top bottom left right sw] : begin
		local trShrink : Math.pow (((right - left) / (top - bottom))) 0.5
		return : Math.max
			sw * 1.25 * HVContrast
			trShrink * [Math.min ((top - bottom) * 0.45) ((right - left + sw * HVContrast) * 0.875)]

glyph-block Letter-Shared-Shapes : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : ExtendAboveBaseAnchors ExtendBelowBaseAnchors

	glyph-block-export RightwardTailedBar
	define [RightwardTailedBar] : with-params [x low high [sw Stroke]] : begin
		local hookDepth : Math.max SideJut [AdviceStroke 8] (SB * 0.625)
		local hookTurn  : Math.max [AdviceStroke 16] (hookDepth - [AdviceStroke 16])
		local overshoot : O * 1
		return : dispiro
			flat (x - HVContrast * sw) high [widths.lhs.heading sw Downward]
			curl (x - HVContrast * sw) (low + overshoot + sw + hookTurn) [heading Downward]
			arcvh
			flat (x + hookTurn)  (low + overshoot) [heading Rightward]
			curl (x + hookDepth + sw * TanSlope) (low + overshoot)

	glyph-block-export InvRightwardTailedBar
	define [InvRightwardTailedBar] : with-params [x low high [sw Stroke]] : begin
		local hookDepth : Math.max SideJut [AdviceStroke 8] (SB * 0.625)
		local hookTurn  : Math.max [AdviceStroke 16] (hookDepth - [AdviceStroke 16])
		local overshoot : O * 1
		return : dispiro
			flat (x - HVContrast * sw) low [widths.rhs.heading sw Upward]
			curl (x - HVContrast * sw) (high - overshoot - sw - hookTurn) [heading Upward]
			arcvh
			flat (x + hookTurn)  (high - overshoot) [heading Rightward]
			curl (x + hookDepth + sw * TanSlope) (high - overshoot)

	glyph-block-export DToothlessRise
	glyph-block-export DMBlend
	define DToothlessRise : Hook * 0.25 + Stroke / 16
	define DMBlend          0.80

	glyph-block-export CurlyTail
	define [CurlyTail] : with-params [fine rinner xleft bottom right x2 y2 [adj 0.4] [adj2 0.4] [adj3 0]] : begin
		local ltr : right > xleft
		set right : right - fine * [if ltr 1 (-1)] * HVContrast
		local mid : mix [mix xleft right 0.5] (right - rinner * [if ltr 1 (-1)]) adj
		local midu : mix [mix xleft right 0.5] (right - rinner * [if ltr 1 (-1)]) adj2
		return : list
			g4.[if ltr 'right' 'left'].mid (mid + CorrectionOMidX * fine * adj3 * [if ltr 1 (-1)]) (bottom + fine + O) [widths [if ltr 0 fine] [if ltr fine 0]]
			archv 2
			g4.up.mid right (bottom + fine + rinner)
			arcvh 2
			g4   mid (bottom + fine + rinner * 2 - O)
			alsoThruThem {{0.25 0.06} {0.52 0.25}} important
			g4   x2 y2

	glyph-block-export HCurlyTail
	define [HCurlyTail fine wide rinner left m1 _right x1 x2 y2] : glyph-proc
		local right : _right - fine
		local mid : right - rinner + O
		include : dispiro
			widths.rhs wide
			flat left wide [heading Rightward]
			curl m1 wide [heading Rightward]
			archv 8
			g4   right (wide + rinner - O / 2) [widths.heading 0 fine {.x (-HVContrast) .y ((wide - fine) / (wide + rinner * 2 - O))}]
			arcvh 8
			g4.left.mid   mid (wide + rinner * 2 - O) [heading Leftward]
			quadControls ((x1 - mid) / (x2 - mid)) 0 8
			g4   x2 y2

	glyph-block-export ShoulderMidKnotLhs
	define [ShoulderMidKnotLhs cx cy fine sw dirX dirY] : begin
		local skew : shoulderMidSkew fine sw
		return : g4
			begin (cx + (dirY * CorrectionOMidX - skew - dirX * TanSlope) * sw)
			begin cy
			widths.heading sw 0 {.y dirY .x (skew)}

	glyph-block-export ShoulderMidKnotLhsRev
	define [ShoulderMidKnotLhsRev cx cy fine sw dirX dirY] : begin
		local skew : shoulderMidSkew fine sw
		return : g4
			begin (cx + (dirY * CorrectionOMidX + skew - dirX * TanSlope) * sw)
			begin cy
			widths.heading sw 0 {.y dirY .x (-skew)}

	glyph-block-export ShoulderMidKnotRhs
	define [ShoulderMidKnotRhs cx cy fine sw dirX dirY] : begin
		local skew : shoulderMidSkew fine sw
		return : g4
			begin (cx + (dirY * CorrectionOMidX + skew + dirX * TanSlope) * sw)
			begin cy
			widths.heading 0 sw {.y (-dirY) .x (skew)}

	glyph-block-export nShoulderKnots
	define [nShoulderKnots] : with-params [left right [fine ShoulderFine] [top XH] [bottom 0] [ada SmallArchDepthA] [adb SmallArchDepthB] [stroke Stroke] [fMask false] [leftY0 nothing]] : begin
		local skew : shoulderMidSkew fine stroke
		local middle : [mix (left - stroke * HVContrast) right 0.5] + (skew - CorrectionOMidX) * stroke
		return : list
			flat (left - fine * HVContrast) [fallback leftY0 (top - ada - 2)] [widths.rhs fine]
			curl (left - fine * HVContrast) (top - ada)
			arcvh
			ShoulderMidKnotRhs [mix (left - stroke * HVContrast) right 0.5] (top - O) fine stroke (+1) (-1)
			archv
			flat right (top - adb) [widths.rhs stroke]
			[if fMask corner curl] right bottom [widths.rhs.heading stroke Downward]
			if [not fMask] {} {[corner left bottom]}

	glyph-block-export nShoulder nShoulderMask
	define [nShoulder] : begin
		local a : Array.prototype.slice.call arguments 0
		glyph-proc
			include : dispiro : nShoulderKnots.apply null a

	define [nShoulderMask] : begin
		local a : Array.prototype.slice.call arguments 0
		glyph-proc
			include : spiro-outline : nShoulderKnots.apply null [a.concat { (fMask -- true) }]

	glyph-block-export : OBarLeft
	define OBarLeft : namespace
		define kSkewShift 0.5
		export : define [shape] : with-params [
				[top XH] [left SB] [right RightSB] [sw Stroke] [fine ShoulderFine]
				[ada SmallArchDepthA] [adb SmallArchDepthB]
			] : begin
			local skew : shoulderMidSkew fine sw
			local mt : [mix left right 0.5] + (skew + kSkewShift * TanSlope) * sw
			local mb : [mix left right 0.5] + (skew + kSkewShift * TanSlope) * sw
			return : dispiro
				widths.lhs fine
				flat (left + (sw - fine) * HVContrast) (top - ada - 0.01)
				curl (left + (sw - fine) * HVContrast) (0 + adb)
				arcvh
				g4   (mb) O [widths.lhs.heading sw {.y (1) .x (-skew)}]
				archv
				flat (right - OX) (0 + ada)
				curl (right - OX) (top - adb)
				arcvh
				g4   (mt) (top - O) [widths.lhs.heading sw {.y (-1) .x (-skew)}]
				archv
				flat (left + (sw - fine) * HVContrast) (top - ada) [widths.lhs fine]
				curl (left + (sw - fine) * HVContrast) (top - ada - 0.01)

		export : define [toothless] : with-params [
				[top XH] [left SB] [right RightSB] [rise SHook] [sw Stroke]
				[mBlend : Math.sqrt (1 / 2)] [ada SmallArchDepthA] [adb SmallArchDepthB]
			] : begin
			local fine ShoulderFine
			local skew : shoulderMidSkew fine sw
			local mt : [mix left right 0.5] + (skew + kSkewShift * TanSlope) * sw
			local mb : [mix left right 0.5] + CorrectionOMidX * sw
			return : dispiro
				g4 left rise [widths.lhs sw]
				alsoThru.g2 0.5 mBlend important
				g4.right.mid mb O
				archv
				flat (right - OX) (0 + ada)
				curl (right - OX) (top - adb)
				arcvh
				g4   (mt) (top - O) [widths.heading sw 0 {.y (-1) .x (-skew)}]
				archv
				flat (left + (sw - fine) * HVContrast) (top - ada) [widths fine 0]
				curl (left + (sw - fine) * HVContrast) (top - ada - 0.01) [widths fine 0]

		export : define [rounded] : with-params [
				[top XH] [left SB] [right RightSB] [yTerminal CAP] [sw Stroke] [fine ShoulderFine]
				[ada SmallArchDepthA] [adb SmallArchDepthB]
			] : begin
			local skew : shoulderMidSkew fine sw
			local mt : [mix left right 0.5] + (skew + kSkewShift * TanSlope) * sw
			local mb : [mix left right 0.5] + CorrectionOMidX * sw
			return : dispiro
				flat left yTerminal [widths.lhs.heading sw Downward]
				curl left [Math.min adb (yTerminal - 0.01)]
				arcvh
				g4 mb O
				archv
				flat (right - OX) (0 + ada)
				curl (right - OX) (top - adb)
				arcvh
				g4   (mt) (top - O) [widths.heading sw 0 {.y (-1) .x (-skew)}]
				archv
				flat (left + (sw - fine) * HVContrast) (top - ada + 0.01) [widths fine 0]
				curl (left + (sw - fine) * HVContrast) (top - ada) [widths fine 0]

		export : define [toothlessTop] : with-params [
				[top XH] [left SB] [right RightSB] [rise SHook] [sw Stroke]
				[mBlend : Math.sqrt (1 / 2)] [ada SmallArchDepthA] [adb SmallArchDepthB]
			] : begin
			local fine ShoulderFine
			local skew : shoulderMidSkew fine
			local mt : [mix left right 0.5] - CorrectionOMidX * sw
			local mb : [mix left right 0.5] + (skew + kSkewShift * TanSlope) * sw
			return : dispiro
				flat (left + (sw - fine) * HVContrast) (top - ada - 0.01) [widths fine 0]
				curl (left + (sw - fine) * HVContrast) (0 + adb) [widths fine 0]
				arcvh
				g4   (mb) O [widths.heading sw 0 {.y (1) .x (-skew)}]
				archv
				flat (right - OX) (0 + ada)
				curl (right - OX) (top - adb)
				arcvh
				g4   mt (top - O) [widths.lhs sw]
				alsoThru.g2 0.5 (1 - mBlend) important
				g4 left (top - rise) [widths.lhs sw]

		export : define [roundedTop] : with-params [
				[top XH] [left SB] [right RightSB] [yTerminal Descender] [sw Stroke]
				[fine ShoulderFine] [ada SmallArchDepthA] [adb SmallArchDepthB]
			] : begin
			local skew : shoulderMidSkew fine
			local mt : [mix left right 0.5] - CorrectionOMidX * sw
			local mb : [mix left right 0.5] + (skew + kSkewShift * TanSlope) * sw
			return : dispiro
				flat (left + (sw - fine) * HVContrast) (top - ada - 0.01) [widths fine 0]
				curl (left + (sw - fine) * HVContrast) (0 + adb) [widths fine 0]
				arcvh
				g4   (mb) O [widths.heading sw 0 {.y (1) .x (-skew)}]
				archv
				flat (right - OX) (0 + ada)
				curl (right - OX) (top - adb)
				arcvh
				g4   mt (top - O) [widths.lhs sw]
				archv
				flat left [Math.max (yTerminal + 0.01 - TanSlope * Stroke) (top - ada)]
				curl left yTerminal [widths.lhs.heading sw Downward]

	glyph-block-export : OBarRight
	define OBarRight : namespace
		export : define [shape] : with-params [
				[top XH] [left SB] [right RightSB] [sw Stroke] [fine ShoulderFine]
				[ada SmallArchDepthA] [adb SmallArchDepthB]
			] : new-glyph : glyph-proc
			include : OBarLeft.shape
				top -- top
				left -- left
				right -- right
				sw -- sw
				fine -- fine
				ada -- ada
				adb -- adb
			include : FlipAround [mix left right 0.5] (top / 2)

		export : define [toothless] : with-params [
				[top XH] [left SB] [right RightSB] [rise SHook] [sw Stroke]
				[mBlend : Math.sqrt (1 / 2)] [ada SmallArchDepthA] [adb SmallArchDepthB]
			] : new-glyph : glyph-proc
			include : OBarLeft.toothlessTop
				top -- top
				left -- left
				right -- right
				rise -- rise
				sw -- sw
				mBlend -- mBlend
				ada -- ada
				adb -- adb
			include : FlipAround [mix left right 0.5] (top / 2)

		export : define [rounded] : with-params [
				[top XH] [left SB] [right RightSB] [sw Stroke] [yTerminal CAP]
				[ada SmallArchDepthA] [adb SmallArchDepthB]
			] : new-glyph : glyph-proc
			include : OBarLeft.roundedTop
				top -- top
				left -- left
				right -- right
				sw -- sw
				yTerminal -- (top - yTerminal)
				ada -- ada
				adb -- adb
			include : FlipAround [mix left right 0.5] (top / 2)

	glyph-block-export FlatHookDepth
	define [FlatHookDepth df s] : object
		x : [fallback s 1] * [FlatHookDepthImpl [Math.min 1 : Math.sqrt df.div] HVContrast]
		y : [fallback s 1] * [FlatHookDepthImpl [Math.min 1 : Math.sqrt df.div]          1]
	define [FlatHookDepthImpl sHook sStroke] : begin
		define kFlathook : 15 / 16
		return : Math.max
			kFlathook * sHook * Hook
			sStroke * Stroke * 1.375
			Math.min
				kFlathook * sHook * Hook
				sStroke * Stroke * 1.625

	glyph-block-export ConnectedCedilla
	define [ConnectedCedilla src sel] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : add-glyph-dependency 'cedillaExtShapeBelow'
		include : difference
			new-glyph : glyph-proc
				include [refer-glyph src] AS_BASE ALSO_METRICS
				currentGlyph.clearGeometry
				include : refer-glyph 'cedillaExtShapeBelow'
			WithTransform [ApparentTranslate 0 (Stroke * 0.25)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 0.50)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 0.75)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 1.00)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 1.25)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 1.50)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 1.75)] [refer-glyph src]
			WithTransform [ApparentTranslate 0 (Stroke * 2.00)] [refer-glyph src]
		include : refer-glyph 'blankBelow'

	glyph-block-export SerifedArcStart
	define SerifedArcStart : namespace
		export : define [RtlLhs sx cx cy sw hook origBar] : begin
			local barSw : if origBar sw [ArcStartSerifWidth sw]
			local fine : barSw * [mix CThinB (ShoulderFine / Stroke) 0.5]
			return : list
				g4.up.start
					sx - (barSw - fine) * HVContrast
					cy - hook + O * 2
					widths.lhs.heading fine Upward
				arcvh.superness 2
				ShoulderMidKnotLhs cx (cy - O) fine sw (-1) (-1)
				archv

		export : define [LtrRhs sx cx cy sw hook origBar] : begin
			local barSw : if origBar sw [ArcStartSerifWidth sw]
			local fine : barSw * [mix CThinB (ShoulderFine / Stroke) 0.5]
			return : list
				g4.up.start
					sx + (barSw - fine) * HVContrast
					cy - hook + O * 2
					widths.rhs.heading fine Upward
				arcvh.superness 2
				ShoulderMidKnotRhs cx (cy - O) fine sw (+1) (-1)
				archv

	glyph-block-export SerifedArcEnd
	define SerifedArcEnd : namespace
		export : define [RtlRhs sx cx cy sw hook origBar] : begin
			local barSw : if origBar sw [ArcStartSerifWidth sw]
			local fine : barSw * [mix CThinB (ShoulderFine / Stroke) 0.5]
			return : list
				arcvh
				ShoulderMidKnotRhs cx (cy + O) fine sw (-1) (+1)
				archv.superness 2
				g4.up.end
					sx + (barSw - fine) * HVContrast
					cy + hook - O * 2
					widths.rhs.heading fine Upward

		export : define [LtrLhs sx cx cy sw hook origBar] : begin
			local barSw : if origBar sw [ArcStartSerifWidth sw]
			local fine : barSw * [mix CThinB (ShoulderFine / Stroke) 0.5]
			return : list
				arcvh
				ShoulderMidKnotLhs cx (cy + O) fine sw (+1) (+1)
				archv.superness 2
				g4.up.end
					sx - (barSw - fine) * HVContrast
					cy + hook - O * 2
					widths.lhs.heading fine Upward

	glyph-block-export InwardSlabArcStart
	define InwardSlabArcStart : namespace
		export : define [RtlLhs sx cx cy sw hook] : begin
			return : list
				g4 sx (cy - DToothlessRise) [widths.lhs sw]
				g4 (cx - CorrectionOMidX * sw) (cy - O)
				archv

		export : define [LtrRhs sx cx cy sw hook] : begin
			return : list
				g4 sx (cy - DToothlessRise) [widths.rhs sw]
				g4 (cx - CorrectionOMidX * sw) (cy - O)
				archv

	glyph-block-export InwardSlabArcEnd
	define InwardSlabArcEnd : namespace
		export : define [RtlRhs sx cx cy sw hook] : begin
			return : list
				arcvh
				g4 (cx + CorrectionOMidX * sw) (cy + O)
				g4 sx (cy + DToothlessRise) [widths.rhs sw]
		export : define [LtrLhs sx cx cy sw hook] : begin
			return : list
				arcvh
				g4 (cx + CorrectionOMidX * sw) (cy + O)
				g4 sx (cy + DToothlessRise) [widths.lhs sw]

	glyph-block-export ArcStartSerifWidth
	define [ArcStartSerifWidth stroke] : clamp (stroke * 0.875) stroke VJutStroke

	glyph-block-export ArcStartSerifDepth
	define [ArcStartSerifDepth hook] : hook - O * 2

	glyph-block-export : ArcStartSerif
	define ArcStartSerif : namespace
		export : define [L cx cy stroke hook overflow] : begin
			return : tagged 'arcStartSerifL' : VBar.l cx (cy - hook + O * 2) (cy + [fallback overflow 0]) [ArcStartSerifWidth stroke]
		export : define [R cx cy stroke hook overflow] : begin
			return : tagged 'arcStartSerifR' : VBar.r cx (cy - hook + O * 2) (cy + [fallback overflow 0]) [ArcStartSerifWidth stroke]

		export : define [InwardL cx cy stroke hook] : begin
			return : tagged 'arcStartSerifL' : VBar.l cx (cy - hook - DToothlessRise / 3) (cy - DToothlessRise) [ArcStartSerifWidth stroke]
		export : define [InwardR cx cy stroke hook] : begin
			return : tagged 'arcStartSerifR' : VBar.r cx (cy - hook - DToothlessRise / 3) (cy - DToothlessRise) [ArcStartSerifWidth stroke]

	glyph-block-export : ArcEndSerif
	define ArcEndSerif : namespace
		export : define [L cx cy stroke hook overflow] : begin
			return : tagged 'arcEndSerifL' : VBar.l cx (cy + hook - O * 2) (cy - [fallback overflow 0]) [ArcStartSerifWidth stroke]
		export : define [R cx cy stroke hook overflow] : begin
			return : tagged 'arcEndSerifR' : VBar.r cx (cy + hook - O * 2) (cy - [fallback overflow 0]) [ArcStartSerifWidth stroke]

		export : define [InwardL cx cy stroke hook] : begin
			return : tagged 'arcEndSerifL' : VBar.l cx (cy + hook + DToothlessRise / 2) (cy + DToothlessRise) [ArcStartSerifWidth stroke]
		export : define [InwardR cx cy stroke hook] : begin
			return : tagged 'arcEndSerifR' : VBar.r cx (cy + hook + DToothlessRise / 2) (cy + DToothlessRise) [ArcStartSerifWidth stroke]

	define DiagTailDefaultAngle 40

	glyph-block-export DiagonalTailStdDepth
	define [DiagonalTailStdDepth df sw] : Math.max (0.5 * sw)
		df.div * para.unitWidthScalar * [Math.hypot HookX Hook] - 0.25 * sw

	glyph-block-export DiagonalTailInnerRadius
	define [DiagonalTailInnerRadius] : Math.max (XH / 32) (0.5 * [AdviceStroke2 24 32 XH])

	glyph-block-export DiagonalTailF
	define [DiagonalTailF sign df cx cy rIn angle depth sw] : begin
		define tailAngle : angle / 180 * Math.PI
		define sinAngle : Math.sin tailAngle
		define cosAngle : Math.cos tailAngle

		define mocFine : [AdviceStroke 3] / Stroke * sw
		define mocSwMid : mix sw mocFine (2 / 3)
		define fine : mocFine / [mix 1 HVContrast 0.375]
		define swMid : mix sw fine 0.7

		define dxTurn : 0.5 * sw * HVContrast + rIn * df.div
		define dxTurnObl : if (sign > 0) (-0.75 * TanSlope * rIn) (0.75 * TanSlope * rIn)
		define dyTurn : 0.5 * mocSwMid
		define dxTailStart : dxTurn + sinAngle * (rIn + 0.5 * mocFine * [mix 1 HVContrast sinAngle])
		define dyTailStart : dyTurn + (1 - cosAngle + [if (sign > 0) 0 (TanSlope)]) * (rIn + 0.5 * mocFine)
		define dxDepth : (depth - 0.5 * sw) * cosAngle
		define dyDepth : (depth - 0.5 * sw) * sinAngle
		return : list
			g4.[if (sign > 0) "right" "left"].mid
				cx + sign * dxTurn + dxTurnObl
				cy + O + dyTurn
				if (sign > 0)
					widths.center.heading swMid Rightward
					widths.center.heading swMid Leftward
			if (sign <= 0) {} : alsoThruThem
				list
					DiagonalTailFArc2K tailAngle (1 / 4)
					DiagonalTailFArc2K tailAngle (2 / 4)
					DiagonalTailFArc2K tailAngle (3 / 4)
			# if (sign <= 0) {} : alsoThru.g2
			# 	[Math.sin (tailAngle / 2)] / [Math.sin tailAngle]
			# 	(1 - [Math.cos (tailAngle / 2)]) / (1 - [Math.cos tailAngle])
			# 	widths.center : mix swMid fine (1 / 2)
			flat (cx + sign * dxTailStart) (cy + O + dyTailStart) [widths.center fine]
			curl (cx + sign * dxTailStart + sign * dxDepth) (cy + O + dyTailStart + dyDepth)
	define [DiagonalTailFArc2K tailAngle t] : list
		[Math.sin (t * tailAngle)] / [Math.sin tailAngle]
		(1 - [Math.cos (t * tailAngle)]) / (1 - [Math.cos tailAngle])
		begin t

	glyph-block-export DiagonalTailR
	define [DiagonalTailR df cx cy depth sw] : begin
		define rInY : DiagonalTailInnerRadius
		return : list
			curl cx (cy + sw + rInY)
			arcvh 8
			DiagonalTailF (+1) df cx cy rInY DiagTailDefaultAngle depth sw

	glyph-block-export DiagonalTailL
	define [DiagonalTailL df cx cy depth sw] : begin
		define rInY : DiagonalTailInnerRadius
		return : list
			curl cx (cy + sw + rInY)
			arcvh 8
			DiagonalTailF (-1) df cx cy rInY DiagTailDefaultAngle depth sw

	define [JutIn left right jut swRef hSplit] : begin
		local ink : HVContrast * swRef
		local gap : (right - left - hSplit * ink) / (hSplit - 1)
		Math.min jut (0.5 * ink + [Math.max (Stroke * TanSlope) (0.375 * gap)])

	class CSerifFrame
		public [new top bot left right swRef swSerif div hSplit] : begin
			set this.top     top
			set this.bot     bot
			set this.left    left
			set this.right   right
			set this.swRef   swRef
			set this.swSerif swSerif
			set this.div     div
			set this.hSplit  hSplit

			local ink : HVContrast * swRef
			local gap : (right - left - hSplit * ink) / (hSplit - 1)


			local jutFS   MidJutSide
			local jut     : mix (0.5 * HVContrast * swRef) Jut [Math.min 1 : div * 2.25 / hSplit]
			local sideJut : jut - 0.5 * ink

			local jutIn     : JutIn left right jut swRef hSplit
			local sideJutIn : jutIn - 0.5 * ink

			local lBarCenter : left + 0.5 * ink
			local lBarInner  : left + 1.0 * ink
			local rBarCenter : right - 0.5 * ink
			local rBarInner  : right - 1.0 * ink

			set this.jut     jut
			set this.sideJut sideJut

			set this.enoughSpaceForFullSerifs : 0.5 * ink + 0.375 * gap > para.refJut

			set this.lt : object
				full        : tagged 'serifLT' : HSerif.mtAsymmetric lBarCenter top jut jutIn swSerif
				[fullExt s] : tagged 'serifLT' : HSerif.mtAsymmetric lBarCenter top jut [JutIn left right jut swRef s] swSerif
				fullSide    : tagged 'serifLT' : HSerif.mtAsymmetric lBarCenter top jut jutFS swSerif
				outer       : tagged 'serifLT' : HSerif.lt left top sideJut swSerif
				inner       : tagged 'serifLT' : HSerif.rt lBarInner top sideJutIn swSerif
			set this.rt : object
				full        : tagged 'serifRT' : HSerif.mtAsymmetric rBarCenter top jutIn jut swSerif
				[fullExt s] : tagged 'serifRT' : HSerif.mtAsymmetric rBarCenter top [JutIn left right jut swRef s] jut swSerif
				fullSide    : tagged 'serifRT' : HSerif.mtAsymmetric rBarCenter top jutFS jut swSerif
				outer       : tagged 'serifRT' : HSerif.rt right top sideJut swSerif
				inner       : tagged 'serifRT' : HSerif.lt rBarInner top sideJutIn swSerif
			set this.lb : object
				full        : tagged 'serifLB' : HSerif.mbAsymmetric lBarCenter bot jut jutIn swSerif
				[fullExt s] : tagged 'serifLB' : HSerif.mbAsymmetric lBarCenter bot jut [JutIn left right jut swRef s] swSerif
				fullSide    : tagged 'serifLB' : HSerif.mbAsymmetric lBarCenter bot jut jutFS swSerif
				outer       : tagged 'serifLB' : HSerif.lb left bot sideJut swSerif
				inner       : tagged 'serifLB' : HSerif.rb lBarInner bot sideJutIn swSerif
			set this.rb : object
				full        : tagged 'serifRB' : HSerif.mbAsymmetric rBarCenter bot jutIn jut swSerif
				[fullExt s] : tagged 'serifRB' : HSerif.mbAsymmetric rBarCenter bot [JutIn left right jut swRef s] jut swSerif
				fullSide    : tagged 'serifRB' : HSerif.mbAsymmetric rBarCenter bot jutFS jut swSerif
				outer       : tagged 'serifRB' : HSerif.rb right bot sideJut swSerif
				inner       : tagged 'serifRB' : HSerif.lb rBarInner bot sideJutIn swSerif

			set this.mb : object
				full : tagged 'serifMB' : HSerif.mbAsymmetric [mix lBarCenter rBarCenter 0.5] bot jutIn jutIn swSerif
				left : tagged 'serifMB' : HSerif.mbAsymmetric [mix lBarCenter rBarCenter 0.5] bot jutIn 0 swSerif
				right : tagged 'serifMB' : HSerif.mbAsymmetric [mix lBarCenter rBarCenter 0.5] bot 0 jutIn swSerif
			set this.mt : object
				full : tagged 'serifMT' : HSerif.mtAsymmetric [mix lBarCenter rBarCenter 0.5] top jutIn jutIn swSerif

		public [slice l r] : begin
			local ink : this.swRef * HVContrast
			local gap : (this.right - this.left - this.hSplit * ink) / (this.hSplit - 1)
			local l1 : this.left + (ink + gap) * l
			local r1 : this.left + (ink + gap) * r + ink
			return : new CSerifFrame this.top this.bot l1 r1 this.swRef this.swSerif this.div (r - l + 1)

	glyph-block-export SerifFrame
	define [SerifFrame] : with-params [top bot left right [swRef Stroke] [swSerif swRef] [div 1] [hSplit 2]] : begin
		return : new CSerifFrame top bot left right swRef swSerif div hSplit

	define SerifFrame.fromDf : function [] : with-params [df top bot [swSerif df.mvs]] : begin
		return : SerifFrame top bot df.leftSB df.rightSB
			swRef -- df.mvs
			div -- df.div
			hSplit -- [Math.max 2 df.hPack]
			swSerif -- swSerif


	glyph-block-export WithSerifOverflowMask
	define [WithSerifOverflowMask fEnable top bottom left right s] : begin
		if [not fEnable] : return s

		local leftCenter : left + HalfStroke * HVContrast
		local rightCenter : right - HalfStroke * HVContrast
		local adj : TanSlope * Stroke * DesignParameters.serifShiftX
		return : intersection s : union
			Rect top [mix top bottom 0.5] (leftCenter - Jut) (rightCenter + Jut - adj)
			Rect [mix top bottom 0.5] bottom (leftCenter - Jut + adj) (rightCenter + Jut)

	glyph-block-export LegShape
	define [LegShape] : with-params [ztop zbot xb [fine Stroke]] : glyph-proc
		include : dispiro
			widths.lhs fine
			flat ztop.x ztop.y [heading Downward]
			curl xb [mix (zbot.y + LongJut) ztop.y 0.25]
			alsoThruThem {{0.5 0.94}}
			straight.left.end zbot.x (zbot.y + fine) [heading Leftward]

	glyph-block-export UpwardHookShape
	define [UpwardHookShape] : with-params [left right ybegin yend [bottom O] ada adb [sw Stroke]] : glyph-proc
		include : dispiro
			widths.lhs sw
			flat left ybegin [heading Downward]
			curl left [Math.min (ybegin - 0.01) adb]
			arcvh
			g4 [mix left right 0.5] bottom [heading Rightward]
			archv
			flat right ada
			curl right yend [heading Upward]

	# Generic "connected" vertical hooks
	glyph-block-export VerticalHook
	define VerticalHook : namespace
		export : define [m] : with-params [x y xDepth yDepth [sw Stroke] [yExtension 0]] : begin
			local hd : FlatHookDepth [DivFrame 1]
			local hdX : if (xDepth < 0) (-hd.x) hd.x
			local hdY : if (yDepth < 0) (-hd.y) hd.y

			local y2 : if (yDepth > 0)
				Math.min (y - yDepth + hd.y - 0.25 * sw) (y - 0.01)
				Math.max (y - yDepth - hd.y + 0.25 * sw) (y + 0.01)

			local x3 : if (xDepth > 0)
				Math.min (x + xDepth - 0.01) (x + hd.x - 0.25 * sw * HVContrast)
				Math.max (x + xDepth + 0.01) (x - hd.x + 0.25 * sw * HVContrast)

			dispiro [widths.center sw]
				flat x (y + yExtension) [heading : if (yDepth > 0) Downward Upward]
				curl x  y2              [heading : if (yDepth > 0) Downward Upward]
				arcvh
				flat x3           (y - yDepth)
				curl (x + xDepth) (y - yDepth)

		export : define [l] : with-params [x y xDepth yDepth [sw Stroke] [yExtension 0]]
			m
				x -- x + 0.5 * sw * HVContrast
				y -- y
				xDepth -- xDepth
				yDepth -- yDepth
				sw -- sw
				yExtension -- yExtension

		export : define [r] : with-params [x y xDepth yDepth [sw Stroke] [yExtension 0]]
			m
				x -- x - 0.5 * sw * HVContrast
				y -- y
				xDepth -- xDepth
				yDepth -- yDepth
				sw -- sw
				yExtension -- yExtension

	do "Descender shapes"
		define [xLinkStroke xLink x yAttach sw]
			if (xLink == nothing) [no-shape] : HBar.b
				Math.min xLink (x - 0.5 * HVContrast * sw)
				Math.max xLink (x + 0.5 * HVContrast * sw)
				begin yAttach

		define [Descenders Impl] : namespace
			export : define Sw ArcStartSerifWidth
			export : define [adviceGap refSw] : HVContrast * [Sw refSw] + [Math.max (Width / 16) [AdviceStroke 12]]

			export : define [m] : with-params [x y xLink [yAttach y] [yOverflow 0] [refSw Stroke] [maskOut null]] : begin
				local sw : Sw refSw
				return : Impl x y xLink yAttach yOverflow sw maskOut
			export : define [l] : with-params [x y xLink [yAttach y] [yOverflow 0] [refSw Stroke] [maskOut null]] : begin
				local sw : Sw refSw
				return : Impl (x + 0.5 * sw * HVContrast) y xLink yAttach yOverflow sw maskOut
			export : define [r] : with-params [x y xLink [yAttach y] [yOverflow 0] [refSw Stroke] [maskOut null]] : begin
				local sw : Sw refSw
				return : Impl (x - 0.5 * sw * HVContrast) y xLink yAttach yOverflow sw maskOut

			export : define [lExt] : with-params [x y xLink [yAttach y] [yOverflow 0] [sw Stroke] [maskOut null]] : begin
				return : Impl (x + 0.5 * sw * HVContrast) y xLink yAttach yOverflow sw maskOut
			export : define [mExt] : with-params [x y xLink [yAttach y] [yOverflow 0] [sw Stroke] [maskOut null]] : begin
				return : Impl x y xLink yAttach yOverflow sw maskOut
			export : define [rExt] : with-params [x y xLink [yAttach y] [yOverflow 0] [sw Stroke] [maskOut null]] : begin
				return : Impl (x - 0.5 * sw * HVContrast) y xLink yAttach yOverflow sw maskOut

			export : define [lSideJut] : with-params [x y [yOverflow 0] [refSw Stroke] [jut Jut] [sideJut nothing]] : begin
				local sj : fallback sideJut (jut - 0.5 * HVContrast * refSw)
				local sw : Sw refSw
				local xLink : x + 0.5 * HVContrast * refSw - TanSlope * sw
				local xPos : x + 0.5 * HVContrast * sw - sj + sw * TanSlope * (DesignParameters.serifShiftX - 1)
				return : Impl xPos y xLink y yOverflow sw

			export : define [rSideJut] : with-params [x y [yOverflow 0] [refSw Stroke] [jut Jut] [sideJut nothing]] : begin
				local sj : fallback sideJut (jut - 0.5 * HVContrast * refSw)
				local sw : Sw refSw
				local xLink : x - 0.5 * HVContrast * refSw
				local xPos : x - 0.5 * HVContrast * sw + sj + sw * TanSlope * (DesignParameters.serifShiftX + 1)
				return : Impl xPos y xLink y yOverflow sw

		# Descender of cyrillics
		glyph-block-export CyrDescender
		define CyrDescender : Descenders : function [x y xLink yAttach yOverflow sw] : glyph-proc
			include : ExtendBelowBaseAnchors (y - LongJut + 0.5 * Stroke)
			include : union
				xLinkStroke xLink x yAttach sw
				VBar.m x yAttach (y - LongJut + 0.5 * Stroke) sw

		glyph-block-export CyrTailDescender
		define CyrTailDescender : Descenders : function [x y xLink yAttach yOverflow sw] : glyph-proc
			include : ExtendBelowBaseAnchors (y - LongJut + 0.5 * Stroke)
			include : union
				xLinkStroke xLink x yAttach sw
				intersection
					MaskBelow (yAttach + Stroke)
					MaskAbove (y - LongJut + 0.5 * Stroke)
					ExtLineCenter 16 sw (x + 0.24 * Descender) (y + 0.5 * sw + Descender) x y

		# Palatal Hooks
		glyph-block-export PalatalHook
		define PalatalHook : Descenders : function [x y xLink yAttach yOverflow sw maskOut] : glyph-proc
			local fullDepth : 0 - Descender - 0.5 * sw - O
			include : ExtendBelowBaseAnchors (y + Descender)
			include : difference
				union
					xLinkStroke xLink x yAttach sw
					VerticalHook.m
						x -- x
						y -- (y - (fullDepth - TailY))
						xDepth -- (-TailX)
						yDepth -- TailY
						sw -- sw
						yExtension -- [Math.max 0 (yAttach + yOverflow - y + (fullDepth - TailY))]
				if maskOut maskOut [no-shape]

		# Retroflex hooks
		glyph-block-export RetroflexHook
		define RetroflexHook : Descenders : function [x y xLink yAttach yOverflow sw] : glyph-proc
			local fullDepth : 0 - Descender - 0.5 * sw - O
			include : ExtendBelowBaseAnchors (y + Descender)
			include : union
				xLinkStroke xLink x yAttach sw
				VerticalHook.m
					x -- x
					y -- (y - (fullDepth - TailY))
					xDepth -- TailX
					yDepth -- TailY
					sw -- sw
					yExtension -- [Math.max 0 (yAttach + yOverflow - y + (fullDepth - TailY))]

		# Cyrillic "Middle Hook" Characters
		glyph-block-export MidHook
		define MidHook : namespace
			export : define [general] : with-params [left right top [bottom 0] ada adb [sw Stroke] [xDepth (-HookX)]] : composite-proc
				nShoulder
					left -- left
					right -- right
					top -- top
					bottom -- bottom
					ada -- ada
					adb -- adb
					stroke -- sw
				VerticalHook.r right bottom xDepth Hook sw

			# "Standard" version for El, Pe, En with MidHook
			export : define [m df top] : begin
				local xm : df.middle + 0.5 * df.mvs * HVContrast
				general
					left   -- xm
					right  -- df.rightSB
					top    -- top * 0.625 + df.mvs / 4
					ada    -- ArchDepthA
					adb    -- ArchDepthB
					sw     -- df.mvs
					xDepth -- (-[Math.max (df.mvs * HVContrast) : Math.min HookX (0.5 * (df.rightSB - df.leftSB - 2 * df.mvs * HVContrast))])

		# Hook for Eng shape
		glyph-block-export EngHook
		define [EngHook] : with-params [x yStart yEnd [sw Stroke]] : begin
			return : VerticalHook.r x (yEnd + Hook + 0.5 * sw) (-HookX) Hook
				yExtension -- [Math.max 0 (yStart - (yEnd + Hook + 0.5 * sw))]

		# Upward hook shape
		glyph-block-export TopHook
		define TopHook : namespace
			export : define [lBarOuter] : with-params [x yBot yTop [sw Stroke]] : glyph-proc
				local fullDepth : (Ascender - XH) - 0.5 * sw - O
				local yHookStart : yTop + (fullDepth - TailY)
				include : ExtendAboveBaseAnchors (yTop + (Ascender - XH))
				include : union
					VBar.l x yBot yHookStart sw
					VerticalHook.l x yHookStart TailX (-TailY) (sw -- sw)

			export : define [lBarInner] : with-params [x yBot yTop [sw Stroke]] : glyph-proc
				local yHookStart : yTop - O - TailY - 0.5 * sw
				include : union
					VBar.l x yBot yHookStart sw
					VerticalHook.l x yHookStart TailX (-TailY) (sw -- sw)

			export : define [rBarOuter] : with-params [x yBot yTop [sw Stroke]] : begin
				return : lBarOuter (x - HVContrast * sw) yBot yTop (sw -- sw)
			export : define [rBarInner] : with-params [x yBot yTop [sw Stroke]] : begin
				return : lBarInner (x - HVContrast * sw) yBot yTop (sw -- sw)

			export : define [mBarOuter] : with-params [x yBot yTop [sw Stroke]] : begin
				return : lBarOuter (x - 0.5 * HVContrast * sw) yBot yTop (sw -- sw)
			export : define [mBarInner] : with-params [x yBot yTop [sw Stroke]] : begin
				return : lBarInner (x - 0.5 * HVContrast * sw) yBot yTop (sw -- sw)

			export : define [arcStart] : with-params [cx cy hookY [refSw Stroke]] : begin
				local sw : ArcStartSerifWidth refSw
				local fullDepth : (Ascender - XH) - 0.5 * sw - O
				local yHookStart : cy + (fullDepth - TailY)
				return : union
					VBar.r cx (cy - hookY + O * 2) yHookStart sw
					VerticalHook.r cx yHookStart TailX (-TailY) sw

		# Leftward hook
		glyph-block-export LeftHook
		define [LeftHook x y xextend] : glyph-proc
			local fine : AdviceStroke 4.25
			include : dispiro
				widths.lhs fine
				flat [fallback xextend : x + 1] y
				curl x y
				archv 8
				g4.down.end (x - LeftHook.extension) (y - HookX) [heading Downward]
		set LeftHook.extension [Math.max (Width * 0.2) ([AdviceStroke 4.25] * 1.5)]

	do "Belt overlays"
		define [BeltOverlayAt x y] : begin
			local fine : AdviceStroke 4.5
			local r : XH * 0.05
			return : dispiro
				widths.rhs fine
				flat x (y + r) [heading Leftward]
				curl (x - HalfStroke - r * 1.5) (y + r)
				archv
				g4.down.mid (x - HalfStroke - r * 2.5) y [heading Downward]
				arcvh
				flat (x - HalfStroke - r * 1.5) (y - r)
				curl (x + HalfStroke + r * 1.5 + fine) (y - r)

		glyph-block-export BeltOverlay
		define [BeltOverlay top xMiddle] : BeltOverlayAt xMiddle (0.5 * top)
		set BeltOverlay.at BeltOverlayAt

	do "Letter bar overlays"
		glyph-block-export LetterBarOverlay
		define [LetterBarOverlay] : with-params [x y space refSw pXInSw sw] : begin
			local {xLeftSpace xRightSpace} space
			local xLeftEdge  : x - pXInSw * refSw * HVContrast
			local xRightEdge : x + (1 - pXInSw) * refSw * HVContrast
			local p : (xLeftEdge - xLeftSpace) / ((xRightSpace - xRightEdge) + (xLeftEdge - xLeftSpace))
			local xC : mix xLeftEdge xRightEdge [mix 0.5 (1 - p) 0.5]
			local jut : 0.75 * LongJut
			return : HOverlayBar
				Math.min (xLeftEdge - SideJut)
					Math.max (xC - jut) [mix xLeftSpace xLeftEdge 0.3]
				Math.max (xRightEdge + SideJut)
					Math.min [mix xRightSpace xRightEdge 0.3] (xC + jut)
				begin y
				begin sw

		set LetterBarOverlay.l : function []
			with-params [x y [space {0 Width}] [refSw Stroke] [sw OverlayStroke]] : begin
				LetterBarOverlay x y (space -- space) (refSw -- refSw) (pXInSw -- 0) (sw -- sw)
		set LetterBarOverlay.m : function []
			with-params [x y [space {0 Width}] [refSw Stroke] [sw OverlayStroke]] : begin
				LetterBarOverlay x y (space -- space) (refSw -- refSw) (pXInSw -- 0.5) (sw -- sw)
		set LetterBarOverlay.r : function []
			with-params [x y [space {0 Width}] [refSw Stroke] [sw OverlayStroke]] : begin
				LetterBarOverlay x y (space -- space) (refSw -- refSw) (pXInSw -- 1) (sw -- sw)

		define [calcYAndSw bot top py sw] : begin
			local y : mix bot top py
			local sw1 : Math.min sw (1.25 * (top - bot) * py) (1.25 * (top - bot) * (1 - py))
			return { y sw1 }

		set LetterBarOverlay.l.in : function []
			with-params [x bot top [py 0.5] [space {0 Width}] [refSw Stroke] [sw OverlayStroke]]
			: begin
				local { y sw1 } : calcYAndSw bot top py sw
				LetterBarOverlay x y (space -- space) (refSw -- refSw) (pXInSw -- 0) (sw -- sw1)
		set LetterBarOverlay.m.in : function []
			with-params [x bot top [py 0.5] [space {0 Width}] [refSw Stroke] [sw OverlayStroke]]
			: begin
				local { y sw1 } : calcYAndSw bot top py sw
				LetterBarOverlay x y (space -- space) (refSw -- refSw) (pXInSw -- 0.5) (sw -- sw1)
		set LetterBarOverlay.r.in : function []
			with-params [x bot top [py 0.5] [space {0 Width}] [refSw Stroke] [sw OverlayStroke]]
			: begin
				local { y sw1 } : calcYAndSw bot top py sw
				LetterBarOverlay x y (space -- space) (refSw -- refSw) (pXInSw -- 1) (sw -- sw1)
