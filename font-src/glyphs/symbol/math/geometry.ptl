$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"

glyph-module

glyph-block Symbol-Math-Geometry : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	local kBox : 2 / 3
	local leftBox : SB * kBox
	local rightBox : Width - SB * kBox
	local radiusBox : (rightBox - leftBox) / 2
	local topBox : SymbolMid + radiusBox
	local bottomBox : SymbolMid - radiusBox

	create-glyph 'mathRightTriangle' 0x22BF : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
			union
				dispiro [widths.lhs GeometryStroke] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.lhs GeometryStroke] [flat rightBox bottomBox] [curl rightBox topBox]
				dispiro [widths.lhs GeometryStroke] [flat rightBox topBox] [curl leftBox bottomBox]

	create-glyph 'angle' 0x2220 : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
			union
				dispiro [widths.lhs GeometryStroke] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.lhs GeometryStroke] [flat rightBox topBox] [curl leftBox bottomBox]

	turned 'turnAngle' 0x29A2 'angle' Middle SymbolMid

	create-glyph 'revAngle' 0x29A3 : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox topBox
				corner leftBox bottomBox
				corner rightBox bottomBox
			union
				dispiro [widths.lhs GeometryStroke] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.rhs GeometryStroke] [flat leftBox topBox] [curl rightBox bottomBox]

	create-glyph 'measuredAngle' 0x2221 : glyph-proc
		include [refer-glyph 'angle'] AS_BASE ALSO_METRICS
		include : intersection
			spiro-outline
				corner leftBox (bottomBox - [Math.tan (15 / 180 * Math.PI)] * radiusBox)
				corner rightBox (bottomBox - [Math.tan (15 / 180 * Math.PI)] * radiusBox)
				corner rightBox (bottomBox + 2 * [Math.tan (60 / 180 * Math.PI)] * radiusBox)
				corner leftBox bottomBox
			RingStrokeAt leftBox bottomBox (1.2 * radiusBox + GeometryStroke) GeometryStroke

	create-glyph 'sphericalAngle' 0x2222 : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox SymbolMid
				corner rightBox bottomBox
				corner rightBox topBox
			union
				dispiro [widths.lhs GeometryStroke] [flat leftBox SymbolMid] [curl rightBox bottomBox]
				dispiro [widths.lhs GeometryStroke] [flat rightBox topBox] [curl leftBox SymbolMid]
		include : intersection
			spiro-outline
				corner leftBox SymbolMid
				corner rightBox (SymbolMid - 2 * [Math.tan (45 / 180 * Math.PI)] * radiusBox)
				corner rightBox (SymbolMid + 2 * [Math.tan (45 / 180 * Math.PI)] * radiusBox)
			RingStrokeAt leftBox SymbolMid (1.2 * radiusBox + GeometryStroke) GeometryStroke

	create-glyph 'rightAngle' 0x221F : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
				corner leftBox topBox
			union
				dispiro [widths.lhs GeometryStroke] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.lhs GeometryStroke] [flat leftBox topBox] [curl leftBox bottomBox]

	create-glyph 'rightAngleWithArc' 0x22BE : glyph-proc
		include [refer-glyph 'rightAngle'] AS_BASE ALSO_METRICS
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
				corner leftBox topBox
			RingStrokeAt leftBox bottomBox (1.2 * radiusBox + GeometryStroke) GeometryStroke

	create-glyph 'revRightAngle' 0x2BFE : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
				corner leftBox topBox
			union
				dispiro [widths.lhs GeometryStroke] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.rhs GeometryStroke] [flat rightBox topBox] [curl rightBox bottomBox]

	create-glyph 'sineWave' 0x223F : glyph-proc
		define N 64
		local knots {}
		define [Wave x] : [Math.sin x] + 0.05 * [Math.sin (3 * x)]
		foreach t [range 0 till N] : begin
			knots.push : g2
				mix leftBox rightBox (t / N)
				mix bottomBox topBox : 0.5 + 0.5 * [Wave : 2 * Math.PI * t / N]

		include : dispiro [widths.center GeometryStroke] knots
