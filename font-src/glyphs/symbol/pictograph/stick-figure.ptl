$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Box] from"../../../support/geometry/box.mjs"
import [Transform] from"../../../support/geometry/transform.mjs"

glyph-module

glyph-block Symbol-Pictograph-Stick-Figure : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define PictographSw : AdviceStroke 4

	glyph-block-export StickFigureKit
	define [StickFigureKit box tfm sw] : namespace
		export : define [RoundSeg h1 v1 h2 v2 cl cr] : glyph-proc
			local z1 : tfm.applyXY [mix box.left box.right h1] [mix box.bottom box.top v1]
			local z2 : tfm.applyXY [mix box.left box.right h2] [mix box.bottom box.top v2]

			include : dispiro
				disable-contrast
				widths.center sw
				corner z1.x z1.y
				corner z2.x z2.y

			if cl : include : CircleDotAt z1.x z1.y (sw / 2)
			if cr : include : CircleDotAt z2.x z2.y (sw / 2)

		define [ArcImpl mode h1 v1 h2 v2 cl cr] : glyph-proc
			local z1 : tfm.applyXY [mix box.left box.right h1] [mix box.bottom box.top v1]
			local z2 : tfm.applyXY [mix box.left box.right h2] [mix box.bottom box.top v2]

			local zc : tfm.applyXY [mix box.left box.right : if mode h1 h2] [mix box.bottom box.top : if mode v2 v1]

			local innerKnots {}
			foreach j [range 1 64] : begin
				local theta : (Math.PI / 2) * (j / 64)
				local c : Math.pow [Math.cos theta] (2 / DesignParameters.superness)
				local s : Math.pow [Math.sin theta] (2 / DesignParameters.superness)

				local mx : mix box.left   box.right [mix h1 h2 : if mode (1 - c) s      ]
				local my : mix box.bottom box.top   [mix v1 v2 : if mode s       (1 - c)]
				local zm : tfm.applyXY mx my

				innerKnots.push : g4 zm.x zm.y unimportant

			include : dispiro
				disable-contrast
				widths.center sw
				flat z1.x z1.y
				curl [mix z1.x zc.x 0.001] [mix z1.y zc.y 0.001]
				* innerKnots
				flat [mix z2.x zc.x 0.001] [mix z2.y zc.y 0.001]
				curl z2.x z2.y

			if cl : include : CircleDotAt z1.x z1.y (sw / 2)
			if cr : include : CircleDotAt z2.x z2.y (sw / 2)

		export : define [ArcVH h1 v1 h2 v2 cl cr] : ArcImpl 1 h1 v1 h2 v2 cl cr
		export : define [ArcHV h1 v1 h2 v2 cl cr] : ArcImpl 0 h1 v1 h2 v2 cl cr

		export : define [Box h1 v1 h2 v2] : glyph-proc
			local z1 : tfm.applyXY [mix box.left box.right h1] [mix box.bottom box.top v1]
			local z2 : tfm.applyXY [mix box.left box.right h2] [mix box.bottom box.top v1]
			local z3 : tfm.applyXY [mix box.left box.right h2] [mix box.bottom box.top v2]
			local z4 : tfm.applyXY [mix box.left box.right h1] [mix box.bottom box.top v2]

			include : spiro-outline
				corner z1.x z1.y
				corner z2.x z2.y
				corner z3.x z3.y
				corner z4.x z4.y

		export : define [Circ h1 v1 pr] : glyph-proc
			local z1 : tfm.applyXY [mix box.left box.right h1] [mix box.bottom box.top v1]
			include : DotAt z1.x z1.y (pr * (box.top - box.bottom))

	glyph-block-export PointingHandShape
	define [PointingHandShape box tfm sw] : begin
		local Kit : StickFigureKit box tfm sw
		return : union
			Kit.RoundSeg (0 / 24) (0 / 8) (0 / 24) (8 / 8) 1 1
			Kit.RoundSeg (3 / 24) (7 / 8) (0 / 24) (8 / 8)
			Kit.RoundSeg (3 / 24) (1 / 8) (0 / 24) (0 / 8)
			Kit.RoundSeg (3 / 24) (7 / 8) (3 / 24) (1 / 8)
			Kit.ArcVH    (3 / 24) (7 / 8) (6 / 24) (8 / 8)
			Kit.ArcVH    (3 / 24) (1 / 8) (6 / 24) (0 / 8)
			Kit.RoundSeg (6 / 24) (8 / 8) (22 / 24) (8 / 8)
			Kit.ArcHV    (22 / 24) (8 / 8) (24 / 24) (7 / 8)
			Kit.ArcVH    (24 / 24) (7 / 8) (22 / 24) (6 / 8)
			Kit.RoundSeg (14 / 24) (6 / 8) (22 / 24) (6 / 8)
			Kit.ArcHV    (11 / 24) (8 / 8) (14 / 24) (6 / 8)
			Kit.ArcVH    (14 / 24) (6 / 8) (12 / 24) (5 / 8)
			Kit.RoundSeg (9 / 24) (5 / 8) (12 / 24) (5 / 8) 1 0
			Kit.ArcVH    (9 / 24) (5 / 8) (3 / 24) (2 / 8)
			Kit.ArcHV    (15 / 24) (6 / 8) (17 / 24) (5 / 8)
			Kit.ArcVH    (17 / 24) (5 / 8) (15 / 24) (4 / 8)
			Kit.RoundSeg (11 / 24) (4 / 8) (15 / 24) (4 / 8) 1 0
			Kit.ArcHV    (14 / 24) (4 / 8) (16 / 24) (3 / 8)
			Kit.ArcVH    (16 / 24) (3 / 8) (14 / 24) (2 / 8)
			Kit.RoundSeg (8 / 24) (2 / 8) (14 / 24) (2 / 8) 1 0
			Kit.ArcHV    (13 / 24) (2 / 8) (15 / 24) (1 / 8)
			Kit.ArcVH    (15 / 24) (1 / 8) (13 / 24) (0 / 8)
			Kit.RoundSeg (6 / 24) (0 / 8) (13 / 24) (0 / 8)

	for-width-kinds WideWidth1
		local sb : SB * (0.5 * MosaicWidthScalar)
		local hBox : new Box
			mix SymbolMid PlusTop (0.5 * MosaicWidthScalar)
			mix SymbolMid PlusBot (0.5 * MosaicWidthScalar)
			* sb
			MosaicWidth - sb

		local vScalar : Math.sqrt (2 * MosaicWidthScalar)
		local vBox : new Box
			mix SymbolMid PlusTop (0.5 * vScalar)
			mix SymbolMid PlusBot (0.5 * vScalar)
			sb + 0.5 * (MosaicWidth - Width * vScalar)
			(Width * vScalar - sb) + 0.5 * (MosaicWidth - Width * vScalar)

		define sw : AdviceStroke 8 : Math.sqrt MosaicWidthScalar

		create-glyph [MangleName "whiteRightPointingIndex"] [MangleUnicode 0x261E] : glyph-proc
			set-width MosaicWidth
			include : PointingHandShape hBox [Translate 0 0] sw

		create-glyph [MangleName "whiteLeftPointingIndex"] [MangleUnicode 0x261C] : glyph-proc
			set-width MosaicWidth
			local tfm : Transform.Combine
				Translate (-0.5 * MosaicWidth) (-SymbolMid)
				Scale (-1) 1
				Translate (+0.5 * MosaicWidth) (+SymbolMid)
			include : PointingHandShape hBox tfm sw

		create-glyph [MangleName "whiteDownPointingIndex"] [MangleUnicode 0x261F] : glyph-proc
			set-width MosaicWidth
			local tfm : Transform.Combine
				Translate (-0.5 * MosaicWidth) (-SymbolMid)
				Rotate (-0.5 * Math.PI)
				Translate (+0.5 * MosaicWidth) (+SymbolMid)
			include : PointingHandShape vBox tfm sw

		create-glyph [MangleName "whiteUpPointingIndex"] [MangleUnicode 0x261D] : glyph-proc
			set-width MosaicWidth
			local tfm : Transform.Combine
				Translate (-0.5 * MosaicWidth) (-SymbolMid)
				Scale (-1) 1
				Rotate (-0.5 * Math.PI)
				Translate (+0.5 * MosaicWidth) (+SymbolMid)
			include : PointingHandShape vBox tfm sw
