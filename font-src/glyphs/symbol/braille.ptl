###### Braille symbols
$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../support/utils.mjs"
import [maskBit maskBits popCountByte] from"../../support/util/mask-bit.mjs"

glyph-module

glyph-block Symbol-Braille : begin
	if recursive : return nothing

	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	local left : Middle - (0.25 * Width)
	local right : Middle + (0.25 * Width)
	local offsetY : 0.3 * (SymbolMid - PictTop)
	local stress : 0.5 * [AdviceStroke 3.375]
	local dotRadius : PeriodRadius * [Math.min 1 (stress / HalfStroke)]

	define [BrailleYCoord y] (SymbolMid + y * offsetY)
	define [BrailleOutlineShape byte] : glyph-proc
		foreach [bit : range 0 8] : if [maskBit byte bit] : begin
			include : match bit
				0 : DotAt left  [BrailleYCoord (-3)] dotRadius
				1 : DotAt left  [BrailleYCoord (-1)] dotRadius
				2 : DotAt left  [BrailleYCoord   1 ] dotRadius
				3 : DotAt right [BrailleYCoord (-3)] dotRadius
				4 : DotAt right [BrailleYCoord (-1)] dotRadius
				5 : DotAt right [BrailleYCoord   1 ] dotRadius
				6 : DotAt left  [BrailleYCoord   3 ] dotRadius
				7 : DotAt right [BrailleYCoord   3 ] dotRadius

	define [BrailleReferenceShape byte] : glyph-proc
		foreach [bit : range 0 8] : if [maskBit byte bit]
			include : refer-glyph ['braille' + (bit + 1)]

	define [BrailleHalvesShape byte] : glyph-proc
		local leftHalf  : maskBits byte 0x47
		local rightHalf : maskBits byte 0xB8
		include : refer-glyph : brailleGlyphName leftHalf
		include : refer-glyph : brailleGlyphName rightHalf

	define [brailleBuildStage byte] : begin
		if (1 == [popCountByte byte]) : return 1
		if (![maskBits byte 0x47] || ![maskBits byte 0xB8]) : return 2
		return 3

	define [brailleGlyphName byte] : begin
		local dots {}
		foreach [bit : range 0 8] : if [maskBit byte bit] : dots.push (bit + 1)
		return ("braille" + [dots.join ''])

	### Computed Braille Patterns
	###
	### Bit to Dot mapping:
	###   0  3
	###   1  4
	###   2  5
	###   6  7

	define stageConfig : list
		list 1 BrailleOutlineShape
		list 2 BrailleReferenceShape
		list 3 BrailleHalvesShape

	foreach { stage F } [items-of stageConfig] : begin
		foreach [byte : range 1 256] : if (stage == [brailleBuildStage byte])
			create-glyph [brailleGlyphName byte] (0x2800 + byte) : glyph-proc
				include : ForceUpright
				include : F byte
